/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-conversions.sh

package v1beta1

import (
	reflect "reflect"

	api "k8s.io/kubernetes/pkg/api"
	certificates "k8s.io/kubernetes/pkg/apis/certificates"
	conversion "k8s.io/kubernetes/pkg/conversion"
)

func autoConvert_certificates_CertificateSigningRequest_To_v1beta1_CertificateSigningRequest(in *certificates.CertificateSigningRequest, out *CertificateSigningRequest, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*certificates.CertificateSigningRequest))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_certificates_CertificateSigningRequestSpec_To_v1beta1_CertificateSigningRequestSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_certificates_CertificateSigningRequestStatus_To_v1beta1_CertificateSigningRequestStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	if err := Convert_certificates_CertificateSigningRequestApproval_To_v1beta1_CertificateSigningRequestApproval(&in.Approve, &out.Approve, s); err != nil {
		return err
	}
	return nil
}

func Convert_certificates_CertificateSigningRequest_To_v1beta1_CertificateSigningRequest(in *certificates.CertificateSigningRequest, out *CertificateSigningRequest, s conversion.Scope) error {
	return autoConvert_certificates_CertificateSigningRequest_To_v1beta1_CertificateSigningRequest(in, out, s)
}

func autoConvert_certificates_CertificateSigningRequestApproval_To_v1beta1_CertificateSigningRequestApproval(in *certificates.CertificateSigningRequestApproval, out *CertificateSigningRequestApproval, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*certificates.CertificateSigningRequestApproval))(in)
	}
	out.State = CertificateRequestState(in.State)
	out.Reason = in.Reason
	out.Message = in.Message
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.Certificate, &out.Certificate, s); err != nil {
		return err
	}
	return nil
}

func Convert_certificates_CertificateSigningRequestApproval_To_v1beta1_CertificateSigningRequestApproval(in *certificates.CertificateSigningRequestApproval, out *CertificateSigningRequestApproval, s conversion.Scope) error {
	return autoConvert_certificates_CertificateSigningRequestApproval_To_v1beta1_CertificateSigningRequestApproval(in, out, s)
}

func autoConvert_certificates_CertificateSigningRequestList_To_v1beta1_CertificateSigningRequestList(in *certificates.CertificateSigningRequestList, out *CertificateSigningRequestList, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*certificates.CertificateSigningRequestList))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		out.Items = make([]CertificateSigningRequest, len(in.Items))
		for i := range in.Items {
			if err := Convert_certificates_CertificateSigningRequest_To_v1beta1_CertificateSigningRequest(&in.Items[i], &out.Items[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_certificates_CertificateSigningRequestList_To_v1beta1_CertificateSigningRequestList(in *certificates.CertificateSigningRequestList, out *CertificateSigningRequestList, s conversion.Scope) error {
	return autoConvert_certificates_CertificateSigningRequestList_To_v1beta1_CertificateSigningRequestList(in, out, s)
}

func autoConvert_certificates_CertificateSigningRequestSpec_To_v1beta1_CertificateSigningRequestSpec(in *certificates.CertificateSigningRequestSpec, out *CertificateSigningRequestSpec, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*certificates.CertificateSigningRequestSpec))(in)
	}
	out.CertificateRequest = in.CertificateRequest
	if in.ExtraInfo != nil {
		out.ExtraInfo = make([]string, len(in.ExtraInfo))
		for i := range in.ExtraInfo {
			out.ExtraInfo[i] = in.ExtraInfo[i]
		}
	} else {
		out.ExtraInfo = nil
	}
	return nil
}

func Convert_certificates_CertificateSigningRequestSpec_To_v1beta1_CertificateSigningRequestSpec(in *certificates.CertificateSigningRequestSpec, out *CertificateSigningRequestSpec, s conversion.Scope) error {
	return autoConvert_certificates_CertificateSigningRequestSpec_To_v1beta1_CertificateSigningRequestSpec(in, out, s)
}

func autoConvert_certificates_CertificateSigningRequestStatus_To_v1beta1_CertificateSigningRequestStatus(in *certificates.CertificateSigningRequestStatus, out *CertificateSigningRequestStatus, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*certificates.CertificateSigningRequestStatus))(in)
	}
	out.Username = in.Username
	out.UID = in.UID
	if in.Groups != nil {
		out.Groups = make([]string, len(in.Groups))
		for i := range in.Groups {
			out.Groups[i] = in.Groups[i]
		}
	} else {
		out.Groups = nil
	}
	out.Fingerprint = in.Fingerprint
	if err := s.Convert(&in.Subject, &out.Subject, 0); err != nil {
		return err
	}
	if in.Hostnames != nil {
		out.Hostnames = make([]string, len(in.Hostnames))
		for i := range in.Hostnames {
			out.Hostnames[i] = in.Hostnames[i]
		}
	} else {
		out.Hostnames = nil
	}
	if in.IPAddresses != nil {
		out.IPAddresses = make([]string, len(in.IPAddresses))
		for i := range in.IPAddresses {
			out.IPAddresses[i] = in.IPAddresses[i]
		}
	} else {
		out.IPAddresses = nil
	}
	return nil
}

func Convert_certificates_CertificateSigningRequestStatus_To_v1beta1_CertificateSigningRequestStatus(in *certificates.CertificateSigningRequestStatus, out *CertificateSigningRequestStatus, s conversion.Scope) error {
	return autoConvert_certificates_CertificateSigningRequestStatus_To_v1beta1_CertificateSigningRequestStatus(in, out, s)
}

func autoConvert_v1beta1_CertificateSigningRequest_To_certificates_CertificateSigningRequest(in *CertificateSigningRequest, out *certificates.CertificateSigningRequest, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*CertificateSigningRequest))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1beta1_CertificateSigningRequestSpec_To_certificates_CertificateSigningRequestSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta1_CertificateSigningRequestStatus_To_certificates_CertificateSigningRequestStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	if err := Convert_v1beta1_CertificateSigningRequestApproval_To_certificates_CertificateSigningRequestApproval(&in.Approve, &out.Approve, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta1_CertificateSigningRequest_To_certificates_CertificateSigningRequest(in *CertificateSigningRequest, out *certificates.CertificateSigningRequest, s conversion.Scope) error {
	return autoConvert_v1beta1_CertificateSigningRequest_To_certificates_CertificateSigningRequest(in, out, s)
}

func autoConvert_v1beta1_CertificateSigningRequestApproval_To_certificates_CertificateSigningRequestApproval(in *CertificateSigningRequestApproval, out *certificates.CertificateSigningRequestApproval, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*CertificateSigningRequestApproval))(in)
	}
	out.State = certificates.CertificateRequestState(in.State)
	out.Reason = in.Reason
	out.Message = in.Message
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.Certificate, &out.Certificate, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta1_CertificateSigningRequestApproval_To_certificates_CertificateSigningRequestApproval(in *CertificateSigningRequestApproval, out *certificates.CertificateSigningRequestApproval, s conversion.Scope) error {
	return autoConvert_v1beta1_CertificateSigningRequestApproval_To_certificates_CertificateSigningRequestApproval(in, out, s)
}

func autoConvert_v1beta1_CertificateSigningRequestList_To_certificates_CertificateSigningRequestList(in *CertificateSigningRequestList, out *certificates.CertificateSigningRequestList, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*CertificateSigningRequestList))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		out.Items = make([]certificates.CertificateSigningRequest, len(in.Items))
		for i := range in.Items {
			if err := Convert_v1beta1_CertificateSigningRequest_To_certificates_CertificateSigningRequest(&in.Items[i], &out.Items[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta1_CertificateSigningRequestList_To_certificates_CertificateSigningRequestList(in *CertificateSigningRequestList, out *certificates.CertificateSigningRequestList, s conversion.Scope) error {
	return autoConvert_v1beta1_CertificateSigningRequestList_To_certificates_CertificateSigningRequestList(in, out, s)
}

func autoConvert_v1beta1_CertificateSigningRequestSpec_To_certificates_CertificateSigningRequestSpec(in *CertificateSigningRequestSpec, out *certificates.CertificateSigningRequestSpec, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*CertificateSigningRequestSpec))(in)
	}
	out.CertificateRequest = in.CertificateRequest
	if in.ExtraInfo != nil {
		out.ExtraInfo = make([]string, len(in.ExtraInfo))
		for i := range in.ExtraInfo {
			out.ExtraInfo[i] = in.ExtraInfo[i]
		}
	} else {
		out.ExtraInfo = nil
	}
	return nil
}

func Convert_v1beta1_CertificateSigningRequestSpec_To_certificates_CertificateSigningRequestSpec(in *CertificateSigningRequestSpec, out *certificates.CertificateSigningRequestSpec, s conversion.Scope) error {
	return autoConvert_v1beta1_CertificateSigningRequestSpec_To_certificates_CertificateSigningRequestSpec(in, out, s)
}

func autoConvert_v1beta1_CertificateSigningRequestStatus_To_certificates_CertificateSigningRequestStatus(in *CertificateSigningRequestStatus, out *certificates.CertificateSigningRequestStatus, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*CertificateSigningRequestStatus))(in)
	}
	out.Username = in.Username
	out.UID = in.UID
	if in.Groups != nil {
		out.Groups = make([]string, len(in.Groups))
		for i := range in.Groups {
			out.Groups[i] = in.Groups[i]
		}
	} else {
		out.Groups = nil
	}
	out.Fingerprint = in.Fingerprint
	if err := s.Convert(&in.Subject, &out.Subject, 0); err != nil {
		return err
	}
	if in.Hostnames != nil {
		out.Hostnames = make([]string, len(in.Hostnames))
		for i := range in.Hostnames {
			out.Hostnames[i] = in.Hostnames[i]
		}
	} else {
		out.Hostnames = nil
	}
	if in.IPAddresses != nil {
		out.IPAddresses = make([]string, len(in.IPAddresses))
		for i := range in.IPAddresses {
			out.IPAddresses[i] = in.IPAddresses[i]
		}
	} else {
		out.IPAddresses = nil
	}
	return nil
}

func Convert_v1beta1_CertificateSigningRequestStatus_To_certificates_CertificateSigningRequestStatus(in *CertificateSigningRequestStatus, out *certificates.CertificateSigningRequestStatus, s conversion.Scope) error {
	return autoConvert_v1beta1_CertificateSigningRequestStatus_To_certificates_CertificateSigningRequestStatus(in, out, s)
}

func init() {
	err := api.Scheme.AddGeneratedConversionFuncs(
		autoConvert_certificates_CertificateSigningRequestApproval_To_v1beta1_CertificateSigningRequestApproval,
		autoConvert_certificates_CertificateSigningRequestList_To_v1beta1_CertificateSigningRequestList,
		autoConvert_certificates_CertificateSigningRequestSpec_To_v1beta1_CertificateSigningRequestSpec,
		autoConvert_certificates_CertificateSigningRequestStatus_To_v1beta1_CertificateSigningRequestStatus,
		autoConvert_certificates_CertificateSigningRequest_To_v1beta1_CertificateSigningRequest,
		autoConvert_v1beta1_CertificateSigningRequestApproval_To_certificates_CertificateSigningRequestApproval,
		autoConvert_v1beta1_CertificateSigningRequestList_To_certificates_CertificateSigningRequestList,
		autoConvert_v1beta1_CertificateSigningRequestSpec_To_certificates_CertificateSigningRequestSpec,
		autoConvert_v1beta1_CertificateSigningRequestStatus_To_certificates_CertificateSigningRequestStatus,
		autoConvert_v1beta1_CertificateSigningRequest_To_certificates_CertificateSigningRequest,
	)
	if err != nil {
		// If one of the conversion functions is malformed, detect it immediately.
		panic(err)
	}
}
