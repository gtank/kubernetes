/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	pkg4_pkix "crypto/x509/pkix"
	pkg5_asn1 "encoding/asn1"
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg6_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg8_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg7_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_pkix.Name
		var v1 pkg5_asn1.ObjectIdentifier
		var v2 pkg2_api.ObjectMeta
		var v3 pkg6_resource.Quantity
		var v4 pkg1_unversioned.TypeMeta
		var v5 pkg3_types.UID
		var v6 pkg8_intstr.IntOrString
		var v7 pkg7_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *CertificateSigningRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yy10.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy11 := &x.ObjectMeta
					yy11.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy13 := &x.Spec
				yy13.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy14 := &x.Spec
				yy14.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy16 := &x.Status
				yy16.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy17 := &x.Status
				yy17.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym18 := z.DecBinary()
	_ = yym18
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct19 := r.ContainerType()
		if yyct19 == codecSelferValueTypeMap1234 {
			yyl19 := r.ReadMapStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl19, d)
			}
		} else if yyct19 == codecSelferValueTypeArray1234 {
			yyl19 := r.ReadArrayStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl19, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys20Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys20Slc
	var yyhl20 bool = l >= 0
	for yyj20 := 0; ; yyj20++ {
		if yyhl20 {
			if yyj20 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys20Slc = r.DecodeBytes(yys20Slc, true, true)
		yys20 := string(yys20Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys20 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv23 := &x.ObjectMeta
				yyv23.CodecDecodeSelf(d)
			}
		case "Spec":
			if r.TryDecodeAsNil() {
				x.Spec = CertificateSigningRequestSpec{}
			} else {
				yyv24 := &x.Spec
				yyv24.CodecDecodeSelf(d)
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = CertificateSigningRequestStatus{}
			} else {
				yyv25 := &x.Status
				yyv25.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys20)
		} // end switch yys20
	} // end for yyj20
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv29 := &x.ObjectMeta
		yyv29.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = CertificateSigningRequestSpec{}
	} else {
		yyv30 := &x.Spec
		yyv30.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = CertificateSigningRequestStatus{}
	} else {
		yyv31 := &x.Status
		yyv31.CodecDecodeSelf(d)
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CertificateSigningRequestSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym32 := z.EncBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep33 := !z.EncBinary()
			yy2arr33 := z.EncBasicHandle().StructToArray
			var yyq33 [6]bool
			_, _, _ = yysep33, yyq33, yy2arr33
			const yyr33 bool = false
			yyq33[1] = x.Fingerprint != ""
			yyq33[2] = true
			yyq33[3] = len(x.Hostnames) != 0
			yyq33[4] = len(x.IPAddresses) != 0
			yyq33[5] = len(x.ExtraInfo) != 0
			var yynn33 int
			if yyr33 || yy2arr33 {
				r.EncodeArrayStart(6)
			} else {
				yynn33 = 1
				for _, b := range yyq33 {
					if b {
						yynn33++
					}
				}
				r.EncodeMapStart(yynn33)
				yynn33 = 0
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CertificateRequest))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("csr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym36 := z.EncBinary()
				_ = yym36
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CertificateRequest))
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[1] {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Fingerprint))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fingerprint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Fingerprint))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[2] {
					yy41 := &x.Subject
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.Subject
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else if z.HasExtensions() && z.EncExt(yy43) {
					} else {
						z.EncFallback(yy43)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[3] {
					if x.Hostnames == nil {
						r.EncodeNil()
					} else {
						yym46 := z.EncBinary()
						_ = yym46
						if false {
						} else {
							z.F.EncSliceStringV(x.Hostnames, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostnames"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hostnames == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Hostnames, false, e)
						}
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[4] {
					if x.IPAddresses == nil {
						r.EncodeNil()
					} else {
						yym49 := z.EncBinary()
						_ = yym49
						if false {
						} else {
							z.F.EncSliceStringV(x.IPAddresses, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ipaddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.IPAddresses == nil {
						r.EncodeNil()
					} else {
						yym50 := z.EncBinary()
						_ = yym50
						if false {
						} else {
							z.F.EncSliceStringV(x.IPAddresses, false, e)
						}
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[5] {
					if x.ExtraInfo == nil {
						r.EncodeNil()
					} else {
						yym52 := z.EncBinary()
						_ = yym52
						if false {
						} else {
							z.F.EncSliceStringV(x.ExtraInfo, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("extrainfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExtraInfo == nil {
						r.EncodeNil()
					} else {
						yym53 := z.EncBinary()
						_ = yym53
						if false {
						} else {
							z.F.EncSliceStringV(x.ExtraInfo, false, e)
						}
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequestSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym54 := z.DecBinary()
	_ = yym54
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct55 := r.ContainerType()
		if yyct55 == codecSelferValueTypeMap1234 {
			yyl55 := r.ReadMapStart()
			if yyl55 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl55, d)
			}
		} else if yyct55 == codecSelferValueTypeArray1234 {
			yyl55 := r.ReadArrayStart()
			if yyl55 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl55, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequestSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys56Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys56Slc
	var yyhl56 bool = l >= 0
	for yyj56 := 0; ; yyj56++ {
		if yyhl56 {
			if yyj56 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys56Slc = r.DecodeBytes(yys56Slc, true, true)
		yys56 := string(yys56Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys56 {
		case "csr":
			if r.TryDecodeAsNil() {
				x.CertificateRequest = ""
			} else {
				x.CertificateRequest = string(r.DecodeString())
			}
		case "fingerprint":
			if r.TryDecodeAsNil() {
				x.Fingerprint = ""
			} else {
				x.Fingerprint = string(r.DecodeString())
			}
		case "subject":
			if r.TryDecodeAsNil() {
				x.Subject = pkg4_pkix.Name{}
			} else {
				yyv59 := &x.Subject
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "hostnames":
			if r.TryDecodeAsNil() {
				x.Hostnames = nil
			} else {
				yyv61 := &x.Hostnames
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecSliceStringX(yyv61, false, d)
				}
			}
		case "ipaddresses":
			if r.TryDecodeAsNil() {
				x.IPAddresses = nil
			} else {
				yyv63 := &x.IPAddresses
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					z.F.DecSliceStringX(yyv63, false, d)
				}
			}
		case "extrainfo":
			if r.TryDecodeAsNil() {
				x.ExtraInfo = nil
			} else {
				yyv65 := &x.ExtraInfo
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecSliceStringX(yyv65, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys56)
		} // end switch yys56
	} // end for yyj56
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequestSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj67 int
	var yyb67 bool
	var yyhl67 bool = l >= 0
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CertificateRequest = ""
	} else {
		x.CertificateRequest = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Fingerprint = ""
	} else {
		x.Fingerprint = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subject = pkg4_pkix.Name{}
	} else {
		yyv70 := &x.Subject
		yym71 := z.DecBinary()
		_ = yym71
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv70) {
		} else {
			z.DecFallback(yyv70, false)
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostnames = nil
	} else {
		yyv72 := &x.Hostnames
		yym73 := z.DecBinary()
		_ = yym73
		if false {
		} else {
			z.F.DecSliceStringX(yyv72, false, d)
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IPAddresses = nil
	} else {
		yyv74 := &x.IPAddresses
		yym75 := z.DecBinary()
		_ = yym75
		if false {
		} else {
			z.F.DecSliceStringX(yyv74, false, d)
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExtraInfo = nil
	} else {
		yyv76 := &x.ExtraInfo
		yym77 := z.DecBinary()
		_ = yym77
		if false {
		} else {
			z.F.DecSliceStringX(yyv76, false, d)
		}
	}
	for {
		yyj67++
		if yyhl67 {
			yyb67 = yyj67 > l
		} else {
			yyb67 = r.CheckBreak()
		}
		if yyb67 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj67-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CertificateSigningRequestStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym78 := z.EncBinary()
		_ = yym78
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep79 := !z.EncBinary()
			yy2arr79 := z.EncBasicHandle().StructToArray
			var yyq79 [4]bool
			_, _, _ = yysep79, yyq79, yy2arr79
			const yyr79 bool = false
			yyq79[1] = x.Reason != ""
			yyq79[2] = x.Message != ""
			yyq79[3] = x.Certificate != ""
			var yynn79 int
			if yyr79 || yy2arr79 {
				r.EncodeArrayStart(4)
			} else {
				yynn79 = 1
				for _, b := range yyq79 {
					if b {
						yynn79++
					}
				}
				r.EncodeMapStart(yynn79)
				yynn79 = 0
			}
			if yyr79 || yy2arr79 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym81 := z.EncBinary()
				_ = yym81
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym82 := z.EncBinary()
				_ = yym82
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr79 || yy2arr79 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq79[1] {
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq79[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr79 || yy2arr79 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq79[2] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq79[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr79 || yy2arr79 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq79[3] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Certificate))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq79[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("certificate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Certificate))
					}
				}
			}
			if yyr79 || yy2arr79 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequestStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym92 := z.DecBinary()
	_ = yym92
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct93 := r.ContainerType()
		if yyct93 == codecSelferValueTypeMap1234 {
			yyl93 := r.ReadMapStart()
			if yyl93 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl93, d)
			}
		} else if yyct93 == codecSelferValueTypeArray1234 {
			yyl93 := r.ReadArrayStart()
			if yyl93 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl93, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequestStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys94Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys94Slc
	var yyhl94 bool = l >= 0
	for yyj94 := 0; ; yyj94++ {
		if yyhl94 {
			if yyj94 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys94Slc = r.DecodeBytes(yys94Slc, true, true)
		yys94 := string(yys94Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys94 {
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "certificate":
			if r.TryDecodeAsNil() {
				x.Certificate = ""
			} else {
				x.Certificate = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys94)
		} // end switch yys94
	} // end for yyj94
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequestStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj99 int
	var yyb99 bool
	var yyhl99 bool = l >= 0
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Certificate = ""
	} else {
		x.Certificate = string(r.DecodeString())
	}
	for {
		yyj99++
		if yyhl99 {
			yyb99 = yyj99 > l
		} else {
			yyb99 = r.CheckBreak()
		}
		if yyb99 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj99-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CertificateSigningRequestList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym104 := z.EncBinary()
		_ = yym104
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep105 := !z.EncBinary()
			yy2arr105 := z.EncBasicHandle().StructToArray
			var yyq105 [4]bool
			_, _, _ = yysep105, yyq105, yy2arr105
			const yyr105 bool = false
			yyq105[0] = x.Kind != ""
			yyq105[1] = x.APIVersion != ""
			yyq105[2] = true
			yyq105[3] = len(x.Items) != 0
			var yynn105 int
			if yyr105 || yy2arr105 {
				r.EncodeArrayStart(4)
			} else {
				yynn105 = 0
				for _, b := range yyq105 {
					if b {
						yynn105++
					}
				}
				r.EncodeMapStart(yynn105)
				yynn105 = 0
			}
			if yyr105 || yy2arr105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq105[0] {
					yym107 := z.EncBinary()
					_ = yym107
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq105[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym108 := z.EncBinary()
					_ = yym108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr105 || yy2arr105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq105[1] {
					yym110 := z.EncBinary()
					_ = yym110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq105[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym111 := z.EncBinary()
					_ = yym111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr105 || yy2arr105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq105[2] {
					yy113 := &x.ListMeta
					yym114 := z.EncBinary()
					_ = yym114
					if false {
					} else if z.HasExtensions() && z.EncExt(yy113) {
					} else {
						z.EncFallback(yy113)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq105[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy115 := &x.ListMeta
					yym116 := z.EncBinary()
					_ = yym116
					if false {
					} else if z.HasExtensions() && z.EncExt(yy115) {
					} else {
						z.EncFallback(yy115)
					}
				}
			}
			if yyr105 || yy2arr105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq105[3] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym118 := z.EncBinary()
						_ = yym118
						if false {
						} else {
							h.encSliceCertificateSigningRequest(([]CertificateSigningRequest)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq105[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym119 := z.EncBinary()
						_ = yym119
						if false {
						} else {
							h.encSliceCertificateSigningRequest(([]CertificateSigningRequest)(x.Items), e)
						}
					}
				}
			}
			if yyr105 || yy2arr105 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequestList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym120 := z.DecBinary()
	_ = yym120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct121 := r.ContainerType()
		if yyct121 == codecSelferValueTypeMap1234 {
			yyl121 := r.ReadMapStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl121, d)
			}
		} else if yyct121 == codecSelferValueTypeArray1234 {
			yyl121 := r.ReadArrayStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequestList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys122Slc
	var yyhl122 bool = l >= 0
	for yyj122 := 0; ; yyj122++ {
		if yyhl122 {
			if yyj122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys122Slc = r.DecodeBytes(yys122Slc, true, true)
		yys122 := string(yys122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys122 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv125 := &x.ListMeta
				yym126 := z.DecBinary()
				_ = yym126
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv125) {
				} else {
					z.DecFallback(yyv125, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv127 := &x.Items
				yym128 := z.DecBinary()
				_ = yym128
				if false {
				} else {
					h.decSliceCertificateSigningRequest((*[]CertificateSigningRequest)(yyv127), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys122)
		} // end switch yys122
	} // end for yyj122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequestList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj129 int
	var yyb129 bool
	var yyhl129 bool = l >= 0
	yyj129++
	if yyhl129 {
		yyb129 = yyj129 > l
	} else {
		yyb129 = r.CheckBreak()
	}
	if yyb129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj129++
	if yyhl129 {
		yyb129 = yyj129 > l
	} else {
		yyb129 = r.CheckBreak()
	}
	if yyb129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj129++
	if yyhl129 {
		yyb129 = yyj129 > l
	} else {
		yyb129 = r.CheckBreak()
	}
	if yyb129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv132 := &x.ListMeta
		yym133 := z.DecBinary()
		_ = yym133
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv132) {
		} else {
			z.DecFallback(yyv132, false)
		}
	}
	yyj129++
	if yyhl129 {
		yyb129 = yyj129 > l
	} else {
		yyb129 = r.CheckBreak()
	}
	if yyb129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv134 := &x.Items
		yym135 := z.DecBinary()
		_ = yym135
		if false {
		} else {
			h.decSliceCertificateSigningRequest((*[]CertificateSigningRequest)(yyv134), d)
		}
	}
	for {
		yyj129++
		if yyhl129 {
			yyb129 = yyj129 > l
		} else {
			yyb129 = r.CheckBreak()
		}
		if yyb129 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj129-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym136 := z.EncBinary()
		_ = yym136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep137 := !z.EncBinary()
			yy2arr137 := z.EncBasicHandle().StructToArray
			var yyq137 [1]bool
			_, _, _ = yysep137, yyq137, yy2arr137
			const yyr137 bool = false
			yyq137[0] = x.Replicas != 0
			var yynn137 int
			if yyr137 || yy2arr137 {
				r.EncodeArrayStart(1)
			} else {
				yynn137 = 0
				for _, b := range yyq137 {
					if b {
						yynn137++
					}
				}
				r.EncodeMapStart(yynn137)
				yynn137 = 0
			}
			if yyr137 || yy2arr137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq137[0] {
					yym139 := z.EncBinary()
					_ = yym139
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq137[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym140 := z.EncBinary()
					_ = yym140
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr137 || yy2arr137 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym141 := z.DecBinary()
	_ = yym141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct142 := r.ContainerType()
		if yyct142 == codecSelferValueTypeMap1234 {
			yyl142 := r.ReadMapStart()
			if yyl142 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl142, d)
			}
		} else if yyct142 == codecSelferValueTypeArray1234 {
			yyl142 := r.ReadArrayStart()
			if yyl142 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys143Slc
	var yyhl143 bool = l >= 0
	for yyj143 := 0; ; yyj143++ {
		if yyhl143 {
			if yyj143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys143Slc = r.DecodeBytes(yys143Slc, true, true)
		yys143 := string(yys143Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys143 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys143)
		} // end switch yys143
	} // end for yyj143
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj145 int
	var yyb145 bool
	var yyhl145 bool = l >= 0
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj145++
		if yyhl145 {
			yyb145 = yyj145 > l
		} else {
			yyb145 = r.CheckBreak()
		}
		if yyb145 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj145-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym147 := z.EncBinary()
		_ = yym147
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep148 := !z.EncBinary()
			yy2arr148 := z.EncBasicHandle().StructToArray
			var yyq148 [2]bool
			_, _, _ = yysep148, yyq148, yy2arr148
			const yyr148 bool = false
			yyq148[1] = len(x.Selector) != 0
			var yynn148 int
			if yyr148 || yy2arr148 {
				r.EncodeArrayStart(2)
			} else {
				yynn148 = 1
				for _, b := range yyq148 {
					if b {
						yynn148++
					}
				}
				r.EncodeMapStart(yynn148)
				yynn148 = 0
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym150 := z.EncBinary()
				_ = yym150
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym151 := z.EncBinary()
				_ = yym151
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq148[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym153 := z.EncBinary()
						_ = yym153
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq148[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym154 := z.EncBinary()
						_ = yym154
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym155 := z.DecBinary()
	_ = yym155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct156 := r.ContainerType()
		if yyct156 == codecSelferValueTypeMap1234 {
			yyl156 := r.ReadMapStart()
			if yyl156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl156, d)
			}
		} else if yyct156 == codecSelferValueTypeArray1234 {
			yyl156 := r.ReadArrayStart()
			if yyl156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys157Slc
	var yyhl157 bool = l >= 0
	for yyj157 := 0; ; yyj157++ {
		if yyhl157 {
			if yyj157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys157Slc = r.DecodeBytes(yys157Slc, true, true)
		yys157 := string(yys157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys157 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv159 := &x.Selector
				yym160 := z.DecBinary()
				_ = yym160
				if false {
				} else {
					z.F.DecMapStringStringX(yyv159, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys157)
		} // end switch yys157
	} // end for yyj157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj161 int
	var yyb161 bool
	var yyhl161 bool = l >= 0
	yyj161++
	if yyhl161 {
		yyb161 = yyj161 > l
	} else {
		yyb161 = r.CheckBreak()
	}
	if yyb161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj161++
	if yyhl161 {
		yyb161 = yyj161 > l
	} else {
		yyb161 = r.CheckBreak()
	}
	if yyb161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv163 := &x.Selector
		yym164 := z.DecBinary()
		_ = yym164
		if false {
		} else {
			z.F.DecMapStringStringX(yyv163, false, d)
		}
	}
	for {
		yyj161++
		if yyhl161 {
			yyb161 = yyj161 > l
		} else {
			yyb161 = r.CheckBreak()
		}
		if yyb161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym165 := z.EncBinary()
		_ = yym165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep166 := !z.EncBinary()
			yy2arr166 := z.EncBasicHandle().StructToArray
			var yyq166 [5]bool
			_, _, _ = yysep166, yyq166, yy2arr166
			const yyr166 bool = false
			yyq166[0] = x.Kind != ""
			yyq166[1] = x.APIVersion != ""
			yyq166[2] = true
			yyq166[3] = true
			yyq166[4] = true
			var yynn166 int
			if yyr166 || yy2arr166 {
				r.EncodeArrayStart(5)
			} else {
				yynn166 = 0
				for _, b := range yyq166 {
					if b {
						yynn166++
					}
				}
				r.EncodeMapStart(yynn166)
				yynn166 = 0
			}
			if yyr166 || yy2arr166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq166[0] {
					yym168 := z.EncBinary()
					_ = yym168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq166[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym169 := z.EncBinary()
					_ = yym169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr166 || yy2arr166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq166[1] {
					yym171 := z.EncBinary()
					_ = yym171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq166[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym172 := z.EncBinary()
					_ = yym172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr166 || yy2arr166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq166[2] {
					yy174 := &x.ObjectMeta
					yy174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq166[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy175 := &x.ObjectMeta
					yy175.CodecEncodeSelf(e)
				}
			}
			if yyr166 || yy2arr166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq166[3] {
					yy177 := &x.Spec
					yy177.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq166[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy178 := &x.Spec
					yy178.CodecEncodeSelf(e)
				}
			}
			if yyr166 || yy2arr166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq166[4] {
					yy180 := &x.Status
					yy180.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq166[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy181 := &x.Status
					yy181.CodecEncodeSelf(e)
				}
			}
			if yyr166 || yy2arr166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym182 := z.DecBinary()
	_ = yym182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct183 := r.ContainerType()
		if yyct183 == codecSelferValueTypeMap1234 {
			yyl183 := r.ReadMapStart()
			if yyl183 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl183, d)
			}
		} else if yyct183 == codecSelferValueTypeArray1234 {
			yyl183 := r.ReadArrayStart()
			if yyl183 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys184Slc
	var yyhl184 bool = l >= 0
	for yyj184 := 0; ; yyj184++ {
		if yyhl184 {
			if yyj184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys184Slc = r.DecodeBytes(yys184Slc, true, true)
		yys184 := string(yys184Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys184 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv187 := &x.ObjectMeta
				yyv187.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv188 := &x.Spec
				yyv188.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv189 := &x.Status
				yyv189.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys184)
		} // end switch yys184
	} // end for yyj184
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj190 int
	var yyb190 bool
	var yyhl190 bool = l >= 0
	yyj190++
	if yyhl190 {
		yyb190 = yyj190 > l
	} else {
		yyb190 = r.CheckBreak()
	}
	if yyb190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj190++
	if yyhl190 {
		yyb190 = yyj190 > l
	} else {
		yyb190 = r.CheckBreak()
	}
	if yyb190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj190++
	if yyhl190 {
		yyb190 = yyj190 > l
	} else {
		yyb190 = r.CheckBreak()
	}
	if yyb190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv193 := &x.ObjectMeta
		yyv193.CodecDecodeSelf(d)
	}
	yyj190++
	if yyhl190 {
		yyb190 = yyj190 > l
	} else {
		yyb190 = r.CheckBreak()
	}
	if yyb190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv194 := &x.Spec
		yyv194.CodecDecodeSelf(d)
	}
	yyj190++
	if yyhl190 {
		yyb190 = yyj190 > l
	} else {
		yyb190 = r.CheckBreak()
	}
	if yyb190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv195 := &x.Status
		yyv195.CodecDecodeSelf(d)
	}
	for {
		yyj190++
		if yyhl190 {
			yyb190 = yyj190 > l
		} else {
			yyb190 = r.CheckBreak()
		}
		if yyb190 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj190-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym196 := z.EncBinary()
		_ = yym196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep197 := !z.EncBinary()
			yy2arr197 := z.EncBasicHandle().StructToArray
			var yyq197 [2]bool
			_, _, _ = yysep197, yyq197, yy2arr197
			const yyr197 bool = false
			yyq197[0] = x.Kind != ""
			yyq197[1] = x.APIVersion != ""
			var yynn197 int
			if yyr197 || yy2arr197 {
				r.EncodeArrayStart(2)
			} else {
				yynn197 = 0
				for _, b := range yyq197 {
					if b {
						yynn197++
					}
				}
				r.EncodeMapStart(yynn197)
				yynn197 = 0
			}
			if yyr197 || yy2arr197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq197[0] {
					yym199 := z.EncBinary()
					_ = yym199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq197[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr197 || yy2arr197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq197[1] {
					yym202 := z.EncBinary()
					_ = yym202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq197[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym203 := z.EncBinary()
					_ = yym203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr197 || yy2arr197 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym204 := z.DecBinary()
	_ = yym204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct205 := r.ContainerType()
		if yyct205 == codecSelferValueTypeMap1234 {
			yyl205 := r.ReadMapStart()
			if yyl205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl205, d)
			}
		} else if yyct205 == codecSelferValueTypeArray1234 {
			yyl205 := r.ReadArrayStart()
			if yyl205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys206Slc
	var yyhl206 bool = l >= 0
	for yyj206 := 0; ; yyj206++ {
		if yyhl206 {
			if yyj206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys206Slc = r.DecodeBytes(yys206Slc, true, true)
		yys206 := string(yys206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys206 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys206)
		} // end switch yys206
	} // end for yyj206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj209 int
	var yyb209 bool
	var yyhl209 bool = l >= 0
	yyj209++
	if yyhl209 {
		yyb209 = yyj209 > l
	} else {
		yyb209 = r.CheckBreak()
	}
	if yyb209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj209++
	if yyhl209 {
		yyb209 = yyj209 > l
	} else {
		yyb209 = r.CheckBreak()
	}
	if yyb209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj209++
		if yyhl209 {
			yyb209 = yyj209 > l
		} else {
			yyb209 = r.CheckBreak()
		}
		if yyb209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym212 := z.EncBinary()
		_ = yym212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep213 := !z.EncBinary()
			yy2arr213 := z.EncBasicHandle().StructToArray
			var yyq213 [4]bool
			_, _, _ = yysep213, yyq213, yy2arr213
			const yyr213 bool = false
			yyq213[0] = x.Kind != ""
			yyq213[1] = x.Name != ""
			yyq213[2] = x.APIVersion != ""
			yyq213[3] = x.Subresource != ""
			var yynn213 int
			if yyr213 || yy2arr213 {
				r.EncodeArrayStart(4)
			} else {
				yynn213 = 0
				for _, b := range yyq213 {
					if b {
						yynn213++
					}
				}
				r.EncodeMapStart(yynn213)
				yynn213 = 0
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[0] {
					yym215 := z.EncBinary()
					_ = yym215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq213[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym216 := z.EncBinary()
					_ = yym216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[1] {
					yym218 := z.EncBinary()
					_ = yym218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq213[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym219 := z.EncBinary()
					_ = yym219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[2] {
					yym221 := z.EncBinary()
					_ = yym221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq213[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym222 := z.EncBinary()
					_ = yym222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[3] {
					yym224 := z.EncBinary()
					_ = yym224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq213[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym225 := z.EncBinary()
					_ = yym225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym226 := z.DecBinary()
	_ = yym226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct227 := r.ContainerType()
		if yyct227 == codecSelferValueTypeMap1234 {
			yyl227 := r.ReadMapStart()
			if yyl227 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl227, d)
			}
		} else if yyct227 == codecSelferValueTypeArray1234 {
			yyl227 := r.ReadArrayStart()
			if yyl227 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys228Slc
	var yyhl228 bool = l >= 0
	for yyj228 := 0; ; yyj228++ {
		if yyhl228 {
			if yyj228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys228Slc = r.DecodeBytes(yys228Slc, true, true)
		yys228 := string(yys228Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys228 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys228)
		} // end switch yys228
	} // end for yyj228
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj233 int
	var yyb233 bool
	var yyhl233 bool = l >= 0
	yyj233++
	if yyhl233 {
		yyb233 = yyj233 > l
	} else {
		yyb233 = r.CheckBreak()
	}
	if yyb233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj233++
	if yyhl233 {
		yyb233 = yyj233 > l
	} else {
		yyb233 = r.CheckBreak()
	}
	if yyb233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj233++
	if yyhl233 {
		yyb233 = yyj233 > l
	} else {
		yyb233 = r.CheckBreak()
	}
	if yyb233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj233++
	if yyhl233 {
		yyb233 = yyj233 > l
	} else {
		yyb233 = r.CheckBreak()
	}
	if yyb233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj233++
		if yyhl233 {
			yyb233 = yyj233 > l
		} else {
			yyb233 = r.CheckBreak()
		}
		if yyb233 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj233-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym238 := z.EncBinary()
		_ = yym238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep239 := !z.EncBinary()
			yy2arr239 := z.EncBasicHandle().StructToArray
			var yyq239 [1]bool
			_, _, _ = yysep239, yyq239, yy2arr239
			const yyr239 bool = false
			var yynn239 int
			if yyr239 || yy2arr239 {
				r.EncodeArrayStart(1)
			} else {
				yynn239 = 1
				for _, b := range yyq239 {
					if b {
						yynn239++
					}
				}
				r.EncodeMapStart(yynn239)
				yynn239 = 0
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym241 := z.EncBinary()
				_ = yym241
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym242 := z.EncBinary()
				_ = yym242
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym243 := z.DecBinary()
	_ = yym243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct244 := r.ContainerType()
		if yyct244 == codecSelferValueTypeMap1234 {
			yyl244 := r.ReadMapStart()
			if yyl244 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl244, d)
			}
		} else if yyct244 == codecSelferValueTypeArray1234 {
			yyl244 := r.ReadArrayStart()
			if yyl244 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl244, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys245Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys245Slc
	var yyhl245 bool = l >= 0
	for yyj245 := 0; ; yyj245++ {
		if yyhl245 {
			if yyj245 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys245Slc = r.DecodeBytes(yys245Slc, true, true)
		yys245 := string(yys245Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys245 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys245)
		} // end switch yys245
	} // end for yyj245
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj247 int
	var yyb247 bool
	var yyhl247 bool = l >= 0
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj247++
		if yyhl247 {
			yyb247 = yyj247 > l
		} else {
			yyb247 = r.CheckBreak()
		}
		if yyb247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [2]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(2)
			} else {
				yynn250 = 2
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym252 := z.EncBinary()
				_ = yym252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym253 := z.EncBinary()
				_ = yym253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy255 := &x.TargetValue
				yym256 := z.EncBinary()
				_ = yym256
				if false {
				} else if z.HasExtensions() && z.EncExt(yy255) {
				} else if !yym256 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy255)
				} else {
					z.EncFallback(yy255)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy257 := &x.TargetValue
				yym258 := z.EncBinary()
				_ = yym258
				if false {
				} else if z.HasExtensions() && z.EncExt(yy257) {
				} else if !yym258 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy257)
				} else {
					z.EncFallback(yy257)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym259 := z.DecBinary()
	_ = yym259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct260 := r.ContainerType()
		if yyct260 == codecSelferValueTypeMap1234 {
			yyl260 := r.ReadMapStart()
			if yyl260 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl260, d)
			}
		} else if yyct260 == codecSelferValueTypeArray1234 {
			yyl260 := r.ReadArrayStart()
			if yyl260 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl260, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys261Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys261Slc
	var yyhl261 bool = l >= 0
	for yyj261 := 0; ; yyj261++ {
		if yyhl261 {
			if yyj261 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys261Slc = r.DecodeBytes(yys261Slc, true, true)
		yys261 := string(yys261Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys261 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg6_resource.Quantity{}
			} else {
				yyv263 := &x.TargetValue
				yym264 := z.DecBinary()
				_ = yym264
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv263) {
				} else if !yym264 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv263)
				} else {
					z.DecFallback(yyv263, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys261)
		} // end switch yys261
	} // end for yyj261
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj265 int
	var yyb265 bool
	var yyhl265 bool = l >= 0
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj265++
	if yyhl265 {
		yyb265 = yyj265 > l
	} else {
		yyb265 = r.CheckBreak()
	}
	if yyb265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg6_resource.Quantity{}
	} else {
		yyv267 := &x.TargetValue
		yym268 := z.DecBinary()
		_ = yym268
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv267) {
		} else if !yym268 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv267)
		} else {
			z.DecFallback(yyv267, false)
		}
	}
	for {
		yyj265++
		if yyhl265 {
			yyb265 = yyj265 > l
		} else {
			yyb265 = r.CheckBreak()
		}
		if yyb265 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj265-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym269 := z.EncBinary()
		_ = yym269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep270 := !z.EncBinary()
			yy2arr270 := z.EncBasicHandle().StructToArray
			var yyq270 [1]bool
			_, _, _ = yysep270, yyq270, yy2arr270
			const yyr270 bool = false
			var yynn270 int
			if yyr270 || yy2arr270 {
				r.EncodeArrayStart(1)
			} else {
				yynn270 = 1
				for _, b := range yyq270 {
					if b {
						yynn270++
					}
				}
				r.EncodeMapStart(yynn270)
				yynn270 = 0
			}
			if yyr270 || yy2arr270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym272 := z.EncBinary()
					_ = yym272
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym273 := z.EncBinary()
					_ = yym273
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr270 || yy2arr270 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym274 := z.DecBinary()
	_ = yym274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct275 := r.ContainerType()
		if yyct275 == codecSelferValueTypeMap1234 {
			yyl275 := r.ReadMapStart()
			if yyl275 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl275, d)
			}
		} else if yyct275 == codecSelferValueTypeArray1234 {
			yyl275 := r.ReadArrayStart()
			if yyl275 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl275, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys276Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys276Slc
	var yyhl276 bool = l >= 0
	for yyj276 := 0; ; yyj276++ {
		if yyhl276 {
			if yyj276 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys276Slc = r.DecodeBytes(yys276Slc, true, true)
		yys276 := string(yys276Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys276 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv277 := &x.Items
				yym278 := z.DecBinary()
				_ = yym278
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv277), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys276)
		} // end switch yys276
	} // end for yyj276
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj279 int
	var yyb279 bool
	var yyhl279 bool = l >= 0
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv280 := &x.Items
		yym281 := z.DecBinary()
		_ = yym281
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv280), d)
		}
	}
	for {
		yyj279++
		if yyhl279 {
			yyb279 = yyj279 > l
		} else {
			yyb279 = r.CheckBreak()
		}
		if yyb279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym282 := z.EncBinary()
		_ = yym282
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep283 := !z.EncBinary()
			yy2arr283 := z.EncBasicHandle().StructToArray
			var yyq283 [2]bool
			_, _, _ = yysep283, yyq283, yy2arr283
			const yyr283 bool = false
			var yynn283 int
			if yyr283 || yy2arr283 {
				r.EncodeArrayStart(2)
			} else {
				yynn283 = 2
				for _, b := range yyq283 {
					if b {
						yynn283++
					}
				}
				r.EncodeMapStart(yynn283)
				yynn283 = 0
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym285 := z.EncBinary()
				_ = yym285
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym286 := z.EncBinary()
				_ = yym286
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy288 := &x.CurrentValue
				yym289 := z.EncBinary()
				_ = yym289
				if false {
				} else if z.HasExtensions() && z.EncExt(yy288) {
				} else if !yym289 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy288)
				} else {
					z.EncFallback(yy288)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy290 := &x.CurrentValue
				yym291 := z.EncBinary()
				_ = yym291
				if false {
				} else if z.HasExtensions() && z.EncExt(yy290) {
				} else if !yym291 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy290)
				} else {
					z.EncFallback(yy290)
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym292 := z.DecBinary()
	_ = yym292
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct293 := r.ContainerType()
		if yyct293 == codecSelferValueTypeMap1234 {
			yyl293 := r.ReadMapStart()
			if yyl293 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl293, d)
			}
		} else if yyct293 == codecSelferValueTypeArray1234 {
			yyl293 := r.ReadArrayStart()
			if yyl293 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl293, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys294Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys294Slc
	var yyhl294 bool = l >= 0
	for yyj294 := 0; ; yyj294++ {
		if yyhl294 {
			if yyj294 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys294Slc = r.DecodeBytes(yys294Slc, true, true)
		yys294 := string(yys294Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys294 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg6_resource.Quantity{}
			} else {
				yyv296 := &x.CurrentValue
				yym297 := z.DecBinary()
				_ = yym297
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv296) {
				} else if !yym297 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv296)
				} else {
					z.DecFallback(yyv296, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys294)
		} // end switch yys294
	} // end for yyj294
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj298 int
	var yyb298 bool
	var yyhl298 bool = l >= 0
	yyj298++
	if yyhl298 {
		yyb298 = yyj298 > l
	} else {
		yyb298 = r.CheckBreak()
	}
	if yyb298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj298++
	if yyhl298 {
		yyb298 = yyj298 > l
	} else {
		yyb298 = r.CheckBreak()
	}
	if yyb298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg6_resource.Quantity{}
	} else {
		yyv300 := &x.CurrentValue
		yym301 := z.DecBinary()
		_ = yym301
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv300) {
		} else if !yym301 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv300)
		} else {
			z.DecFallback(yyv300, false)
		}
	}
	for {
		yyj298++
		if yyhl298 {
			yyb298 = yyj298 > l
		} else {
			yyb298 = r.CheckBreak()
		}
		if yyb298 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj298-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym302 := z.EncBinary()
		_ = yym302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep303 := !z.EncBinary()
			yy2arr303 := z.EncBasicHandle().StructToArray
			var yyq303 [1]bool
			_, _, _ = yysep303, yyq303, yy2arr303
			const yyr303 bool = false
			var yynn303 int
			if yyr303 || yy2arr303 {
				r.EncodeArrayStart(1)
			} else {
				yynn303 = 1
				for _, b := range yyq303 {
					if b {
						yynn303++
					}
				}
				r.EncodeMapStart(yynn303)
				yynn303 = 0
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym307 := z.DecBinary()
	_ = yym307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct308 := r.ContainerType()
		if yyct308 == codecSelferValueTypeMap1234 {
			yyl308 := r.ReadMapStart()
			if yyl308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl308, d)
			}
		} else if yyct308 == codecSelferValueTypeArray1234 {
			yyl308 := r.ReadArrayStart()
			if yyl308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys309Slc
	var yyhl309 bool = l >= 0
	for yyj309 := 0; ; yyj309++ {
		if yyhl309 {
			if yyj309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys309Slc = r.DecodeBytes(yys309Slc, true, true)
		yys309 := string(yys309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys309 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv310 := &x.Items
				yym311 := z.DecBinary()
				_ = yym311
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv310), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys309)
		} // end switch yys309
	} // end for yyj309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj312 int
	var yyb312 bool
	var yyhl312 bool = l >= 0
	yyj312++
	if yyhl312 {
		yyb312 = yyj312 > l
	} else {
		yyb312 = r.CheckBreak()
	}
	if yyb312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv313 := &x.Items
		yym314 := z.DecBinary()
		_ = yym314
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv313), d)
		}
	}
	for {
		yyj312++
		if yyhl312 {
			yyb312 = yyj312 > l
		} else {
			yyb312 = r.CheckBreak()
		}
		if yyb312 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj312-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym315 := z.EncBinary()
		_ = yym315
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep316 := !z.EncBinary()
			yy2arr316 := z.EncBasicHandle().StructToArray
			var yyq316 [4]bool
			_, _, _ = yysep316, yyq316, yy2arr316
			const yyr316 bool = false
			yyq316[1] = x.MinReplicas != nil
			yyq316[3] = x.CPUUtilization != nil
			var yynn316 int
			if yyr316 || yy2arr316 {
				r.EncodeArrayStart(4)
			} else {
				yynn316 = 2
				for _, b := range yyq316 {
					if b {
						yynn316++
					}
				}
				r.EncodeMapStart(yynn316)
				yynn316 = 0
			}
			if yyr316 || yy2arr316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy318 := &x.ScaleRef
				yy318.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy319 := &x.ScaleRef
				yy319.CodecEncodeSelf(e)
			}
			if yyr316 || yy2arr316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq316[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy321 := *x.MinReplicas
						yym322 := z.EncBinary()
						_ = yym322
						if false {
						} else {
							r.EncodeInt(int64(yy321))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq316[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy323 := *x.MinReplicas
						yym324 := z.EncBinary()
						_ = yym324
						if false {
						} else {
							r.EncodeInt(int64(yy323))
						}
					}
				}
			}
			if yyr316 || yy2arr316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym326 := z.EncBinary()
				_ = yym326
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym327 := z.EncBinary()
				_ = yym327
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr316 || yy2arr316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq316[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq316[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr316 || yy2arr316 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym329 := z.DecBinary()
	_ = yym329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct330 := r.ContainerType()
		if yyct330 == codecSelferValueTypeMap1234 {
			yyl330 := r.ReadMapStart()
			if yyl330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl330, d)
			}
		} else if yyct330 == codecSelferValueTypeArray1234 {
			yyl330 := r.ReadArrayStart()
			if yyl330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys331Slc
	var yyhl331 bool = l >= 0
	for yyj331 := 0; ; yyj331++ {
		if yyhl331 {
			if yyj331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys331Slc = r.DecodeBytes(yys331Slc, true, true)
		yys331 := string(yys331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys331 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv332 := &x.ScaleRef
				yyv332.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym334 := z.DecBinary()
				_ = yym334
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys331)
		} // end switch yys331
	} // end for yyj331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj337 int
	var yyb337 bool
	var yyhl337 bool = l >= 0
	yyj337++
	if yyhl337 {
		yyb337 = yyj337 > l
	} else {
		yyb337 = r.CheckBreak()
	}
	if yyb337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv338 := &x.ScaleRef
		yyv338.CodecDecodeSelf(d)
	}
	yyj337++
	if yyhl337 {
		yyb337 = yyj337 > l
	} else {
		yyb337 = r.CheckBreak()
	}
	if yyb337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym340 := z.DecBinary()
		_ = yym340
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj337++
	if yyhl337 {
		yyb337 = yyj337 > l
	} else {
		yyb337 = r.CheckBreak()
	}
	if yyb337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj337++
	if yyhl337 {
		yyb337 = yyj337 > l
	} else {
		yyb337 = r.CheckBreak()
	}
	if yyb337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj337++
		if yyhl337 {
			yyb337 = yyj337 > l
		} else {
			yyb337 = r.CheckBreak()
		}
		if yyb337 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj337-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym343 := z.EncBinary()
		_ = yym343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep344 := !z.EncBinary()
			yy2arr344 := z.EncBasicHandle().StructToArray
			var yyq344 [5]bool
			_, _, _ = yysep344, yyq344, yy2arr344
			const yyr344 bool = false
			yyq344[0] = x.ObservedGeneration != nil
			yyq344[1] = x.LastScaleTime != nil
			yyq344[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn344 int
			if yyr344 || yy2arr344 {
				r.EncodeArrayStart(5)
			} else {
				yynn344 = 2
				for _, b := range yyq344 {
					if b {
						yynn344++
					}
				}
				r.EncodeMapStart(yynn344)
				yynn344 = 0
			}
			if yyr344 || yy2arr344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq344[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy346 := *x.ObservedGeneration
						yym347 := z.EncBinary()
						_ = yym347
						if false {
						} else {
							r.EncodeInt(int64(yy346))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq344[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy348 := *x.ObservedGeneration
						yym349 := z.EncBinary()
						_ = yym349
						if false {
						} else {
							r.EncodeInt(int64(yy348))
						}
					}
				}
			}
			if yyr344 || yy2arr344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq344[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym351 := z.EncBinary()
						_ = yym351
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym351 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym351 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq344[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym352 := z.EncBinary()
						_ = yym352
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym352 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym352 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr344 || yy2arr344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym354 := z.EncBinary()
				_ = yym354
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym355 := z.EncBinary()
				_ = yym355
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr344 || yy2arr344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym357 := z.EncBinary()
				_ = yym357
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym358 := z.EncBinary()
				_ = yym358
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr344 || yy2arr344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq344[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy360 := *x.CurrentCPUUtilizationPercentage
						yym361 := z.EncBinary()
						_ = yym361
						if false {
						} else {
							r.EncodeInt(int64(yy360))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq344[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy362 := *x.CurrentCPUUtilizationPercentage
						yym363 := z.EncBinary()
						_ = yym363
						if false {
						} else {
							r.EncodeInt(int64(yy362))
						}
					}
				}
			}
			if yyr344 || yy2arr344 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym364 := z.DecBinary()
	_ = yym364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct365 := r.ContainerType()
		if yyct365 == codecSelferValueTypeMap1234 {
			yyl365 := r.ReadMapStart()
			if yyl365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl365, d)
			}
		} else if yyct365 == codecSelferValueTypeArray1234 {
			yyl365 := r.ReadArrayStart()
			if yyl365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys366Slc
	var yyhl366 bool = l >= 0
	for yyj366 := 0; ; yyj366++ {
		if yyhl366 {
			if yyj366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys366Slc = r.DecodeBytes(yys366Slc, true, true)
		yys366 := string(yys366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys366 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym368 := z.DecBinary()
				_ = yym368
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym370 := z.DecBinary()
				_ = yym370
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym370 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym370 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym374 := z.DecBinary()
				_ = yym374
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys366)
		} // end switch yys366
	} // end for yyj366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj375 int
	var yyb375 bool
	var yyhl375 bool = l >= 0
	yyj375++
	if yyhl375 {
		yyb375 = yyj375 > l
	} else {
		yyb375 = r.CheckBreak()
	}
	if yyb375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym377 := z.DecBinary()
		_ = yym377
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj375++
	if yyhl375 {
		yyb375 = yyj375 > l
	} else {
		yyb375 = r.CheckBreak()
	}
	if yyb375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym379 := z.DecBinary()
		_ = yym379
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym379 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym379 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj375++
	if yyhl375 {
		yyb375 = yyj375 > l
	} else {
		yyb375 = r.CheckBreak()
	}
	if yyb375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj375++
	if yyhl375 {
		yyb375 = yyj375 > l
	} else {
		yyb375 = r.CheckBreak()
	}
	if yyb375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj375++
	if yyhl375 {
		yyb375 = yyj375 > l
	} else {
		yyb375 = r.CheckBreak()
	}
	if yyb375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym383 := z.DecBinary()
		_ = yym383
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj375++
		if yyhl375 {
			yyb375 = yyj375 > l
		} else {
			yyb375 = r.CheckBreak()
		}
		if yyb375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym384 := z.EncBinary()
		_ = yym384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep385 := !z.EncBinary()
			yy2arr385 := z.EncBasicHandle().StructToArray
			var yyq385 [5]bool
			_, _, _ = yysep385, yyq385, yy2arr385
			const yyr385 bool = false
			yyq385[0] = x.Kind != ""
			yyq385[1] = x.APIVersion != ""
			yyq385[2] = true
			yyq385[3] = true
			yyq385[4] = true
			var yynn385 int
			if yyr385 || yy2arr385 {
				r.EncodeArrayStart(5)
			} else {
				yynn385 = 0
				for _, b := range yyq385 {
					if b {
						yynn385++
					}
				}
				r.EncodeMapStart(yynn385)
				yynn385 = 0
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq385[0] {
					yym387 := z.EncBinary()
					_ = yym387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq385[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym388 := z.EncBinary()
					_ = yym388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq385[1] {
					yym390 := z.EncBinary()
					_ = yym390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq385[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq385[2] {
					yy393 := &x.ObjectMeta
					yy393.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq385[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy394 := &x.ObjectMeta
					yy394.CodecEncodeSelf(e)
				}
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq385[3] {
					yy396 := &x.Spec
					yy396.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq385[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy397 := &x.Spec
					yy397.CodecEncodeSelf(e)
				}
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq385[4] {
					yy399 := &x.Status
					yy399.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq385[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy400 := &x.Status
					yy400.CodecEncodeSelf(e)
				}
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym401 := z.DecBinary()
	_ = yym401
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct402 := r.ContainerType()
		if yyct402 == codecSelferValueTypeMap1234 {
			yyl402 := r.ReadMapStart()
			if yyl402 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl402, d)
			}
		} else if yyct402 == codecSelferValueTypeArray1234 {
			yyl402 := r.ReadArrayStart()
			if yyl402 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl402, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys403Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys403Slc
	var yyhl403 bool = l >= 0
	for yyj403 := 0; ; yyj403++ {
		if yyhl403 {
			if yyj403 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys403Slc = r.DecodeBytes(yys403Slc, true, true)
		yys403 := string(yys403Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys403 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv406 := &x.ObjectMeta
				yyv406.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv407 := &x.Spec
				yyv407.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv408 := &x.Status
				yyv408.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys403)
		} // end switch yys403
	} // end for yyj403
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj409 int
	var yyb409 bool
	var yyhl409 bool = l >= 0
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv412 := &x.ObjectMeta
		yyv412.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv413 := &x.Spec
		yyv413.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv414 := &x.Status
		yyv414.CodecDecodeSelf(d)
	}
	for {
		yyj409++
		if yyhl409 {
			yyb409 = yyj409 > l
		} else {
			yyb409 = r.CheckBreak()
		}
		if yyb409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym415 := z.EncBinary()
		_ = yym415
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep416 := !z.EncBinary()
			yy2arr416 := z.EncBasicHandle().StructToArray
			var yyq416 [4]bool
			_, _, _ = yysep416, yyq416, yy2arr416
			const yyr416 bool = false
			yyq416[0] = x.Kind != ""
			yyq416[1] = x.APIVersion != ""
			yyq416[2] = true
			var yynn416 int
			if yyr416 || yy2arr416 {
				r.EncodeArrayStart(4)
			} else {
				yynn416 = 1
				for _, b := range yyq416 {
					if b {
						yynn416++
					}
				}
				r.EncodeMapStart(yynn416)
				yynn416 = 0
			}
			if yyr416 || yy2arr416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq416[0] {
					yym418 := z.EncBinary()
					_ = yym418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq416[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym419 := z.EncBinary()
					_ = yym419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr416 || yy2arr416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq416[1] {
					yym421 := z.EncBinary()
					_ = yym421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq416[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr416 || yy2arr416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq416[2] {
					yy424 := &x.ListMeta
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else if z.HasExtensions() && z.EncExt(yy424) {
					} else {
						z.EncFallback(yy424)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq416[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy426 := &x.ListMeta
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else if z.HasExtensions() && z.EncExt(yy426) {
					} else {
						z.EncFallback(yy426)
					}
				}
			}
			if yyr416 || yy2arr416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr416 || yy2arr416 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym431 := z.DecBinary()
	_ = yym431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct432 := r.ContainerType()
		if yyct432 == codecSelferValueTypeMap1234 {
			yyl432 := r.ReadMapStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl432, d)
			}
		} else if yyct432 == codecSelferValueTypeArray1234 {
			yyl432 := r.ReadArrayStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys433Slc
	var yyhl433 bool = l >= 0
	for yyj433 := 0; ; yyj433++ {
		if yyhl433 {
			if yyj433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys433Slc = r.DecodeBytes(yys433Slc, true, true)
		yys433 := string(yys433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys433 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv436 := &x.ListMeta
				yym437 := z.DecBinary()
				_ = yym437
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv436) {
				} else {
					z.DecFallback(yyv436, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv438 := &x.Items
				yym439 := z.DecBinary()
				_ = yym439
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv438), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys433)
		} // end switch yys433
	} // end for yyj433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj440 int
	var yyb440 bool
	var yyhl440 bool = l >= 0
	yyj440++
	if yyhl440 {
		yyb440 = yyj440 > l
	} else {
		yyb440 = r.CheckBreak()
	}
	if yyb440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj440++
	if yyhl440 {
		yyb440 = yyj440 > l
	} else {
		yyb440 = r.CheckBreak()
	}
	if yyb440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj440++
	if yyhl440 {
		yyb440 = yyj440 > l
	} else {
		yyb440 = r.CheckBreak()
	}
	if yyb440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv443 := &x.ListMeta
		yym444 := z.DecBinary()
		_ = yym444
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv443) {
		} else {
			z.DecFallback(yyv443, false)
		}
	}
	yyj440++
	if yyhl440 {
		yyb440 = yyj440 > l
	} else {
		yyb440 = r.CheckBreak()
	}
	if yyb440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv445 := &x.Items
		yym446 := z.DecBinary()
		_ = yym446
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv445), d)
		}
	}
	for {
		yyj440++
		if yyhl440 {
			yyb440 = yyj440 > l
		} else {
			yyb440 = r.CheckBreak()
		}
		if yyb440 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj440-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym447 := z.EncBinary()
		_ = yym447
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep448 := !z.EncBinary()
			yy2arr448 := z.EncBasicHandle().StructToArray
			var yyq448 [5]bool
			_, _, _ = yysep448, yyq448, yy2arr448
			const yyr448 bool = false
			yyq448[0] = x.Kind != ""
			yyq448[1] = x.APIVersion != ""
			yyq448[2] = true
			yyq448[3] = x.Description != ""
			yyq448[4] = len(x.Versions) != 0
			var yynn448 int
			if yyr448 || yy2arr448 {
				r.EncodeArrayStart(5)
			} else {
				yynn448 = 0
				for _, b := range yyq448 {
					if b {
						yynn448++
					}
				}
				r.EncodeMapStart(yynn448)
				yynn448 = 0
			}
			if yyr448 || yy2arr448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq448[0] {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq448[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr448 || yy2arr448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq448[1] {
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq448[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr448 || yy2arr448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq448[2] {
					yy456 := &x.ObjectMeta
					yy456.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq448[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy457 := &x.ObjectMeta
					yy457.CodecEncodeSelf(e)
				}
			}
			if yyr448 || yy2arr448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq448[3] {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq448[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr448 || yy2arr448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq448[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym462 := z.EncBinary()
						_ = yym462
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq448[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym463 := z.EncBinary()
						_ = yym463
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr448 || yy2arr448 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym464 := z.DecBinary()
	_ = yym464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct465 := r.ContainerType()
		if yyct465 == codecSelferValueTypeMap1234 {
			yyl465 := r.ReadMapStart()
			if yyl465 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl465, d)
			}
		} else if yyct465 == codecSelferValueTypeArray1234 {
			yyl465 := r.ReadArrayStart()
			if yyl465 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys466Slc
	var yyhl466 bool = l >= 0
	for yyj466 := 0; ; yyj466++ {
		if yyhl466 {
			if yyj466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys466Slc = r.DecodeBytes(yys466Slc, true, true)
		yys466 := string(yys466Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys466 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv469 := &x.ObjectMeta
				yyv469.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv471 := &x.Versions
				yym472 := z.DecBinary()
				_ = yym472
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv471), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys466)
		} // end switch yys466
	} // end for yyj466
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj473 int
	var yyb473 bool
	var yyhl473 bool = l >= 0
	yyj473++
	if yyhl473 {
		yyb473 = yyj473 > l
	} else {
		yyb473 = r.CheckBreak()
	}
	if yyb473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj473++
	if yyhl473 {
		yyb473 = yyj473 > l
	} else {
		yyb473 = r.CheckBreak()
	}
	if yyb473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj473++
	if yyhl473 {
		yyb473 = yyj473 > l
	} else {
		yyb473 = r.CheckBreak()
	}
	if yyb473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv476 := &x.ObjectMeta
		yyv476.CodecDecodeSelf(d)
	}
	yyj473++
	if yyhl473 {
		yyb473 = yyj473 > l
	} else {
		yyb473 = r.CheckBreak()
	}
	if yyb473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj473++
	if yyhl473 {
		yyb473 = yyj473 > l
	} else {
		yyb473 = r.CheckBreak()
	}
	if yyb473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv478 := &x.Versions
		yym479 := z.DecBinary()
		_ = yym479
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv478), d)
		}
	}
	for {
		yyj473++
		if yyhl473 {
			yyb473 = yyj473 > l
		} else {
			yyb473 = r.CheckBreak()
		}
		if yyb473 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj473-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym480 := z.EncBinary()
		_ = yym480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep481 := !z.EncBinary()
			yy2arr481 := z.EncBasicHandle().StructToArray
			var yyq481 [4]bool
			_, _, _ = yysep481, yyq481, yy2arr481
			const yyr481 bool = false
			yyq481[0] = x.Kind != ""
			yyq481[1] = x.APIVersion != ""
			yyq481[2] = true
			var yynn481 int
			if yyr481 || yy2arr481 {
				r.EncodeArrayStart(4)
			} else {
				yynn481 = 1
				for _, b := range yyq481 {
					if b {
						yynn481++
					}
				}
				r.EncodeMapStart(yynn481)
				yynn481 = 0
			}
			if yyr481 || yy2arr481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq481[0] {
					yym483 := z.EncBinary()
					_ = yym483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq481[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym484 := z.EncBinary()
					_ = yym484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr481 || yy2arr481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq481[1] {
					yym486 := z.EncBinary()
					_ = yym486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq481[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr481 || yy2arr481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq481[2] {
					yy489 := &x.ListMeta
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else if z.HasExtensions() && z.EncExt(yy489) {
					} else {
						z.EncFallback(yy489)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq481[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy491 := &x.ListMeta
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else if z.HasExtensions() && z.EncExt(yy491) {
					} else {
						z.EncFallback(yy491)
					}
				}
			}
			if yyr481 || yy2arr481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym494 := z.EncBinary()
					_ = yym494
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr481 || yy2arr481 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct497 := r.ContainerType()
		if yyct497 == codecSelferValueTypeMap1234 {
			yyl497 := r.ReadMapStart()
			if yyl497 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl497, d)
			}
		} else if yyct497 == codecSelferValueTypeArray1234 {
			yyl497 := r.ReadArrayStart()
			if yyl497 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl497, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys498Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys498Slc
	var yyhl498 bool = l >= 0
	for yyj498 := 0; ; yyj498++ {
		if yyhl498 {
			if yyj498 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys498Slc = r.DecodeBytes(yys498Slc, true, true)
		yys498 := string(yys498Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys498 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv501 := &x.ListMeta
				yym502 := z.DecBinary()
				_ = yym502
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv501) {
				} else {
					z.DecFallback(yyv501, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv503 := &x.Items
				yym504 := z.DecBinary()
				_ = yym504
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv503), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys498)
		} // end switch yys498
	} // end for yyj498
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj505 int
	var yyb505 bool
	var yyhl505 bool = l >= 0
	yyj505++
	if yyhl505 {
		yyb505 = yyj505 > l
	} else {
		yyb505 = r.CheckBreak()
	}
	if yyb505 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj505++
	if yyhl505 {
		yyb505 = yyj505 > l
	} else {
		yyb505 = r.CheckBreak()
	}
	if yyb505 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj505++
	if yyhl505 {
		yyb505 = yyj505 > l
	} else {
		yyb505 = r.CheckBreak()
	}
	if yyb505 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv508 := &x.ListMeta
		yym509 := z.DecBinary()
		_ = yym509
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv508) {
		} else {
			z.DecFallback(yyv508, false)
		}
	}
	yyj505++
	if yyhl505 {
		yyb505 = yyj505 > l
	} else {
		yyb505 = r.CheckBreak()
	}
	if yyb505 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv510 := &x.Items
		yym511 := z.DecBinary()
		_ = yym511
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv510), d)
		}
	}
	for {
		yyj505++
		if yyhl505 {
			yyb505 = yyj505 > l
		} else {
			yyb505 = r.CheckBreak()
		}
		if yyb505 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj505-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym512 := z.EncBinary()
		_ = yym512
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep513 := !z.EncBinary()
			yy2arr513 := z.EncBasicHandle().StructToArray
			var yyq513 [2]bool
			_, _, _ = yysep513, yyq513, yy2arr513
			const yyr513 bool = false
			yyq513[0] = x.Name != ""
			yyq513[1] = x.APIGroup != ""
			var yynn513 int
			if yyr513 || yy2arr513 {
				r.EncodeArrayStart(2)
			} else {
				yynn513 = 0
				for _, b := range yyq513 {
					if b {
						yynn513++
					}
				}
				r.EncodeMapStart(yynn513)
				yynn513 = 0
			}
			if yyr513 || yy2arr513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq513[0] {
					yym515 := z.EncBinary()
					_ = yym515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq513[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr513 || yy2arr513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq513[1] {
					yym518 := z.EncBinary()
					_ = yym518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq513[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr513 || yy2arr513 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct521 := r.ContainerType()
		if yyct521 == codecSelferValueTypeMap1234 {
			yyl521 := r.ReadMapStart()
			if yyl521 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl521, d)
			}
		} else if yyct521 == codecSelferValueTypeArray1234 {
			yyl521 := r.ReadArrayStart()
			if yyl521 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl521, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys522Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys522Slc
	var yyhl522 bool = l >= 0
	for yyj522 := 0; ; yyj522++ {
		if yyhl522 {
			if yyj522 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys522Slc = r.DecodeBytes(yys522Slc, true, true)
		yys522 := string(yys522Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys522 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys522)
		} // end switch yys522
	} // end for yyj522
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj525 int
	var yyb525 bool
	var yyhl525 bool = l >= 0
	yyj525++
	if yyhl525 {
		yyb525 = yyj525 > l
	} else {
		yyb525 = r.CheckBreak()
	}
	if yyb525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj525++
	if yyhl525 {
		yyb525 = yyj525 > l
	} else {
		yyb525 = r.CheckBreak()
	}
	if yyb525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj525++
		if yyhl525 {
			yyb525 = yyj525 > l
		} else {
			yyb525 = r.CheckBreak()
		}
		if yyb525 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj525-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym528 := z.EncBinary()
		_ = yym528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep529 := !z.EncBinary()
			yy2arr529 := z.EncBasicHandle().StructToArray
			var yyq529 [4]bool
			_, _, _ = yysep529, yyq529, yy2arr529
			const yyr529 bool = false
			yyq529[0] = x.Kind != ""
			yyq529[1] = x.APIVersion != ""
			yyq529[2] = true
			yyq529[3] = len(x.Data) != 0
			var yynn529 int
			if yyr529 || yy2arr529 {
				r.EncodeArrayStart(4)
			} else {
				yynn529 = 0
				for _, b := range yyq529 {
					if b {
						yynn529++
					}
				}
				r.EncodeMapStart(yynn529)
				yynn529 = 0
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[0] {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[1] {
					yym534 := z.EncBinary()
					_ = yym534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[2] {
					yy537 := &x.ObjectMeta
					yy537.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq529[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy538 := &x.ObjectMeta
					yy538.CodecEncodeSelf(e)
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym540 := z.EncBinary()
						_ = yym540
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq529[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym541 := z.EncBinary()
						_ = yym541
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym542 := z.DecBinary()
	_ = yym542
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct543 := r.ContainerType()
		if yyct543 == codecSelferValueTypeMap1234 {
			yyl543 := r.ReadMapStart()
			if yyl543 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl543, d)
			}
		} else if yyct543 == codecSelferValueTypeArray1234 {
			yyl543 := r.ReadArrayStart()
			if yyl543 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl543, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys544Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys544Slc
	var yyhl544 bool = l >= 0
	for yyj544 := 0; ; yyj544++ {
		if yyhl544 {
			if yyj544 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys544Slc = r.DecodeBytes(yys544Slc, true, true)
		yys544 := string(yys544Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys544 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv547 := &x.ObjectMeta
				yyv547.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv548 := &x.Data
				yym549 := z.DecBinary()
				_ = yym549
				if false {
				} else {
					*yyv548 = r.DecodeBytes(*(*[]byte)(yyv548), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys544)
		} // end switch yys544
	} // end for yyj544
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj550 int
	var yyb550 bool
	var yyhl550 bool = l >= 0
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv553 := &x.ObjectMeta
		yyv553.CodecDecodeSelf(d)
	}
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv554 := &x.Data
		yym555 := z.DecBinary()
		_ = yym555
		if false {
		} else {
			*yyv554 = r.DecodeBytes(*(*[]byte)(yyv554), false, false)
		}
	}
	for {
		yyj550++
		if yyhl550 {
			yyb550 = yyj550 > l
		} else {
			yyb550 = r.CheckBreak()
		}
		if yyb550 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj550-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym556 := z.EncBinary()
		_ = yym556
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep557 := !z.EncBinary()
			yy2arr557 := z.EncBasicHandle().StructToArray
			var yyq557 [5]bool
			_, _, _ = yysep557, yyq557, yy2arr557
			const yyr557 bool = false
			yyq557[0] = x.Kind != ""
			yyq557[1] = x.APIVersion != ""
			yyq557[2] = true
			yyq557[3] = true
			yyq557[4] = true
			var yynn557 int
			if yyr557 || yy2arr557 {
				r.EncodeArrayStart(5)
			} else {
				yynn557 = 0
				for _, b := range yyq557 {
					if b {
						yynn557++
					}
				}
				r.EncodeMapStart(yynn557)
				yynn557 = 0
			}
			if yyr557 || yy2arr557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq557[0] {
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq557[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr557 || yy2arr557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq557[1] {
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq557[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym563 := z.EncBinary()
					_ = yym563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr557 || yy2arr557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq557[2] {
					yy565 := &x.ObjectMeta
					yy565.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq557[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy566 := &x.ObjectMeta
					yy566.CodecEncodeSelf(e)
				}
			}
			if yyr557 || yy2arr557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq557[3] {
					yy568 := &x.Spec
					yy568.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq557[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy569 := &x.Spec
					yy569.CodecEncodeSelf(e)
				}
			}
			if yyr557 || yy2arr557 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq557[4] {
					yy571 := &x.Status
					yy571.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq557[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy572 := &x.Status
					yy572.CodecEncodeSelf(e)
				}
			}
			if yyr557 || yy2arr557 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct574 := r.ContainerType()
		if yyct574 == codecSelferValueTypeMap1234 {
			yyl574 := r.ReadMapStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl574, d)
			}
		} else if yyct574 == codecSelferValueTypeArray1234 {
			yyl574 := r.ReadArrayStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys575Slc
	var yyhl575 bool = l >= 0
	for yyj575 := 0; ; yyj575++ {
		if yyhl575 {
			if yyj575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys575Slc = r.DecodeBytes(yys575Slc, true, true)
		yys575 := string(yys575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys575 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv578 := &x.ObjectMeta
				yyv578.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv579 := &x.Spec
				yyv579.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv580 := &x.Status
				yyv580.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys575)
		} // end switch yys575
	} // end for yyj575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj581 int
	var yyb581 bool
	var yyhl581 bool = l >= 0
	yyj581++
	if yyhl581 {
		yyb581 = yyj581 > l
	} else {
		yyb581 = r.CheckBreak()
	}
	if yyb581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj581++
	if yyhl581 {
		yyb581 = yyj581 > l
	} else {
		yyb581 = r.CheckBreak()
	}
	if yyb581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj581++
	if yyhl581 {
		yyb581 = yyj581 > l
	} else {
		yyb581 = r.CheckBreak()
	}
	if yyb581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv584 := &x.ObjectMeta
		yyv584.CodecDecodeSelf(d)
	}
	yyj581++
	if yyhl581 {
		yyb581 = yyj581 > l
	} else {
		yyb581 = r.CheckBreak()
	}
	if yyb581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv585 := &x.Spec
		yyv585.CodecDecodeSelf(d)
	}
	yyj581++
	if yyhl581 {
		yyb581 = yyj581 > l
	} else {
		yyb581 = r.CheckBreak()
	}
	if yyb581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv586 := &x.Status
		yyv586.CodecDecodeSelf(d)
	}
	for {
		yyj581++
		if yyhl581 {
			yyb581 = yyj581 > l
		} else {
			yyb581 = r.CheckBreak()
		}
		if yyb581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym587 := z.EncBinary()
		_ = yym587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep588 := !z.EncBinary()
			yy2arr588 := z.EncBasicHandle().StructToArray
			var yyq588 [8]bool
			_, _, _ = yysep588, yyq588, yy2arr588
			const yyr588 bool = false
			yyq588[0] = x.Replicas != 0
			yyq588[1] = len(x.Selector) != 0
			yyq588[3] = true
			yyq588[4] = x.RevisionHistoryLimit != nil
			yyq588[5] = x.UniqueLabelKey != ""
			yyq588[6] = x.Paused != false
			yyq588[7] = x.RollbackTo != nil
			var yynn588 int
			if yyr588 || yy2arr588 {
				r.EncodeArrayStart(8)
			} else {
				yynn588 = 1
				for _, b := range yyq588 {
					if b {
						yynn588++
					}
				}
				r.EncodeMapStart(yynn588)
				yynn588 = 0
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq588[0] {
					yym590 := z.EncBinary()
					_ = yym590
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq588[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym591 := z.EncBinary()
					_ = yym591
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq588[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym593 := z.EncBinary()
						_ = yym593
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq588[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym594 := z.EncBinary()
						_ = yym594
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy596 := &x.Template
				yy596.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy597 := &x.Template
				yy597.CodecEncodeSelf(e)
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq588[3] {
					yy599 := &x.Strategy
					yy599.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq588[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy600 := &x.Strategy
					yy600.CodecEncodeSelf(e)
				}
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq588[4] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy602 := *x.RevisionHistoryLimit
						yym603 := z.EncBinary()
						_ = yym603
						if false {
						} else {
							r.EncodeInt(int64(yy602))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq588[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy604 := *x.RevisionHistoryLimit
						yym605 := z.EncBinary()
						_ = yym605
						if false {
						} else {
							r.EncodeInt(int64(yy604))
						}
					}
				}
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq588[5] {
					yym607 := z.EncBinary()
					_ = yym607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq588[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym608 := z.EncBinary()
					_ = yym608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq588[6] {
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq588[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq588[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq588[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym613 := z.DecBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct614 := r.ContainerType()
		if yyct614 == codecSelferValueTypeMap1234 {
			yyl614 := r.ReadMapStart()
			if yyl614 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl614, d)
			}
		} else if yyct614 == codecSelferValueTypeArray1234 {
			yyl614 := r.ReadArrayStart()
			if yyl614 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl614, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys615Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys615Slc
	var yyhl615 bool = l >= 0
	for yyj615 := 0; ; yyj615++ {
		if yyhl615 {
			if yyj615 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys615Slc = r.DecodeBytes(yys615Slc, true, true)
		yys615 := string(yys615Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys615 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv617 := &x.Selector
				yym618 := z.DecBinary()
				_ = yym618
				if false {
				} else {
					z.F.DecMapStringStringX(yyv617, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv619 := &x.Template
				yyv619.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv620 := &x.Strategy
				yyv620.CodecDecodeSelf(d)
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int)
				}
				yym622 := z.DecBinary()
				_ = yym622
				if false {
				} else {
					*((*int)(x.RevisionHistoryLimit)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys615)
		} // end switch yys615
	} // end for yyj615
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj626 int
	var yyb626 bool
	var yyhl626 bool = l >= 0
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv628 := &x.Selector
		yym629 := z.DecBinary()
		_ = yym629
		if false {
		} else {
			z.F.DecMapStringStringX(yyv628, false, d)
		}
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv630 := &x.Template
		yyv630.CodecDecodeSelf(d)
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv631 := &x.Strategy
		yyv631.CodecDecodeSelf(d)
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int)
		}
		yym633 := z.DecBinary()
		_ = yym633
		if false {
		} else {
			*((*int)(x.RevisionHistoryLimit)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj626++
		if yyhl626 {
			yyb626 = yyj626 > l
		} else {
			yyb626 = r.CheckBreak()
		}
		if yyb626 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj626-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym637 := z.EncBinary()
		_ = yym637
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep638 := !z.EncBinary()
			yy2arr638 := z.EncBasicHandle().StructToArray
			var yyq638 [5]bool
			_, _, _ = yysep638, yyq638, yy2arr638
			const yyr638 bool = false
			yyq638[0] = x.Kind != ""
			yyq638[1] = x.APIVersion != ""
			yyq638[3] = len(x.UpdatedAnnotations) != 0
			var yynn638 int
			if yyr638 || yy2arr638 {
				r.EncodeArrayStart(5)
			} else {
				yynn638 = 2
				for _, b := range yyq638 {
					if b {
						yynn638++
					}
				}
				r.EncodeMapStart(yynn638)
				yynn638 = 0
			}
			if yyr638 || yy2arr638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq638[0] {
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq638[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr638 || yy2arr638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq638[1] {
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq638[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr638 || yy2arr638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym646 := z.EncBinary()
				_ = yym646
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym647 := z.EncBinary()
				_ = yym647
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr638 || yy2arr638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq638[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym649 := z.EncBinary()
						_ = yym649
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq638[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym650 := z.EncBinary()
						_ = yym650
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr638 || yy2arr638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy652 := &x.RollbackTo
				yy652.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy653 := &x.RollbackTo
				yy653.CodecEncodeSelf(e)
			}
			if yyr638 || yy2arr638 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym654 := z.DecBinary()
	_ = yym654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct655 := r.ContainerType()
		if yyct655 == codecSelferValueTypeMap1234 {
			yyl655 := r.ReadMapStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl655, d)
			}
		} else if yyct655 == codecSelferValueTypeArray1234 {
			yyl655 := r.ReadArrayStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys656Slc
	var yyhl656 bool = l >= 0
	for yyj656 := 0; ; yyj656++ {
		if yyhl656 {
			if yyj656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys656Slc = r.DecodeBytes(yys656Slc, true, true)
		yys656 := string(yys656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys656 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv660 := &x.UpdatedAnnotations
				yym661 := z.DecBinary()
				_ = yym661
				if false {
				} else {
					z.F.DecMapStringStringX(yyv660, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv662 := &x.RollbackTo
				yyv662.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys656)
		} // end switch yys656
	} // end for yyj656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj663 int
	var yyb663 bool
	var yyhl663 bool = l >= 0
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv667 := &x.UpdatedAnnotations
		yym668 := z.DecBinary()
		_ = yym668
		if false {
		} else {
			z.F.DecMapStringStringX(yyv667, false, d)
		}
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv669 := &x.RollbackTo
		yyv669.CodecDecodeSelf(d)
	}
	for {
		yyj663++
		if yyhl663 {
			yyb663 = yyj663 > l
		} else {
			yyb663 = r.CheckBreak()
		}
		if yyb663 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj663-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym670 := z.EncBinary()
		_ = yym670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep671 := !z.EncBinary()
			yy2arr671 := z.EncBasicHandle().StructToArray
			var yyq671 [1]bool
			_, _, _ = yysep671, yyq671, yy2arr671
			const yyr671 bool = false
			yyq671[0] = x.Revision != 0
			var yynn671 int
			if yyr671 || yy2arr671 {
				r.EncodeArrayStart(1)
			} else {
				yynn671 = 0
				for _, b := range yyq671 {
					if b {
						yynn671++
					}
				}
				r.EncodeMapStart(yynn671)
				yynn671 = 0
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[0] {
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq671[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym675 := z.DecBinary()
	_ = yym675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct676 := r.ContainerType()
		if yyct676 == codecSelferValueTypeMap1234 {
			yyl676 := r.ReadMapStart()
			if yyl676 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl676, d)
			}
		} else if yyct676 == codecSelferValueTypeArray1234 {
			yyl676 := r.ReadArrayStart()
			if yyl676 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl676, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys677Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys677Slc
	var yyhl677 bool = l >= 0
	for yyj677 := 0; ; yyj677++ {
		if yyhl677 {
			if yyj677 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys677Slc = r.DecodeBytes(yys677Slc, true, true)
		yys677 := string(yys677Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys677 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys677)
		} // end switch yys677
	} // end for yyj677
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj679 int
	var yyb679 bool
	var yyhl679 bool = l >= 0
	yyj679++
	if yyhl679 {
		yyb679 = yyj679 > l
	} else {
		yyb679 = r.CheckBreak()
	}
	if yyb679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj679++
		if yyhl679 {
			yyb679 = yyj679 > l
		} else {
			yyb679 = r.CheckBreak()
		}
		if yyb679 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj679-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym681 := z.EncBinary()
		_ = yym681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep682 := !z.EncBinary()
			yy2arr682 := z.EncBasicHandle().StructToArray
			var yyq682 [2]bool
			_, _, _ = yysep682, yyq682, yy2arr682
			const yyr682 bool = false
			yyq682[0] = x.Type != ""
			yyq682[1] = x.RollingUpdate != nil
			var yynn682 int
			if yyr682 || yy2arr682 {
				r.EncodeArrayStart(2)
			} else {
				yynn682 = 0
				for _, b := range yyq682 {
					if b {
						yynn682++
					}
				}
				r.EncodeMapStart(yynn682)
				yynn682 = 0
			}
			if yyr682 || yy2arr682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq682[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq682[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr682 || yy2arr682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq682[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq682[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr682 || yy2arr682 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym685 := z.DecBinary()
	_ = yym685
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct686 := r.ContainerType()
		if yyct686 == codecSelferValueTypeMap1234 {
			yyl686 := r.ReadMapStart()
			if yyl686 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl686, d)
			}
		} else if yyct686 == codecSelferValueTypeArray1234 {
			yyl686 := r.ReadArrayStart()
			if yyl686 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl686, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys687Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys687Slc
	var yyhl687 bool = l >= 0
	for yyj687 := 0; ; yyj687++ {
		if yyhl687 {
			if yyj687 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys687Slc = r.DecodeBytes(yys687Slc, true, true)
		yys687 := string(yys687Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys687 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys687)
		} // end switch yys687
	} // end for yyj687
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj690 int
	var yyb690 bool
	var yyhl690 bool = l >= 0
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj690++
		if yyhl690 {
			yyb690 = yyj690 > l
		} else {
			yyb690 = r.CheckBreak()
		}
		if yyb690 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj690-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym693 := z.EncBinary()
	_ = yym693
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym694 := z.DecBinary()
	_ = yym694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym695 := z.EncBinary()
		_ = yym695
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep696 := !z.EncBinary()
			yy2arr696 := z.EncBasicHandle().StructToArray
			var yyq696 [3]bool
			_, _, _ = yysep696, yyq696, yy2arr696
			const yyr696 bool = false
			yyq696[0] = true
			yyq696[1] = true
			yyq696[2] = x.MinReadySeconds != 0
			var yynn696 int
			if yyr696 || yy2arr696 {
				r.EncodeArrayStart(3)
			} else {
				yynn696 = 0
				for _, b := range yyq696 {
					if b {
						yynn696++
					}
				}
				r.EncodeMapStart(yynn696)
				yynn696 = 0
			}
			if yyr696 || yy2arr696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq696[0] {
					yy698 := &x.MaxUnavailable
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else if z.HasExtensions() && z.EncExt(yy698) {
					} else if !yym699 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy698)
					} else {
						z.EncFallback(yy698)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq696[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy700 := &x.MaxUnavailable
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else if z.HasExtensions() && z.EncExt(yy700) {
					} else if !yym701 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy700)
					} else {
						z.EncFallback(yy700)
					}
				}
			}
			if yyr696 || yy2arr696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq696[1] {
					yy703 := &x.MaxSurge
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else if z.HasExtensions() && z.EncExt(yy703) {
					} else if !yym704 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy703)
					} else {
						z.EncFallback(yy703)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq696[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy705 := &x.MaxSurge
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else if z.HasExtensions() && z.EncExt(yy705) {
					} else if !yym706 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy705)
					} else {
						z.EncFallback(yy705)
					}
				}
			}
			if yyr696 || yy2arr696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq696[2] {
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq696[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr696 || yy2arr696 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym710 := z.DecBinary()
	_ = yym710
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct711 := r.ContainerType()
		if yyct711 == codecSelferValueTypeMap1234 {
			yyl711 := r.ReadMapStart()
			if yyl711 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl711, d)
			}
		} else if yyct711 == codecSelferValueTypeArray1234 {
			yyl711 := r.ReadArrayStart()
			if yyl711 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl711, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys712Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys712Slc
	var yyhl712 bool = l >= 0
	for yyj712 := 0; ; yyj712++ {
		if yyhl712 {
			if yyj712 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys712Slc = r.DecodeBytes(yys712Slc, true, true)
		yys712 := string(yys712Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys712 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg8_intstr.IntOrString{}
			} else {
				yyv713 := &x.MaxUnavailable
				yym714 := z.DecBinary()
				_ = yym714
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv713) {
				} else if !yym714 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv713)
				} else {
					z.DecFallback(yyv713, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg8_intstr.IntOrString{}
			} else {
				yyv715 := &x.MaxSurge
				yym716 := z.DecBinary()
				_ = yym716
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv715) {
				} else if !yym716 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv715)
				} else {
					z.DecFallback(yyv715, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys712)
		} // end switch yys712
	} // end for yyj712
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj718 int
	var yyb718 bool
	var yyhl718 bool = l >= 0
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg8_intstr.IntOrString{}
	} else {
		yyv719 := &x.MaxUnavailable
		yym720 := z.DecBinary()
		_ = yym720
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv719) {
		} else if !yym720 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv719)
		} else {
			z.DecFallback(yyv719, false)
		}
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg8_intstr.IntOrString{}
	} else {
		yyv721 := &x.MaxSurge
		yym722 := z.DecBinary()
		_ = yym722
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv721) {
		} else if !yym722 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv721)
		} else {
			z.DecFallback(yyv721, false)
		}
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj718++
		if yyhl718 {
			yyb718 = yyj718 > l
		} else {
			yyb718 = r.CheckBreak()
		}
		if yyb718 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj718-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym724 := z.EncBinary()
		_ = yym724
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep725 := !z.EncBinary()
			yy2arr725 := z.EncBasicHandle().StructToArray
			var yyq725 [4]bool
			_, _, _ = yysep725, yyq725, yy2arr725
			const yyr725 bool = false
			yyq725[0] = x.Replicas != 0
			yyq725[1] = x.UpdatedReplicas != 0
			yyq725[2] = x.AvailableReplicas != 0
			yyq725[3] = x.UnavailableReplicas != 0
			var yynn725 int
			if yyr725 || yy2arr725 {
				r.EncodeArrayStart(4)
			} else {
				yynn725 = 0
				for _, b := range yyq725 {
					if b {
						yynn725++
					}
				}
				r.EncodeMapStart(yynn725)
				yynn725 = 0
			}
			if yyr725 || yy2arr725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq725[0] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq725[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr725 || yy2arr725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq725[1] {
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq725[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr725 || yy2arr725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq725[2] {
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq725[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr725 || yy2arr725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq725[3] {
					yym736 := z.EncBinary()
					_ = yym736
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq725[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym737 := z.EncBinary()
					_ = yym737
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr725 || yy2arr725 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym738 := z.DecBinary()
	_ = yym738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct739 := r.ContainerType()
		if yyct739 == codecSelferValueTypeMap1234 {
			yyl739 := r.ReadMapStart()
			if yyl739 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl739, d)
			}
		} else if yyct739 == codecSelferValueTypeArray1234 {
			yyl739 := r.ReadArrayStart()
			if yyl739 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys740Slc
	var yyhl740 bool = l >= 0
	for yyj740 := 0; ; yyj740++ {
		if yyhl740 {
			if yyj740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys740Slc = r.DecodeBytes(yys740Slc, true, true)
		yys740 := string(yys740Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys740 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys740)
		} // end switch yys740
	} // end for yyj740
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj745 int
	var yyb745 bool
	var yyhl745 bool = l >= 0
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj745++
		if yyhl745 {
			yyb745 = yyj745 > l
		} else {
			yyb745 = r.CheckBreak()
		}
		if yyb745 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj745-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym750 := z.EncBinary()
		_ = yym750
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep751 := !z.EncBinary()
			yy2arr751 := z.EncBasicHandle().StructToArray
			var yyq751 [4]bool
			_, _, _ = yysep751, yyq751, yy2arr751
			const yyr751 bool = false
			yyq751[0] = x.Kind != ""
			yyq751[1] = x.APIVersion != ""
			yyq751[2] = true
			var yynn751 int
			if yyr751 || yy2arr751 {
				r.EncodeArrayStart(4)
			} else {
				yynn751 = 1
				for _, b := range yyq751 {
					if b {
						yynn751++
					}
				}
				r.EncodeMapStart(yynn751)
				yynn751 = 0
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq751[0] {
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq751[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq751[1] {
					yym756 := z.EncBinary()
					_ = yym756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq751[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym757 := z.EncBinary()
					_ = yym757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq751[2] {
					yy759 := &x.ListMeta
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else if z.HasExtensions() && z.EncExt(yy759) {
					} else {
						z.EncFallback(yy759)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq751[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy761 := &x.ListMeta
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else if z.HasExtensions() && z.EncExt(yy761) {
					} else {
						z.EncFallback(yy761)
					}
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym766 := z.DecBinary()
	_ = yym766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct767 := r.ContainerType()
		if yyct767 == codecSelferValueTypeMap1234 {
			yyl767 := r.ReadMapStart()
			if yyl767 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl767, d)
			}
		} else if yyct767 == codecSelferValueTypeArray1234 {
			yyl767 := r.ReadArrayStart()
			if yyl767 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl767, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys768Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys768Slc
	var yyhl768 bool = l >= 0
	for yyj768 := 0; ; yyj768++ {
		if yyhl768 {
			if yyj768 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys768Slc = r.DecodeBytes(yys768Slc, true, true)
		yys768 := string(yys768Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys768 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv771 := &x.ListMeta
				yym772 := z.DecBinary()
				_ = yym772
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv771) {
				} else {
					z.DecFallback(yyv771, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv773 := &x.Items
				yym774 := z.DecBinary()
				_ = yym774
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv773), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys768)
		} // end switch yys768
	} // end for yyj768
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj775 int
	var yyb775 bool
	var yyhl775 bool = l >= 0
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv778 := &x.ListMeta
		yym779 := z.DecBinary()
		_ = yym779
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv778) {
		} else {
			z.DecFallback(yyv778, false)
		}
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv780 := &x.Items
		yym781 := z.DecBinary()
		_ = yym781
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv780), d)
		}
	}
	for {
		yyj775++
		if yyhl775 {
			yyb775 = yyj775 > l
		} else {
			yyb775 = r.CheckBreak()
		}
		if yyb775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetUpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym782 := z.EncBinary()
		_ = yym782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep783 := !z.EncBinary()
			yy2arr783 := z.EncBasicHandle().StructToArray
			var yyq783 [2]bool
			_, _, _ = yysep783, yyq783, yy2arr783
			const yyr783 bool = false
			yyq783[0] = x.Type != ""
			yyq783[1] = x.RollingUpdate != nil
			var yynn783 int
			if yyr783 || yy2arr783 {
				r.EncodeArrayStart(2)
			} else {
				yynn783 = 0
				for _, b := range yyq783 {
					if b {
						yynn783++
					}
				}
				r.EncodeMapStart(yynn783)
				yynn783 = 0
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq783[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq783[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetUpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym786 := z.DecBinary()
	_ = yym786
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct787 := r.ContainerType()
		if yyct787 == codecSelferValueTypeMap1234 {
			yyl787 := r.ReadMapStart()
			if yyl787 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl787, d)
			}
		} else if yyct787 == codecSelferValueTypeArray1234 {
			yyl787 := r.ReadArrayStart()
			if yyl787 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl787, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys788Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys788Slc
	var yyhl788 bool = l >= 0
	for yyj788 := 0; ; yyj788++ {
		if yyhl788 {
			if yyj788 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys788Slc = r.DecodeBytes(yys788Slc, true, true)
		yys788 := string(yys788Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys788 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDaemonSet)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys788)
		} // end switch yys788
	} // end for yyj788
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj791 int
	var yyb791 bool
	var yyhl791 bool = l >= 0
	yyj791++
	if yyhl791 {
		yyb791 = yyj791 > l
	} else {
		yyb791 = r.CheckBreak()
	}
	if yyb791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
	}
	yyj791++
	if yyhl791 {
		yyb791 = yyj791 > l
	} else {
		yyb791 = r.CheckBreak()
	}
	if yyb791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDaemonSet)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj791++
		if yyhl791 {
			yyb791 = yyj791 > l
		} else {
			yyb791 = r.CheckBreak()
		}
		if yyb791 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj791-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DaemonSetUpdateStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym794 := z.EncBinary()
	_ = yym794
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DaemonSetUpdateStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym795 := z.DecBinary()
	_ = yym795
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym796 := z.EncBinary()
		_ = yym796
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep797 := !z.EncBinary()
			yy2arr797 := z.EncBasicHandle().StructToArray
			var yyq797 [2]bool
			_, _, _ = yysep797, yyq797, yy2arr797
			const yyr797 bool = false
			yyq797[0] = true
			yyq797[1] = x.MinReadySeconds != 0
			var yynn797 int
			if yyr797 || yy2arr797 {
				r.EncodeArrayStart(2)
			} else {
				yynn797 = 0
				for _, b := range yyq797 {
					if b {
						yynn797++
					}
				}
				r.EncodeMapStart(yynn797)
				yynn797 = 0
			}
			if yyr797 || yy2arr797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq797[0] {
					yy799 := &x.MaxUnavailable
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else if z.HasExtensions() && z.EncExt(yy799) {
					} else if !yym800 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy799)
					} else {
						z.EncFallback(yy799)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq797[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy801 := &x.MaxUnavailable
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else if z.HasExtensions() && z.EncExt(yy801) {
					} else if !yym802 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy801)
					} else {
						z.EncFallback(yy801)
					}
				}
			}
			if yyr797 || yy2arr797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq797[1] {
					yym804 := z.EncBinary()
					_ = yym804
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq797[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr797 || yy2arr797 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym806 := z.DecBinary()
	_ = yym806
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct807 := r.ContainerType()
		if yyct807 == codecSelferValueTypeMap1234 {
			yyl807 := r.ReadMapStart()
			if yyl807 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl807, d)
			}
		} else if yyct807 == codecSelferValueTypeArray1234 {
			yyl807 := r.ReadArrayStart()
			if yyl807 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl807, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys808Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys808Slc
	var yyhl808 bool = l >= 0
	for yyj808 := 0; ; yyj808++ {
		if yyhl808 {
			if yyj808 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys808Slc = r.DecodeBytes(yys808Slc, true, true)
		yys808 := string(yys808Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys808 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg8_intstr.IntOrString{}
			} else {
				yyv809 := &x.MaxUnavailable
				yym810 := z.DecBinary()
				_ = yym810
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv809) {
				} else if !yym810 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv809)
				} else {
					z.DecFallback(yyv809, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys808)
		} // end switch yys808
	} // end for yyj808
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj812 int
	var yyb812 bool
	var yyhl812 bool = l >= 0
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg8_intstr.IntOrString{}
	} else {
		yyv813 := &x.MaxUnavailable
		yym814 := z.DecBinary()
		_ = yym814
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv813) {
		} else if !yym814 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv813)
		} else {
			z.DecFallback(yyv813, false)
		}
	}
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj812++
		if yyhl812 {
			yyb812 = yyj812 > l
		} else {
			yyb812 = r.CheckBreak()
		}
		if yyb812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [4]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = x.Selector != nil
			yyq817[2] = true
			yyq817[3] = x.UniqueLabelKey != ""
			var yynn817 int
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(4)
			} else {
				yynn817 = 1
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
				yynn817 = 0
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq817[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq817[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy820 := &x.Template
				yy820.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy821 := &x.Template
				yy821.CodecEncodeSelf(e)
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq817[2] {
					yy823 := &x.UpdateStrategy
					yy823.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq817[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updateStrategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy824 := &x.UpdateStrategy
					yy824.CodecEncodeSelf(e)
				}
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq817[3] {
					yym826 := z.EncBinary()
					_ = yym826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym828 := z.DecBinary()
	_ = yym828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct829 := r.ContainerType()
		if yyct829 == codecSelferValueTypeMap1234 {
			yyl829 := r.ReadMapStart()
			if yyl829 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl829, d)
			}
		} else if yyct829 == codecSelferValueTypeArray1234 {
			yyl829 := r.ReadArrayStart()
			if yyl829 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys830Slc
	var yyhl830 bool = l >= 0
	for yyj830 := 0; ; yyj830++ {
		if yyhl830 {
			if yyj830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys830Slc = r.DecodeBytes(yys830Slc, true, true)
		yys830 := string(yys830Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys830 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv832 := &x.Template
				yyv832.CodecDecodeSelf(d)
			}
		case "updateStrategy":
			if r.TryDecodeAsNil() {
				x.UpdateStrategy = DaemonSetUpdateStrategy{}
			} else {
				yyv833 := &x.UpdateStrategy
				yyv833.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys830)
		} // end switch yys830
	} // end for yyj830
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj835 int
	var yyb835 bool
	var yyhl835 bool = l >= 0
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv837 := &x.Template
		yyv837.CodecDecodeSelf(d)
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdateStrategy = DaemonSetUpdateStrategy{}
	} else {
		yyv838 := &x.UpdateStrategy
		yyv838.CodecDecodeSelf(d)
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj835++
		if yyhl835 {
			yyb835 = yyj835 > l
		} else {
			yyb835 = r.CheckBreak()
		}
		if yyb835 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj835-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym840 := z.EncBinary()
		_ = yym840
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep841 := !z.EncBinary()
			yy2arr841 := z.EncBasicHandle().StructToArray
			var yyq841 [3]bool
			_, _, _ = yysep841, yyq841, yy2arr841
			const yyr841 bool = false
			var yynn841 int
			if yyr841 || yy2arr841 {
				r.EncodeArrayStart(3)
			} else {
				yynn841 = 3
				for _, b := range yyq841 {
					if b {
						yynn841++
					}
				}
				r.EncodeMapStart(yynn841)
				yynn841 = 0
			}
			if yyr841 || yy2arr841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym843 := z.EncBinary()
				_ = yym843
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym844 := z.EncBinary()
				_ = yym844
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr841 || yy2arr841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym846 := z.EncBinary()
				_ = yym846
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym847 := z.EncBinary()
				_ = yym847
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr841 || yy2arr841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym850 := z.EncBinary()
				_ = yym850
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr841 || yy2arr841 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym851 := z.DecBinary()
	_ = yym851
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct852 := r.ContainerType()
		if yyct852 == codecSelferValueTypeMap1234 {
			yyl852 := r.ReadMapStart()
			if yyl852 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl852, d)
			}
		} else if yyct852 == codecSelferValueTypeArray1234 {
			yyl852 := r.ReadArrayStart()
			if yyl852 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl852, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys853Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys853Slc
	var yyhl853 bool = l >= 0
	for yyj853 := 0; ; yyj853++ {
		if yyhl853 {
			if yyj853 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys853Slc = r.DecodeBytes(yys853Slc, true, true)
		yys853 := string(yys853Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys853 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys853)
		} // end switch yys853
	} // end for yyj853
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj857 int
	var yyb857 bool
	var yyhl857 bool = l >= 0
	yyj857++
	if yyhl857 {
		yyb857 = yyj857 > l
	} else {
		yyb857 = r.CheckBreak()
	}
	if yyb857 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj857++
	if yyhl857 {
		yyb857 = yyj857 > l
	} else {
		yyb857 = r.CheckBreak()
	}
	if yyb857 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj857++
	if yyhl857 {
		yyb857 = yyj857 > l
	} else {
		yyb857 = r.CheckBreak()
	}
	if yyb857 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj857++
		if yyhl857 {
			yyb857 = yyj857 > l
		} else {
			yyb857 = r.CheckBreak()
		}
		if yyb857 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj857-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym861 := z.EncBinary()
		_ = yym861
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep862 := !z.EncBinary()
			yy2arr862 := z.EncBasicHandle().StructToArray
			var yyq862 [5]bool
			_, _, _ = yysep862, yyq862, yy2arr862
			const yyr862 bool = false
			yyq862[0] = x.Kind != ""
			yyq862[1] = x.APIVersion != ""
			yyq862[2] = true
			yyq862[3] = true
			yyq862[4] = true
			var yynn862 int
			if yyr862 || yy2arr862 {
				r.EncodeArrayStart(5)
			} else {
				yynn862 = 0
				for _, b := range yyq862 {
					if b {
						yynn862++
					}
				}
				r.EncodeMapStart(yynn862)
				yynn862 = 0
			}
			if yyr862 || yy2arr862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq862[0] {
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq862[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr862 || yy2arr862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq862[1] {
					yym867 := z.EncBinary()
					_ = yym867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq862[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr862 || yy2arr862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq862[2] {
					yy870 := &x.ObjectMeta
					yy870.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq862[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy871 := &x.ObjectMeta
					yy871.CodecEncodeSelf(e)
				}
			}
			if yyr862 || yy2arr862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq862[3] {
					yy873 := &x.Spec
					yy873.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq862[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy874 := &x.Spec
					yy874.CodecEncodeSelf(e)
				}
			}
			if yyr862 || yy2arr862 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq862[4] {
					yy876 := &x.Status
					yy876.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq862[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy877 := &x.Status
					yy877.CodecEncodeSelf(e)
				}
			}
			if yyr862 || yy2arr862 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym878 := z.DecBinary()
	_ = yym878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct879 := r.ContainerType()
		if yyct879 == codecSelferValueTypeMap1234 {
			yyl879 := r.ReadMapStart()
			if yyl879 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl879, d)
			}
		} else if yyct879 == codecSelferValueTypeArray1234 {
			yyl879 := r.ReadArrayStart()
			if yyl879 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys880Slc
	var yyhl880 bool = l >= 0
	for yyj880 := 0; ; yyj880++ {
		if yyhl880 {
			if yyj880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys880Slc = r.DecodeBytes(yys880Slc, true, true)
		yys880 := string(yys880Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys880 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv883 := &x.ObjectMeta
				yyv883.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv884 := &x.Spec
				yyv884.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv885 := &x.Status
				yyv885.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys880)
		} // end switch yys880
	} // end for yyj880
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj886 int
	var yyb886 bool
	var yyhl886 bool = l >= 0
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv889 := &x.ObjectMeta
		yyv889.CodecDecodeSelf(d)
	}
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv890 := &x.Spec
		yyv890.CodecDecodeSelf(d)
	}
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv891 := &x.Status
		yyv891.CodecDecodeSelf(d)
	}
	for {
		yyj886++
		if yyhl886 {
			yyb886 = yyj886 > l
		} else {
			yyb886 = r.CheckBreak()
		}
		if yyb886 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj886-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym892 := z.EncBinary()
		_ = yym892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep893 := !z.EncBinary()
			yy2arr893 := z.EncBasicHandle().StructToArray
			var yyq893 [4]bool
			_, _, _ = yysep893, yyq893, yy2arr893
			const yyr893 bool = false
			yyq893[0] = x.Kind != ""
			yyq893[1] = x.APIVersion != ""
			yyq893[2] = true
			var yynn893 int
			if yyr893 || yy2arr893 {
				r.EncodeArrayStart(4)
			} else {
				yynn893 = 1
				for _, b := range yyq893 {
					if b {
						yynn893++
					}
				}
				r.EncodeMapStart(yynn893)
				yynn893 = 0
			}
			if yyr893 || yy2arr893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq893[0] {
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq893[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym896 := z.EncBinary()
					_ = yym896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr893 || yy2arr893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq893[1] {
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq893[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym899 := z.EncBinary()
					_ = yym899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr893 || yy2arr893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq893[2] {
					yy901 := &x.ListMeta
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else if z.HasExtensions() && z.EncExt(yy901) {
					} else {
						z.EncFallback(yy901)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq893[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy903 := &x.ListMeta
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else if z.HasExtensions() && z.EncExt(yy903) {
					} else {
						z.EncFallback(yy903)
					}
				}
			}
			if yyr893 || yy2arr893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr893 || yy2arr893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym908 := z.DecBinary()
	_ = yym908
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct909 := r.ContainerType()
		if yyct909 == codecSelferValueTypeMap1234 {
			yyl909 := r.ReadMapStart()
			if yyl909 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl909, d)
			}
		} else if yyct909 == codecSelferValueTypeArray1234 {
			yyl909 := r.ReadArrayStart()
			if yyl909 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl909, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys910Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys910Slc
	var yyhl910 bool = l >= 0
	for yyj910 := 0; ; yyj910++ {
		if yyhl910 {
			if yyj910 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys910Slc = r.DecodeBytes(yys910Slc, true, true)
		yys910 := string(yys910Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys910 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv913 := &x.ListMeta
				yym914 := z.DecBinary()
				_ = yym914
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv913) {
				} else {
					z.DecFallback(yyv913, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv915 := &x.Items
				yym916 := z.DecBinary()
				_ = yym916
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv915), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys910)
		} // end switch yys910
	} // end for yyj910
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj917 int
	var yyb917 bool
	var yyhl917 bool = l >= 0
	yyj917++
	if yyhl917 {
		yyb917 = yyj917 > l
	} else {
		yyb917 = r.CheckBreak()
	}
	if yyb917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj917++
	if yyhl917 {
		yyb917 = yyj917 > l
	} else {
		yyb917 = r.CheckBreak()
	}
	if yyb917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj917++
	if yyhl917 {
		yyb917 = yyj917 > l
	} else {
		yyb917 = r.CheckBreak()
	}
	if yyb917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv920 := &x.ListMeta
		yym921 := z.DecBinary()
		_ = yym921
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv920) {
		} else {
			z.DecFallback(yyv920, false)
		}
	}
	yyj917++
	if yyhl917 {
		yyb917 = yyj917 > l
	} else {
		yyb917 = r.CheckBreak()
	}
	if yyb917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv922 := &x.Items
		yym923 := z.DecBinary()
		_ = yym923
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv922), d)
		}
	}
	for {
		yyj917++
		if yyhl917 {
			yyb917 = yyj917 > l
		} else {
			yyb917 = r.CheckBreak()
		}
		if yyb917 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj917-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym924 := z.EncBinary()
		_ = yym924
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep925 := !z.EncBinary()
			yy2arr925 := z.EncBasicHandle().StructToArray
			var yyq925 [4]bool
			_, _, _ = yysep925, yyq925, yy2arr925
			const yyr925 bool = false
			yyq925[0] = x.Kind != ""
			yyq925[1] = x.APIVersion != ""
			yyq925[2] = true
			var yynn925 int
			if yyr925 || yy2arr925 {
				r.EncodeArrayStart(4)
			} else {
				yynn925 = 1
				for _, b := range yyq925 {
					if b {
						yynn925++
					}
				}
				r.EncodeMapStart(yynn925)
				yynn925 = 0
			}
			if yyr925 || yy2arr925 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq925[0] {
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq925[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr925 || yy2arr925 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq925[1] {
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq925[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym931 := z.EncBinary()
					_ = yym931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr925 || yy2arr925 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq925[2] {
					yy933 := &x.ListMeta
					yym934 := z.EncBinary()
					_ = yym934
					if false {
					} else if z.HasExtensions() && z.EncExt(yy933) {
					} else {
						z.EncFallback(yy933)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq925[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy935 := &x.ListMeta
					yym936 := z.EncBinary()
					_ = yym936
					if false {
					} else if z.HasExtensions() && z.EncExt(yy935) {
					} else {
						z.EncFallback(yy935)
					}
				}
			}
			if yyr925 || yy2arr925 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym939 := z.EncBinary()
					_ = yym939
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr925 || yy2arr925 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym940 := z.DecBinary()
	_ = yym940
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct941 := r.ContainerType()
		if yyct941 == codecSelferValueTypeMap1234 {
			yyl941 := r.ReadMapStart()
			if yyl941 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl941, d)
			}
		} else if yyct941 == codecSelferValueTypeArray1234 {
			yyl941 := r.ReadArrayStart()
			if yyl941 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl941, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys942Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys942Slc
	var yyhl942 bool = l >= 0
	for yyj942 := 0; ; yyj942++ {
		if yyhl942 {
			if yyj942 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys942Slc = r.DecodeBytes(yys942Slc, true, true)
		yys942 := string(yys942Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys942 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv945 := &x.ListMeta
				yym946 := z.DecBinary()
				_ = yym946
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv945) {
				} else {
					z.DecFallback(yyv945, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv947 := &x.Items
				yym948 := z.DecBinary()
				_ = yym948
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv947), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys942)
		} // end switch yys942
	} // end for yyj942
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj949 int
	var yyb949 bool
	var yyhl949 bool = l >= 0
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv952 := &x.ListMeta
		yym953 := z.DecBinary()
		_ = yym953
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv952) {
		} else {
			z.DecFallback(yyv952, false)
		}
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv954 := &x.Items
		yym955 := z.DecBinary()
		_ = yym955
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv954), d)
		}
	}
	for {
		yyj949++
		if yyhl949 {
			yyb949 = yyj949 > l
		} else {
			yyb949 = r.CheckBreak()
		}
		if yyb949 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj949-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym956 := z.EncBinary()
		_ = yym956
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep957 := !z.EncBinary()
			yy2arr957 := z.EncBasicHandle().StructToArray
			var yyq957 [5]bool
			_, _, _ = yysep957, yyq957, yy2arr957
			const yyr957 bool = false
			yyq957[0] = x.Kind != ""
			yyq957[1] = x.APIVersion != ""
			yyq957[2] = true
			yyq957[3] = true
			yyq957[4] = true
			var yynn957 int
			if yyr957 || yy2arr957 {
				r.EncodeArrayStart(5)
			} else {
				yynn957 = 0
				for _, b := range yyq957 {
					if b {
						yynn957++
					}
				}
				r.EncodeMapStart(yynn957)
				yynn957 = 0
			}
			if yyr957 || yy2arr957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq957[0] {
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq957[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym960 := z.EncBinary()
					_ = yym960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr957 || yy2arr957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq957[1] {
					yym962 := z.EncBinary()
					_ = yym962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq957[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr957 || yy2arr957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq957[2] {
					yy965 := &x.ObjectMeta
					yy965.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq957[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy966 := &x.ObjectMeta
					yy966.CodecEncodeSelf(e)
				}
			}
			if yyr957 || yy2arr957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq957[3] {
					yy968 := &x.Spec
					yy968.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq957[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy969 := &x.Spec
					yy969.CodecEncodeSelf(e)
				}
			}
			if yyr957 || yy2arr957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq957[4] {
					yy971 := &x.Status
					yy971.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq957[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy972 := &x.Status
					yy972.CodecEncodeSelf(e)
				}
			}
			if yyr957 || yy2arr957 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym973 := z.DecBinary()
	_ = yym973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct974 := r.ContainerType()
		if yyct974 == codecSelferValueTypeMap1234 {
			yyl974 := r.ReadMapStart()
			if yyl974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl974, d)
			}
		} else if yyct974 == codecSelferValueTypeArray1234 {
			yyl974 := r.ReadArrayStart()
			if yyl974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys975Slc
	var yyhl975 bool = l >= 0
	for yyj975 := 0; ; yyj975++ {
		if yyhl975 {
			if yyj975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys975Slc = r.DecodeBytes(yys975Slc, true, true)
		yys975 := string(yys975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys975 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv978 := &x.ObjectMeta
				yyv978.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv979 := &x.Spec
				yyv979.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv980 := &x.Status
				yyv980.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys975)
		} // end switch yys975
	} // end for yyj975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj981 int
	var yyb981 bool
	var yyhl981 bool = l >= 0
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv984 := &x.ObjectMeta
		yyv984.CodecDecodeSelf(d)
	}
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv985 := &x.Spec
		yyv985.CodecDecodeSelf(d)
	}
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv986 := &x.Status
		yyv986.CodecDecodeSelf(d)
	}
	for {
		yyj981++
		if yyhl981 {
			yyb981 = yyj981 > l
		} else {
			yyb981 = r.CheckBreak()
		}
		if yyb981 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj981-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym987 := z.EncBinary()
		_ = yym987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep988 := !z.EncBinary()
			yy2arr988 := z.EncBasicHandle().StructToArray
			var yyq988 [4]bool
			_, _, _ = yysep988, yyq988, yy2arr988
			const yyr988 bool = false
			yyq988[0] = x.Kind != ""
			yyq988[1] = x.APIVersion != ""
			yyq988[2] = true
			var yynn988 int
			if yyr988 || yy2arr988 {
				r.EncodeArrayStart(4)
			} else {
				yynn988 = 1
				for _, b := range yyq988 {
					if b {
						yynn988++
					}
				}
				r.EncodeMapStart(yynn988)
				yynn988 = 0
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq988[0] {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq988[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq988[1] {
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq988[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq988[2] {
					yy996 := &x.ListMeta
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else if z.HasExtensions() && z.EncExt(yy996) {
					} else {
						z.EncFallback(yy996)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq988[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy998 := &x.ListMeta
					yym999 := z.EncBinary()
					_ = yym999
					if false {
					} else if z.HasExtensions() && z.EncExt(yy998) {
					} else {
						z.EncFallback(yy998)
					}
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1002 := z.EncBinary()
					_ = yym1002
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr988 || yy2arr988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1003 := z.DecBinary()
	_ = yym1003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1004 := r.ContainerType()
		if yyct1004 == codecSelferValueTypeMap1234 {
			yyl1004 := r.ReadMapStart()
			if yyl1004 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1004, d)
			}
		} else if yyct1004 == codecSelferValueTypeArray1234 {
			yyl1004 := r.ReadArrayStart()
			if yyl1004 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1004, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1005Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1005Slc
	var yyhl1005 bool = l >= 0
	for yyj1005 := 0; ; yyj1005++ {
		if yyhl1005 {
			if yyj1005 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1005Slc = r.DecodeBytes(yys1005Slc, true, true)
		yys1005 := string(yys1005Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1005 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1008 := &x.ListMeta
				yym1009 := z.DecBinary()
				_ = yym1009
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1008) {
				} else {
					z.DecFallback(yyv1008, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1010 := &x.Items
				yym1011 := z.DecBinary()
				_ = yym1011
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv1010), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1005)
		} // end switch yys1005
	} // end for yyj1005
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1012 int
	var yyb1012 bool
	var yyhl1012 bool = l >= 0
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1015 := &x.ListMeta
		yym1016 := z.DecBinary()
		_ = yym1016
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1015) {
		} else {
			z.DecFallback(yyv1015, false)
		}
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1017 := &x.Items
		yym1018 := z.DecBinary()
		_ = yym1018
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv1017), d)
		}
	}
	for {
		yyj1012++
		if yyhl1012 {
			yyb1012 = yyj1012 > l
		} else {
			yyb1012 = r.CheckBreak()
		}
		if yyb1012 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1012-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1019 := z.EncBinary()
		_ = yym1019
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1020 := !z.EncBinary()
			yy2arr1020 := z.EncBasicHandle().StructToArray
			var yyq1020 [5]bool
			_, _, _ = yysep1020, yyq1020, yy2arr1020
			const yyr1020 bool = false
			yyq1020[0] = x.Parallelism != nil
			yyq1020[1] = x.Completions != nil
			yyq1020[2] = x.ActiveDeadlineSeconds != nil
			yyq1020[3] = x.Selector != nil
			var yynn1020 int
			if yyr1020 || yy2arr1020 {
				r.EncodeArrayStart(5)
			} else {
				yynn1020 = 1
				for _, b := range yyq1020 {
					if b {
						yynn1020++
					}
				}
				r.EncodeMapStart(yynn1020)
				yynn1020 = 0
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy1022 := *x.Parallelism
						yym1023 := z.EncBinary()
						_ = yym1023
						if false {
						} else {
							r.EncodeInt(int64(yy1022))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1020[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy1024 := *x.Parallelism
						yym1025 := z.EncBinary()
						_ = yym1025
						if false {
						} else {
							r.EncodeInt(int64(yy1024))
						}
					}
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy1027 := *x.Completions
						yym1028 := z.EncBinary()
						_ = yym1028
						if false {
						} else {
							r.EncodeInt(int64(yy1027))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1020[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy1029 := *x.Completions
						yym1030 := z.EncBinary()
						_ = yym1030
						if false {
						} else {
							r.EncodeInt(int64(yy1029))
						}
					}
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1032 := *x.ActiveDeadlineSeconds
						yym1033 := z.EncBinary()
						_ = yym1033
						if false {
						} else {
							r.EncodeInt(int64(yy1032))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1020[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1034 := *x.ActiveDeadlineSeconds
						yym1035 := z.EncBinary()
						_ = yym1035
						if false {
						} else {
							r.EncodeInt(int64(yy1034))
						}
					}
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1020[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1020[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1038 := &x.Template
				yy1038.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1039 := &x.Template
				yy1039.CodecEncodeSelf(e)
			}
			if yyr1020 || yy2arr1020 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1040 := z.DecBinary()
	_ = yym1040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1041 := r.ContainerType()
		if yyct1041 == codecSelferValueTypeMap1234 {
			yyl1041 := r.ReadMapStart()
			if yyl1041 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1041, d)
			}
		} else if yyct1041 == codecSelferValueTypeArray1234 {
			yyl1041 := r.ReadArrayStart()
			if yyl1041 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1041, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1042Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1042Slc
	var yyhl1042 bool = l >= 0
	for yyj1042 := 0; ; yyj1042++ {
		if yyhl1042 {
			if yyj1042 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1042Slc = r.DecodeBytes(yys1042Slc, true, true)
		yys1042 := string(yys1042Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1042 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym1044 := z.DecBinary()
				_ = yym1044
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym1046 := z.DecBinary()
				_ = yym1046
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1048 := z.DecBinary()
				_ = yym1048
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv1050 := &x.Template
				yyv1050.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1042)
		} // end switch yys1042
	} // end for yyj1042
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1051 int
	var yyb1051 bool
	var yyhl1051 bool = l >= 0
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym1053 := z.DecBinary()
		_ = yym1053
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym1055 := z.DecBinary()
		_ = yym1055
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1057 := z.DecBinary()
		_ = yym1057
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv1059 := &x.Template
		yyv1059.CodecDecodeSelf(d)
	}
	for {
		yyj1051++
		if yyhl1051 {
			yyb1051 = yyj1051 > l
		} else {
			yyb1051 = r.CheckBreak()
		}
		if yyb1051 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1051-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1060 := z.EncBinary()
		_ = yym1060
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1061 := !z.EncBinary()
			yy2arr1061 := z.EncBasicHandle().StructToArray
			var yyq1061 [6]bool
			_, _, _ = yysep1061, yyq1061, yy2arr1061
			const yyr1061 bool = false
			yyq1061[0] = len(x.Conditions) != 0
			yyq1061[1] = x.StartTime != nil
			yyq1061[2] = x.CompletionTime != nil
			yyq1061[3] = x.Active != 0
			yyq1061[4] = x.Succeeded != 0
			yyq1061[5] = x.Failed != 0
			var yynn1061 int
			if yyr1061 || yy2arr1061 {
				r.EncodeArrayStart(6)
			} else {
				yynn1061 = 0
				for _, b := range yyq1061 {
					if b {
						yynn1061++
					}
				}
				r.EncodeMapStart(yynn1061)
				yynn1061 = 0
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1061[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1063 := z.EncBinary()
						_ = yym1063
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1064 := z.EncBinary()
						_ = yym1064
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1061[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1066 := z.EncBinary()
						_ = yym1066
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1066 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1066 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1067 := z.EncBinary()
						_ = yym1067
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1067 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1067 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1061[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym1069 := z.EncBinary()
						_ = yym1069
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym1069 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym1069 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1061[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym1070 := z.EncBinary()
						_ = yym1070
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym1070 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym1070 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1061[3] {
					yym1072 := z.EncBinary()
					_ = yym1072
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1061[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1061[4] {
					yym1075 := z.EncBinary()
					_ = yym1075
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1061[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1076 := z.EncBinary()
					_ = yym1076
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1061[5] {
					yym1078 := z.EncBinary()
					_ = yym1078
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1061[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1079 := z.EncBinary()
					_ = yym1079
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1080 := z.DecBinary()
	_ = yym1080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1081 := r.ContainerType()
		if yyct1081 == codecSelferValueTypeMap1234 {
			yyl1081 := r.ReadMapStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1081, d)
			}
		} else if yyct1081 == codecSelferValueTypeArray1234 {
			yyl1081 := r.ReadArrayStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1082Slc
	var yyhl1082 bool = l >= 0
	for yyj1082 := 0; ; yyj1082++ {
		if yyhl1082 {
			if yyj1082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1082Slc = r.DecodeBytes(yys1082Slc, true, true)
		yys1082 := string(yys1082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1082 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1083 := &x.Conditions
				yym1084 := z.DecBinary()
				_ = yym1084
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv1083), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym1086 := z.DecBinary()
				_ = yym1086
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1086 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1086 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym1088 := z.DecBinary()
				_ = yym1088
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym1088 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym1088 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1082)
		} // end switch yys1082
	} // end for yyj1082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1092 int
	var yyb1092 bool
	var yyhl1092 bool = l >= 0
	yyj1092++
	if yyhl1092 {
		yyb1092 = yyj1092 > l
	} else {
		yyb1092 = r.CheckBreak()
	}
	if yyb1092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1093 := &x.Conditions
		yym1094 := z.DecBinary()
		_ = yym1094
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv1093), d)
		}
	}
	yyj1092++
	if yyhl1092 {
		yyb1092 = yyj1092 > l
	} else {
		yyb1092 = r.CheckBreak()
	}
	if yyb1092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym1096 := z.DecBinary()
		_ = yym1096
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1096 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1096 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1092++
	if yyhl1092 {
		yyb1092 = yyj1092 > l
	} else {
		yyb1092 = r.CheckBreak()
	}
	if yyb1092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym1098 := z.DecBinary()
		_ = yym1098
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym1098 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym1098 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj1092++
	if yyhl1092 {
		yyb1092 = yyj1092 > l
	} else {
		yyb1092 = r.CheckBreak()
	}
	if yyb1092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1092++
	if yyhl1092 {
		yyb1092 = yyj1092 > l
	} else {
		yyb1092 = r.CheckBreak()
	}
	if yyb1092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1092++
	if yyhl1092 {
		yyb1092 = yyj1092 > l
	} else {
		yyb1092 = r.CheckBreak()
	}
	if yyb1092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1092++
		if yyhl1092 {
			yyb1092 = yyj1092 > l
		} else {
			yyb1092 = r.CheckBreak()
		}
		if yyb1092 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1092-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1102 := z.EncBinary()
	_ = yym1102
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1103 := z.DecBinary()
	_ = yym1103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1104 := z.EncBinary()
		_ = yym1104
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1105 := !z.EncBinary()
			yy2arr1105 := z.EncBasicHandle().StructToArray
			var yyq1105 [6]bool
			_, _, _ = yysep1105, yyq1105, yy2arr1105
			const yyr1105 bool = false
			yyq1105[2] = true
			yyq1105[3] = true
			yyq1105[4] = x.Reason != ""
			yyq1105[5] = x.Message != ""
			var yynn1105 int
			if yyr1105 || yy2arr1105 {
				r.EncodeArrayStart(6)
			} else {
				yynn1105 = 2
				for _, b := range yyq1105 {
					if b {
						yynn1105++
					}
				}
				r.EncodeMapStart(yynn1105)
				yynn1105 = 0
			}
			if yyr1105 || yy2arr1105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1105 || yy2arr1105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1108 := z.EncBinary()
				_ = yym1108
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1109 := z.EncBinary()
				_ = yym1109
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1105 || yy2arr1105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1105[2] {
					yy1111 := &x.LastProbeTime
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1111) {
					} else if yym1112 {
						z.EncBinaryMarshal(yy1111)
					} else if !yym1112 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1111)
					} else {
						z.EncFallback(yy1111)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1105[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1113 := &x.LastProbeTime
					yym1114 := z.EncBinary()
					_ = yym1114
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1113) {
					} else if yym1114 {
						z.EncBinaryMarshal(yy1113)
					} else if !yym1114 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1113)
					} else {
						z.EncFallback(yy1113)
					}
				}
			}
			if yyr1105 || yy2arr1105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1105[3] {
					yy1116 := &x.LastTransitionTime
					yym1117 := z.EncBinary()
					_ = yym1117
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1116) {
					} else if yym1117 {
						z.EncBinaryMarshal(yy1116)
					} else if !yym1117 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1116)
					} else {
						z.EncFallback(yy1116)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1105[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1118 := &x.LastTransitionTime
					yym1119 := z.EncBinary()
					_ = yym1119
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1118) {
					} else if yym1119 {
						z.EncBinaryMarshal(yy1118)
					} else if !yym1119 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1118)
					} else {
						z.EncFallback(yy1118)
					}
				}
			}
			if yyr1105 || yy2arr1105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1105[4] {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1105[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1105 || yy2arr1105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1105[5] {
					yym1124 := z.EncBinary()
					_ = yym1124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1105[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1125 := z.EncBinary()
					_ = yym1125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1105 || yy2arr1105 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1126 := z.DecBinary()
	_ = yym1126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1127 := r.ContainerType()
		if yyct1127 == codecSelferValueTypeMap1234 {
			yyl1127 := r.ReadMapStart()
			if yyl1127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1127, d)
			}
		} else if yyct1127 == codecSelferValueTypeArray1234 {
			yyl1127 := r.ReadArrayStart()
			if yyl1127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1128Slc
	var yyhl1128 bool = l >= 0
	for yyj1128 := 0; ; yyj1128++ {
		if yyhl1128 {
			if yyj1128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1128Slc = r.DecodeBytes(yys1128Slc, true, true)
		yys1128 := string(yys1128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1128 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1131 := &x.LastProbeTime
				yym1132 := z.DecBinary()
				_ = yym1132
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1131) {
				} else if yym1132 {
					z.DecBinaryUnmarshal(yyv1131)
				} else if !yym1132 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1131)
				} else {
					z.DecFallback(yyv1131, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1133 := &x.LastTransitionTime
				yym1134 := z.DecBinary()
				_ = yym1134
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1133) {
				} else if yym1134 {
					z.DecBinaryUnmarshal(yyv1133)
				} else if !yym1134 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1133)
				} else {
					z.DecFallback(yyv1133, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1128)
		} // end switch yys1128
	} // end for yyj1128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1137 int
	var yyb1137 bool
	var yyhl1137 bool = l >= 0
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1140 := &x.LastProbeTime
		yym1141 := z.DecBinary()
		_ = yym1141
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1140) {
		} else if yym1141 {
			z.DecBinaryUnmarshal(yyv1140)
		} else if !yym1141 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1140)
		} else {
			z.DecFallback(yyv1140, false)
		}
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1142 := &x.LastTransitionTime
		yym1143 := z.DecBinary()
		_ = yym1143
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1142) {
		} else if yym1143 {
			z.DecBinaryUnmarshal(yyv1142)
		} else if !yym1143 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1142)
		} else {
			z.DecFallback(yyv1142, false)
		}
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1137++
		if yyhl1137 {
			yyb1137 = yyj1137 > l
		} else {
			yyb1137 = r.CheckBreak()
		}
		if yyb1137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1146 := z.EncBinary()
		_ = yym1146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1147 := !z.EncBinary()
			yy2arr1147 := z.EncBasicHandle().StructToArray
			var yyq1147 [5]bool
			_, _, _ = yysep1147, yyq1147, yy2arr1147
			const yyr1147 bool = false
			yyq1147[0] = x.Kind != ""
			yyq1147[1] = x.APIVersion != ""
			yyq1147[2] = true
			yyq1147[3] = true
			yyq1147[4] = true
			var yynn1147 int
			if yyr1147 || yy2arr1147 {
				r.EncodeArrayStart(5)
			} else {
				yynn1147 = 0
				for _, b := range yyq1147 {
					if b {
						yynn1147++
					}
				}
				r.EncodeMapStart(yynn1147)
				yynn1147 = 0
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1147[0] {
					yym1149 := z.EncBinary()
					_ = yym1149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1147[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1150 := z.EncBinary()
					_ = yym1150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1147[1] {
					yym1152 := z.EncBinary()
					_ = yym1152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1153 := z.EncBinary()
					_ = yym1153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1147[2] {
					yy1155 := &x.ObjectMeta
					yy1155.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1147[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1156 := &x.ObjectMeta
					yy1156.CodecEncodeSelf(e)
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1147[3] {
					yy1158 := &x.Spec
					yy1158.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1147[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1159 := &x.Spec
					yy1159.CodecEncodeSelf(e)
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1147[4] {
					yy1161 := &x.Status
					yy1161.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1147[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1162 := &x.Status
					yy1162.CodecEncodeSelf(e)
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1163 := z.DecBinary()
	_ = yym1163
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1164 := r.ContainerType()
		if yyct1164 == codecSelferValueTypeMap1234 {
			yyl1164 := r.ReadMapStart()
			if yyl1164 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1164, d)
			}
		} else if yyct1164 == codecSelferValueTypeArray1234 {
			yyl1164 := r.ReadArrayStart()
			if yyl1164 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1164, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1165Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1165Slc
	var yyhl1165 bool = l >= 0
	for yyj1165 := 0; ; yyj1165++ {
		if yyhl1165 {
			if yyj1165 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1165Slc = r.DecodeBytes(yys1165Slc, true, true)
		yys1165 := string(yys1165Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1165 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1168 := &x.ObjectMeta
				yyv1168.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv1169 := &x.Spec
				yyv1169.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv1170 := &x.Status
				yyv1170.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1165)
		} // end switch yys1165
	} // end for yyj1165
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1171 int
	var yyb1171 bool
	var yyhl1171 bool = l >= 0
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1174 := &x.ObjectMeta
		yyv1174.CodecDecodeSelf(d)
	}
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv1175 := &x.Spec
		yyv1175.CodecDecodeSelf(d)
	}
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv1176 := &x.Status
		yyv1176.CodecDecodeSelf(d)
	}
	for {
		yyj1171++
		if yyhl1171 {
			yyb1171 = yyj1171 > l
		} else {
			yyb1171 = r.CheckBreak()
		}
		if yyb1171 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1171-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1177 := z.EncBinary()
		_ = yym1177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1178 := !z.EncBinary()
			yy2arr1178 := z.EncBasicHandle().StructToArray
			var yyq1178 [4]bool
			_, _, _ = yysep1178, yyq1178, yy2arr1178
			const yyr1178 bool = false
			yyq1178[0] = x.Kind != ""
			yyq1178[1] = x.APIVersion != ""
			yyq1178[2] = true
			var yynn1178 int
			if yyr1178 || yy2arr1178 {
				r.EncodeArrayStart(4)
			} else {
				yynn1178 = 1
				for _, b := range yyq1178 {
					if b {
						yynn1178++
					}
				}
				r.EncodeMapStart(yynn1178)
				yynn1178 = 0
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1178[0] {
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1178[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1181 := z.EncBinary()
					_ = yym1181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1178[1] {
					yym1183 := z.EncBinary()
					_ = yym1183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1178[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1184 := z.EncBinary()
					_ = yym1184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1178[2] {
					yy1186 := &x.ListMeta
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1186) {
					} else {
						z.EncFallback(yy1186)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1178[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1188 := &x.ListMeta
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1188) {
					} else {
						z.EncFallback(yy1188)
					}
				}
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1193 := z.DecBinary()
	_ = yym1193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1194 := r.ContainerType()
		if yyct1194 == codecSelferValueTypeMap1234 {
			yyl1194 := r.ReadMapStart()
			if yyl1194 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1194, d)
			}
		} else if yyct1194 == codecSelferValueTypeArray1234 {
			yyl1194 := r.ReadArrayStart()
			if yyl1194 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1195Slc
	var yyhl1195 bool = l >= 0
	for yyj1195 := 0; ; yyj1195++ {
		if yyhl1195 {
			if yyj1195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1195Slc = r.DecodeBytes(yys1195Slc, true, true)
		yys1195 := string(yys1195Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1195 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1198 := &x.ListMeta
				yym1199 := z.DecBinary()
				_ = yym1199
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1198) {
				} else {
					z.DecFallback(yyv1198, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1200 := &x.Items
				yym1201 := z.DecBinary()
				_ = yym1201
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv1200), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1195)
		} // end switch yys1195
	} // end for yyj1195
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1202 int
	var yyb1202 bool
	var yyhl1202 bool = l >= 0
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1205 := &x.ListMeta
		yym1206 := z.DecBinary()
		_ = yym1206
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1205) {
		} else {
			z.DecFallback(yyv1205, false)
		}
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1207 := &x.Items
		yym1208 := z.DecBinary()
		_ = yym1208
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv1207), d)
		}
	}
	for {
		yyj1202++
		if yyhl1202 {
			yyb1202 = yyj1202 > l
		} else {
			yyb1202 = r.CheckBreak()
		}
		if yyb1202 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1202-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1209 := z.EncBinary()
		_ = yym1209
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1210 := !z.EncBinary()
			yy2arr1210 := z.EncBasicHandle().StructToArray
			var yyq1210 [2]bool
			_, _, _ = yysep1210, yyq1210, yy2arr1210
			const yyr1210 bool = false
			yyq1210[0] = x.Backend != nil
			yyq1210[1] = len(x.Rules) != 0
			var yynn1210 int
			if yyr1210 || yy2arr1210 {
				r.EncodeArrayStart(2)
			} else {
				yynn1210 = 0
				for _, b := range yyq1210 {
					if b {
						yynn1210++
					}
				}
				r.EncodeMapStart(yynn1210)
				yynn1210 = 0
			}
			if yyr1210 || yy2arr1210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1210[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1210[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1210 || yy2arr1210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1210[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1213 := z.EncBinary()
						_ = yym1213
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1210[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1214 := z.EncBinary()
						_ = yym1214
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr1210 || yy2arr1210 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1215 := z.DecBinary()
	_ = yym1215
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1216 := r.ContainerType()
		if yyct1216 == codecSelferValueTypeMap1234 {
			yyl1216 := r.ReadMapStart()
			if yyl1216 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1216, d)
			}
		} else if yyct1216 == codecSelferValueTypeArray1234 {
			yyl1216 := r.ReadArrayStart()
			if yyl1216 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1216, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1217Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1217Slc
	var yyhl1217 bool = l >= 0
	for yyj1217 := 0; ; yyj1217++ {
		if yyhl1217 {
			if yyj1217 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1217Slc = r.DecodeBytes(yys1217Slc, true, true)
		yys1217 := string(yys1217Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1217 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv1219 := &x.Rules
				yym1220 := z.DecBinary()
				_ = yym1220
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv1219), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1217)
		} // end switch yys1217
	} // end for yyj1217
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1221 int
	var yyb1221 bool
	var yyhl1221 bool = l >= 0
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv1223 := &x.Rules
		yym1224 := z.DecBinary()
		_ = yym1224
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv1223), d)
		}
	}
	for {
		yyj1221++
		if yyhl1221 {
			yyb1221 = yyj1221 > l
		} else {
			yyb1221 = r.CheckBreak()
		}
		if yyb1221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1225 := z.EncBinary()
		_ = yym1225
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1226 := !z.EncBinary()
			yy2arr1226 := z.EncBasicHandle().StructToArray
			var yyq1226 [1]bool
			_, _, _ = yysep1226, yyq1226, yy2arr1226
			const yyr1226 bool = false
			yyq1226[0] = true
			var yynn1226 int
			if yyr1226 || yy2arr1226 {
				r.EncodeArrayStart(1)
			} else {
				yynn1226 = 0
				for _, b := range yyq1226 {
					if b {
						yynn1226++
					}
				}
				r.EncodeMapStart(yynn1226)
				yynn1226 = 0
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1226[0] {
					yy1228 := &x.LoadBalancer
					yy1228.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1226[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1229 := &x.LoadBalancer
					yy1229.CodecEncodeSelf(e)
				}
			}
			if yyr1226 || yy2arr1226 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1230 := z.DecBinary()
	_ = yym1230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1231 := r.ContainerType()
		if yyct1231 == codecSelferValueTypeMap1234 {
			yyl1231 := r.ReadMapStart()
			if yyl1231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1231, d)
			}
		} else if yyct1231 == codecSelferValueTypeArray1234 {
			yyl1231 := r.ReadArrayStart()
			if yyl1231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1232Slc
	var yyhl1232 bool = l >= 0
	for yyj1232 := 0; ; yyj1232++ {
		if yyhl1232 {
			if yyj1232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1232Slc = r.DecodeBytes(yys1232Slc, true, true)
		yys1232 := string(yys1232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1232 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv1233 := &x.LoadBalancer
				yyv1233.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1232)
		} // end switch yys1232
	} // end for yyj1232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1234 int
	var yyb1234 bool
	var yyhl1234 bool = l >= 0
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv1235 := &x.LoadBalancer
		yyv1235.CodecDecodeSelf(d)
	}
	for {
		yyj1234++
		if yyhl1234 {
			yyb1234 = yyj1234 > l
		} else {
			yyb1234 = r.CheckBreak()
		}
		if yyb1234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1236 := z.EncBinary()
		_ = yym1236
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1237 := !z.EncBinary()
			yy2arr1237 := z.EncBasicHandle().StructToArray
			var yyq1237 [2]bool
			_, _, _ = yysep1237, yyq1237, yy2arr1237
			const yyr1237 bool = false
			yyq1237[0] = x.Host != ""
			yyq1237[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1237 int
			if yyr1237 || yy2arr1237 {
				r.EncodeArrayStart(2)
			} else {
				yynn1237 = 0
				for _, b := range yyq1237 {
					if b {
						yynn1237++
					}
				}
				r.EncodeMapStart(yynn1237)
				yynn1237 = 0
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1237[0] {
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1237[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1241 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1241 = true
				goto LABEL1241
			}
		LABEL1241:
			if yyr1237 || yy2arr1237 {
				if yyn1241 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1237[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1237[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1241 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1242 := z.DecBinary()
	_ = yym1242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1243 := r.ContainerType()
		if yyct1243 == codecSelferValueTypeMap1234 {
			yyl1243 := r.ReadMapStart()
			if yyl1243 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1243, d)
			}
		} else if yyct1243 == codecSelferValueTypeArray1234 {
			yyl1243 := r.ReadArrayStart()
			if yyl1243 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1243, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1244Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1244Slc
	var yyhl1244 bool = l >= 0
	for yyj1244 := 0; ; yyj1244++ {
		if yyhl1244 {
			if yyj1244 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1244Slc = r.DecodeBytes(yys1244Slc, true, true)
		yys1244 := string(yys1244Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1244 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1244)
		} // end switch yys1244
	} // end for yyj1244
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1247 int
	var yyb1247 bool
	var yyhl1247 bool = l >= 0
	yyj1247++
	if yyhl1247 {
		yyb1247 = yyj1247 > l
	} else {
		yyb1247 = r.CheckBreak()
	}
	if yyb1247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1247++
	if yyhl1247 {
		yyb1247 = yyj1247 > l
	} else {
		yyb1247 = r.CheckBreak()
	}
	if yyb1247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1247++
		if yyhl1247 {
			yyb1247 = yyj1247 > l
		} else {
			yyb1247 = r.CheckBreak()
		}
		if yyb1247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1250 := z.EncBinary()
		_ = yym1250
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1251 := !z.EncBinary()
			yy2arr1251 := z.EncBasicHandle().StructToArray
			var yyq1251 [1]bool
			_, _, _ = yysep1251, yyq1251, yy2arr1251
			const yyr1251 bool = false
			yyq1251[0] = x.HTTP != nil
			var yynn1251 int
			if yyr1251 || yy2arr1251 {
				r.EncodeArrayStart(1)
			} else {
				yynn1251 = 0
				for _, b := range yyq1251 {
					if b {
						yynn1251++
					}
				}
				r.EncodeMapStart(yynn1251)
				yynn1251 = 0
			}
			if yyr1251 || yy2arr1251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1251[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1251[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1251 || yy2arr1251 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1253 := z.DecBinary()
	_ = yym1253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1254 := r.ContainerType()
		if yyct1254 == codecSelferValueTypeMap1234 {
			yyl1254 := r.ReadMapStart()
			if yyl1254 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1254, d)
			}
		} else if yyct1254 == codecSelferValueTypeArray1234 {
			yyl1254 := r.ReadArrayStart()
			if yyl1254 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1254, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1255Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1255Slc
	var yyhl1255 bool = l >= 0
	for yyj1255 := 0; ; yyj1255++ {
		if yyhl1255 {
			if yyj1255 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1255Slc = r.DecodeBytes(yys1255Slc, true, true)
		yys1255 := string(yys1255Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1255 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1255)
		} // end switch yys1255
	} // end for yyj1255
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1257 int
	var yyb1257 bool
	var yyhl1257 bool = l >= 0
	yyj1257++
	if yyhl1257 {
		yyb1257 = yyj1257 > l
	} else {
		yyb1257 = r.CheckBreak()
	}
	if yyb1257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1257++
		if yyhl1257 {
			yyb1257 = yyj1257 > l
		} else {
			yyb1257 = r.CheckBreak()
		}
		if yyb1257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1259 := z.EncBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1260 := !z.EncBinary()
			yy2arr1260 := z.EncBasicHandle().StructToArray
			var yyq1260 [1]bool
			_, _, _ = yysep1260, yyq1260, yy2arr1260
			const yyr1260 bool = false
			var yynn1260 int
			if yyr1260 || yy2arr1260 {
				r.EncodeArrayStart(1)
			} else {
				yynn1260 = 1
				for _, b := range yyq1260 {
					if b {
						yynn1260++
					}
				}
				r.EncodeMapStart(yynn1260)
				yynn1260 = 0
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1262 := z.EncBinary()
					_ = yym1262
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1263 := z.EncBinary()
					_ = yym1263
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1264 := z.DecBinary()
	_ = yym1264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1265 := r.ContainerType()
		if yyct1265 == codecSelferValueTypeMap1234 {
			yyl1265 := r.ReadMapStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1265, d)
			}
		} else if yyct1265 == codecSelferValueTypeArray1234 {
			yyl1265 := r.ReadArrayStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1266Slc
	var yyhl1266 bool = l >= 0
	for yyj1266 := 0; ; yyj1266++ {
		if yyhl1266 {
			if yyj1266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1266Slc = r.DecodeBytes(yys1266Slc, true, true)
		yys1266 := string(yys1266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1266 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1267 := &x.Paths
				yym1268 := z.DecBinary()
				_ = yym1268
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1267), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1266)
		} // end switch yys1266
	} // end for yyj1266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1269 int
	var yyb1269 bool
	var yyhl1269 bool = l >= 0
	yyj1269++
	if yyhl1269 {
		yyb1269 = yyj1269 > l
	} else {
		yyb1269 = r.CheckBreak()
	}
	if yyb1269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1270 := &x.Paths
		yym1271 := z.DecBinary()
		_ = yym1271
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1270), d)
		}
	}
	for {
		yyj1269++
		if yyhl1269 {
			yyb1269 = yyj1269 > l
		} else {
			yyb1269 = r.CheckBreak()
		}
		if yyb1269 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1269-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1272 := z.EncBinary()
		_ = yym1272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1273 := !z.EncBinary()
			yy2arr1273 := z.EncBasicHandle().StructToArray
			var yyq1273 [2]bool
			_, _, _ = yysep1273, yyq1273, yy2arr1273
			const yyr1273 bool = false
			yyq1273[0] = x.Path != ""
			var yynn1273 int
			if yyr1273 || yy2arr1273 {
				r.EncodeArrayStart(2)
			} else {
				yynn1273 = 1
				for _, b := range yyq1273 {
					if b {
						yynn1273++
					}
				}
				r.EncodeMapStart(yynn1273)
				yynn1273 = 0
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[0] {
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1273[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1278 := &x.Backend
				yy1278.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1279 := &x.Backend
				yy1279.CodecEncodeSelf(e)
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1280 := z.DecBinary()
	_ = yym1280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1281 := r.ContainerType()
		if yyct1281 == codecSelferValueTypeMap1234 {
			yyl1281 := r.ReadMapStart()
			if yyl1281 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1281, d)
			}
		} else if yyct1281 == codecSelferValueTypeArray1234 {
			yyl1281 := r.ReadArrayStart()
			if yyl1281 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1281, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1282Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1282Slc
	var yyhl1282 bool = l >= 0
	for yyj1282 := 0; ; yyj1282++ {
		if yyhl1282 {
			if yyj1282 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1282Slc = r.DecodeBytes(yys1282Slc, true, true)
		yys1282 := string(yys1282Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1282 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1284 := &x.Backend
				yyv1284.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1282)
		} // end switch yys1282
	} // end for yyj1282
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1285 int
	var yyb1285 bool
	var yyhl1285 bool = l >= 0
	yyj1285++
	if yyhl1285 {
		yyb1285 = yyj1285 > l
	} else {
		yyb1285 = r.CheckBreak()
	}
	if yyb1285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1285++
	if yyhl1285 {
		yyb1285 = yyj1285 > l
	} else {
		yyb1285 = r.CheckBreak()
	}
	if yyb1285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1287 := &x.Backend
		yyv1287.CodecDecodeSelf(d)
	}
	for {
		yyj1285++
		if yyhl1285 {
			yyb1285 = yyj1285 > l
		} else {
			yyb1285 = r.CheckBreak()
		}
		if yyb1285 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1285-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1288 := z.EncBinary()
		_ = yym1288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1289 := !z.EncBinary()
			yy2arr1289 := z.EncBasicHandle().StructToArray
			var yyq1289 [2]bool
			_, _, _ = yysep1289, yyq1289, yy2arr1289
			const yyr1289 bool = false
			var yynn1289 int
			if yyr1289 || yy2arr1289 {
				r.EncodeArrayStart(2)
			} else {
				yynn1289 = 2
				for _, b := range yyq1289 {
					if b {
						yynn1289++
					}
				}
				r.EncodeMapStart(yynn1289)
				yynn1289 = 0
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1291 := z.EncBinary()
				_ = yym1291
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1292 := z.EncBinary()
				_ = yym1292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1294 := &x.ServicePort
				yym1295 := z.EncBinary()
				_ = yym1295
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1294) {
				} else if !yym1295 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1294)
				} else {
					z.EncFallback(yy1294)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1296 := &x.ServicePort
				yym1297 := z.EncBinary()
				_ = yym1297
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1296) {
				} else if !yym1297 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1296)
				} else {
					z.EncFallback(yy1296)
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1298 := z.DecBinary()
	_ = yym1298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1299 := r.ContainerType()
		if yyct1299 == codecSelferValueTypeMap1234 {
			yyl1299 := r.ReadMapStart()
			if yyl1299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1299, d)
			}
		} else if yyct1299 == codecSelferValueTypeArray1234 {
			yyl1299 := r.ReadArrayStart()
			if yyl1299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1300Slc
	var yyhl1300 bool = l >= 0
	for yyj1300 := 0; ; yyj1300++ {
		if yyhl1300 {
			if yyj1300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1300Slc = r.DecodeBytes(yys1300Slc, true, true)
		yys1300 := string(yys1300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1300 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg8_intstr.IntOrString{}
			} else {
				yyv1302 := &x.ServicePort
				yym1303 := z.DecBinary()
				_ = yym1303
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1302) {
				} else if !yym1303 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1302)
				} else {
					z.DecFallback(yyv1302, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1300)
		} // end switch yys1300
	} // end for yyj1300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1304 int
	var yyb1304 bool
	var yyhl1304 bool = l >= 0
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg8_intstr.IntOrString{}
	} else {
		yyv1306 := &x.ServicePort
		yym1307 := z.DecBinary()
		_ = yym1307
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1306) {
		} else if !yym1307 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1306)
		} else {
			z.DecFallback(yyv1306, false)
		}
	}
	for {
		yyj1304++
		if yyhl1304 {
			yyb1304 = yyj1304 > l
		} else {
			yyb1304 = r.CheckBreak()
		}
		if yyb1304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1308 := z.EncBinary()
	_ = yym1308
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1309 := z.DecBinary()
	_ = yym1309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1310 := z.EncBinary()
		_ = yym1310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1311 := !z.EncBinary()
			yy2arr1311 := z.EncBasicHandle().StructToArray
			var yyq1311 [2]bool
			_, _, _ = yysep1311, yyq1311, yy2arr1311
			const yyr1311 bool = false
			var yynn1311 int
			if yyr1311 || yy2arr1311 {
				r.EncodeArrayStart(2)
			} else {
				yynn1311 = 2
				for _, b := range yyq1311 {
					if b {
						yynn1311++
					}
				}
				r.EncodeMapStart(yynn1311)
				yynn1311 = 0
			}
			if yyr1311 || yy2arr1311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1311 || yy2arr1311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1314 := z.EncBinary()
				_ = yym1314
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1315 := z.EncBinary()
				_ = yym1315
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1311 || yy2arr1311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1316 := z.DecBinary()
	_ = yym1316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1317 := r.ContainerType()
		if yyct1317 == codecSelferValueTypeMap1234 {
			yyl1317 := r.ReadMapStart()
			if yyl1317 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1317, d)
			}
		} else if yyct1317 == codecSelferValueTypeArray1234 {
			yyl1317 := r.ReadArrayStart()
			if yyl1317 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1317, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1318Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1318Slc
	var yyhl1318 bool = l >= 0
	for yyj1318 := 0; ; yyj1318++ {
		if yyhl1318 {
			if yyj1318 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1318Slc = r.DecodeBytes(yys1318Slc, true, true)
		yys1318 := string(yys1318Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1318 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1318)
		} // end switch yys1318
	} // end for yyj1318
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1321 int
	var yyb1321 bool
	var yyhl1321 bool = l >= 0
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1321++
	if yyhl1321 {
		yyb1321 = yyj1321 > l
	} else {
		yyb1321 = r.CheckBreak()
	}
	if yyb1321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1321++
		if yyhl1321 {
			yyb1321 = yyj1321 > l
		} else {
			yyb1321 = r.CheckBreak()
		}
		if yyb1321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1324 := z.EncBinary()
		_ = yym1324
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1325 := !z.EncBinary()
			yy2arr1325 := z.EncBasicHandle().StructToArray
			var yyq1325 [3]bool
			_, _, _ = yysep1325, yyq1325, yy2arr1325
			const yyr1325 bool = false
			var yynn1325 int
			if yyr1325 || yy2arr1325 {
				r.EncodeArrayStart(3)
			} else {
				yynn1325 = 3
				for _, b := range yyq1325 {
					if b {
						yynn1325++
					}
				}
				r.EncodeMapStart(yynn1325)
				yynn1325 = 0
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1327 := z.EncBinary()
				_ = yym1327
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1328 := z.EncBinary()
				_ = yym1328
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1330 := z.EncBinary()
				_ = yym1330
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1331 := z.EncBinary()
				_ = yym1331
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1334 := z.EncBinary()
					_ = yym1334
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1335 := z.DecBinary()
	_ = yym1335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1336 := r.ContainerType()
		if yyct1336 == codecSelferValueTypeMap1234 {
			yyl1336 := r.ReadMapStart()
			if yyl1336 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1336, d)
			}
		} else if yyct1336 == codecSelferValueTypeArray1234 {
			yyl1336 := r.ReadArrayStart()
			if yyl1336 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1336, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1337Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1337Slc
	var yyhl1337 bool = l >= 0
	for yyj1337 := 0; ; yyj1337++ {
		if yyhl1337 {
			if yyj1337 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1337Slc = r.DecodeBytes(yys1337Slc, true, true)
		yys1337 := string(yys1337Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1337 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1340 := &x.TargetUtilization
				yym1341 := z.DecBinary()
				_ = yym1341
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1340), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1337)
		} // end switch yys1337
	} // end for yyj1337
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1342 int
	var yyb1342 bool
	var yyhl1342 bool = l >= 0
	yyj1342++
	if yyhl1342 {
		yyb1342 = yyj1342 > l
	} else {
		yyb1342 = r.CheckBreak()
	}
	if yyb1342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1342++
	if yyhl1342 {
		yyb1342 = yyj1342 > l
	} else {
		yyb1342 = r.CheckBreak()
	}
	if yyb1342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1342++
	if yyhl1342 {
		yyb1342 = yyj1342 > l
	} else {
		yyb1342 = r.CheckBreak()
	}
	if yyb1342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1345 := &x.TargetUtilization
		yym1346 := z.DecBinary()
		_ = yym1346
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1345), d)
		}
	}
	for {
		yyj1342++
		if yyhl1342 {
			yyb1342 = yyj1342 > l
		} else {
			yyb1342 = r.CheckBreak()
		}
		if yyb1342 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1342-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1347 := z.EncBinary()
		_ = yym1347
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1348 := !z.EncBinary()
			yy2arr1348 := z.EncBasicHandle().StructToArray
			var yyq1348 [4]bool
			_, _, _ = yysep1348, yyq1348, yy2arr1348
			const yyr1348 bool = false
			yyq1348[0] = x.Kind != ""
			yyq1348[1] = x.APIVersion != ""
			yyq1348[2] = true
			yyq1348[3] = true
			var yynn1348 int
			if yyr1348 || yy2arr1348 {
				r.EncodeArrayStart(4)
			} else {
				yynn1348 = 0
				for _, b := range yyq1348 {
					if b {
						yynn1348++
					}
				}
				r.EncodeMapStart(yynn1348)
				yynn1348 = 0
			}
			if yyr1348 || yy2arr1348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1348[0] {
					yym1350 := z.EncBinary()
					_ = yym1350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1348[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1351 := z.EncBinary()
					_ = yym1351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1348 || yy2arr1348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1348[1] {
					yym1353 := z.EncBinary()
					_ = yym1353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1348[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1354 := z.EncBinary()
					_ = yym1354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1348 || yy2arr1348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1348[2] {
					yy1356 := &x.ObjectMeta
					yy1356.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1348[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1357 := &x.ObjectMeta
					yy1357.CodecEncodeSelf(e)
				}
			}
			if yyr1348 || yy2arr1348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1348[3] {
					yy1359 := &x.Spec
					yy1359.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1348[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1360 := &x.Spec
					yy1360.CodecEncodeSelf(e)
				}
			}
			if yyr1348 || yy2arr1348 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1361 := z.DecBinary()
	_ = yym1361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1362 := r.ContainerType()
		if yyct1362 == codecSelferValueTypeMap1234 {
			yyl1362 := r.ReadMapStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1362, d)
			}
		} else if yyct1362 == codecSelferValueTypeArray1234 {
			yyl1362 := r.ReadArrayStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1362, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1363Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1363Slc
	var yyhl1363 bool = l >= 0
	for yyj1363 := 0; ; yyj1363++ {
		if yyhl1363 {
			if yyj1363 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1363Slc = r.DecodeBytes(yys1363Slc, true, true)
		yys1363 := string(yys1363Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1363 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1366 := &x.ObjectMeta
				yyv1366.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1367 := &x.Spec
				yyv1367.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1363)
		} // end switch yys1363
	} // end for yyj1363
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1368 int
	var yyb1368 bool
	var yyhl1368 bool = l >= 0
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1371 := &x.ObjectMeta
		yyv1371.CodecDecodeSelf(d)
	}
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1372 := &x.Spec
		yyv1372.CodecDecodeSelf(d)
	}
	for {
		yyj1368++
		if yyhl1368 {
			yyb1368 = yyj1368 > l
		} else {
			yyb1368 = r.CheckBreak()
		}
		if yyb1368 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1368-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1373 := z.EncBinary()
		_ = yym1373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1374 := !z.EncBinary()
			yy2arr1374 := z.EncBasicHandle().StructToArray
			var yyq1374 [4]bool
			_, _, _ = yysep1374, yyq1374, yy2arr1374
			const yyr1374 bool = false
			yyq1374[0] = x.Kind != ""
			yyq1374[1] = x.APIVersion != ""
			yyq1374[2] = true
			var yynn1374 int
			if yyr1374 || yy2arr1374 {
				r.EncodeArrayStart(4)
			} else {
				yynn1374 = 1
				for _, b := range yyq1374 {
					if b {
						yynn1374++
					}
				}
				r.EncodeMapStart(yynn1374)
				yynn1374 = 0
			}
			if yyr1374 || yy2arr1374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1374[0] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1374[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1374 || yy2arr1374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1374[1] {
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1374[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1374 || yy2arr1374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1374[2] {
					yy1382 := &x.ListMeta
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1382) {
					} else {
						z.EncFallback(yy1382)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1374[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1384 := &x.ListMeta
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1384) {
					} else {
						z.EncFallback(yy1384)
					}
				}
			}
			if yyr1374 || yy2arr1374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1387 := z.EncBinary()
					_ = yym1387
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1374 || yy2arr1374 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1389 := z.DecBinary()
	_ = yym1389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1390 := r.ContainerType()
		if yyct1390 == codecSelferValueTypeMap1234 {
			yyl1390 := r.ReadMapStart()
			if yyl1390 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1390, d)
			}
		} else if yyct1390 == codecSelferValueTypeArray1234 {
			yyl1390 := r.ReadArrayStart()
			if yyl1390 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1390, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1391Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1391Slc
	var yyhl1391 bool = l >= 0
	for yyj1391 := 0; ; yyj1391++ {
		if yyhl1391 {
			if yyj1391 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1391Slc = r.DecodeBytes(yys1391Slc, true, true)
		yys1391 := string(yys1391Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1391 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1394 := &x.ListMeta
				yym1395 := z.DecBinary()
				_ = yym1395
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1394) {
				} else {
					z.DecFallback(yyv1394, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1396 := &x.Items
				yym1397 := z.DecBinary()
				_ = yym1397
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1396), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1391)
		} // end switch yys1391
	} // end for yyj1391
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1398 int
	var yyb1398 bool
	var yyhl1398 bool = l >= 0
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1401 := &x.ListMeta
		yym1402 := z.DecBinary()
		_ = yym1402
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1401) {
		} else {
			z.DecFallback(yyv1401, false)
		}
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1403 := &x.Items
		yym1404 := z.DecBinary()
		_ = yym1404
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1403), d)
		}
	}
	for {
		yyj1398++
		if yyhl1398 {
			yyb1398 = yyj1398 > l
		} else {
			yyb1398 = r.CheckBreak()
		}
		if yyb1398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1405 := z.EncBinary()
		_ = yym1405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1406 := !z.EncBinary()
			yy2arr1406 := z.EncBasicHandle().StructToArray
			var yyq1406 [2]bool
			_, _, _ = yysep1406, yyq1406, yy2arr1406
			const yyr1406 bool = false
			yyq1406[0] = len(x.MatchLabels) != 0
			yyq1406[1] = len(x.MatchExpressions) != 0
			var yynn1406 int
			if yyr1406 || yy2arr1406 {
				r.EncodeArrayStart(2)
			} else {
				yynn1406 = 0
				for _, b := range yyq1406 {
					if b {
						yynn1406++
					}
				}
				r.EncodeMapStart(yynn1406)
				yynn1406 = 0
			}
			if yyr1406 || yy2arr1406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1406[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1408 := z.EncBinary()
						_ = yym1408
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1409 := z.EncBinary()
						_ = yym1409
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1406 || yy2arr1406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1406[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1411 := z.EncBinary()
						_ = yym1411
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1412 := z.EncBinary()
						_ = yym1412
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1406 || yy2arr1406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1413 := z.DecBinary()
	_ = yym1413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1414 := r.ContainerType()
		if yyct1414 == codecSelferValueTypeMap1234 {
			yyl1414 := r.ReadMapStart()
			if yyl1414 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1414, d)
			}
		} else if yyct1414 == codecSelferValueTypeArray1234 {
			yyl1414 := r.ReadArrayStart()
			if yyl1414 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1414, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1415Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1415Slc
	var yyhl1415 bool = l >= 0
	for yyj1415 := 0; ; yyj1415++ {
		if yyhl1415 {
			if yyj1415 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1415Slc = r.DecodeBytes(yys1415Slc, true, true)
		yys1415 := string(yys1415Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1415 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1416 := &x.MatchLabels
				yym1417 := z.DecBinary()
				_ = yym1417
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1416, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1418 := &x.MatchExpressions
				yym1419 := z.DecBinary()
				_ = yym1419
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1418), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1415)
		} // end switch yys1415
	} // end for yyj1415
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1420 int
	var yyb1420 bool
	var yyhl1420 bool = l >= 0
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1421 := &x.MatchLabels
		yym1422 := z.DecBinary()
		_ = yym1422
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1421, false, d)
		}
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1423 := &x.MatchExpressions
		yym1424 := z.DecBinary()
		_ = yym1424
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1423), d)
		}
	}
	for {
		yyj1420++
		if yyhl1420 {
			yyb1420 = yyj1420 > l
		} else {
			yyb1420 = r.CheckBreak()
		}
		if yyb1420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1425 := z.EncBinary()
		_ = yym1425
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1426 := !z.EncBinary()
			yy2arr1426 := z.EncBasicHandle().StructToArray
			var yyq1426 [3]bool
			_, _, _ = yysep1426, yyq1426, yy2arr1426
			const yyr1426 bool = false
			yyq1426[2] = len(x.Values) != 0
			var yynn1426 int
			if yyr1426 || yy2arr1426 {
				r.EncodeArrayStart(3)
			} else {
				yynn1426 = 2
				for _, b := range yyq1426 {
					if b {
						yynn1426++
					}
				}
				r.EncodeMapStart(yynn1426)
				yynn1426 = 0
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1428 := z.EncBinary()
				_ = yym1428
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1429 := z.EncBinary()
				_ = yym1429
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1426[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1432 := z.EncBinary()
						_ = yym1432
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1426[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1433 := z.EncBinary()
						_ = yym1433
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1434 := z.DecBinary()
	_ = yym1434
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1435 := r.ContainerType()
		if yyct1435 == codecSelferValueTypeMap1234 {
			yyl1435 := r.ReadMapStart()
			if yyl1435 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1435, d)
			}
		} else if yyct1435 == codecSelferValueTypeArray1234 {
			yyl1435 := r.ReadArrayStart()
			if yyl1435 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1435, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1436Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1436Slc
	var yyhl1436 bool = l >= 0
	for yyj1436 := 0; ; yyj1436++ {
		if yyhl1436 {
			if yyj1436 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1436Slc = r.DecodeBytes(yys1436Slc, true, true)
		yys1436 := string(yys1436Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1436 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1439 := &x.Values
				yym1440 := z.DecBinary()
				_ = yym1440
				if false {
				} else {
					z.F.DecSliceStringX(yyv1439, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1436)
		} // end switch yys1436
	} // end for yyj1436
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1441 int
	var yyb1441 bool
	var yyhl1441 bool = l >= 0
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1444 := &x.Values
		yym1445 := z.DecBinary()
		_ = yym1445
		if false {
		} else {
			z.F.DecSliceStringX(yyv1444, false, d)
		}
	}
	for {
		yyj1441++
		if yyhl1441 {
			yyb1441 = yyj1441 > l
		} else {
			yyb1441 = r.CheckBreak()
		}
		if yyb1441 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1441-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1446 := z.EncBinary()
	_ = yym1446
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1447 := z.DecBinary()
	_ = yym1447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1448 := z.EncBinary()
		_ = yym1448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1449 := !z.EncBinary()
			yy2arr1449 := z.EncBasicHandle().StructToArray
			var yyq1449 [5]bool
			_, _, _ = yysep1449, yyq1449, yy2arr1449
			const yyr1449 bool = false
			yyq1449[0] = x.Kind != ""
			yyq1449[1] = x.APIVersion != ""
			yyq1449[2] = true
			yyq1449[3] = true
			yyq1449[4] = true
			var yynn1449 int
			if yyr1449 || yy2arr1449 {
				r.EncodeArrayStart(5)
			} else {
				yynn1449 = 0
				for _, b := range yyq1449 {
					if b {
						yynn1449++
					}
				}
				r.EncodeMapStart(yynn1449)
				yynn1449 = 0
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[0] {
					yym1451 := z.EncBinary()
					_ = yym1451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1449[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1452 := z.EncBinary()
					_ = yym1452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[1] {
					yym1454 := z.EncBinary()
					_ = yym1454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1449[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1455 := z.EncBinary()
					_ = yym1455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[2] {
					yy1457 := &x.ObjectMeta
					yy1457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1458 := &x.ObjectMeta
					yy1458.CodecEncodeSelf(e)
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[3] {
					yy1460 := &x.Spec
					yy1460.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1461 := &x.Spec
					yy1461.CodecEncodeSelf(e)
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[4] {
					yy1463 := &x.Status
					yy1463.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1464 := &x.Status
					yy1464.CodecEncodeSelf(e)
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1465 := z.DecBinary()
	_ = yym1465
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1466 := r.ContainerType()
		if yyct1466 == codecSelferValueTypeMap1234 {
			yyl1466 := r.ReadMapStart()
			if yyl1466 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1466, d)
			}
		} else if yyct1466 == codecSelferValueTypeArray1234 {
			yyl1466 := r.ReadArrayStart()
			if yyl1466 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1466, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1467Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1467Slc
	var yyhl1467 bool = l >= 0
	for yyj1467 := 0; ; yyj1467++ {
		if yyhl1467 {
			if yyj1467 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1467Slc = r.DecodeBytes(yys1467Slc, true, true)
		yys1467 := string(yys1467Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1467 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1470 := &x.ObjectMeta
				yyv1470.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1471 := &x.Spec
				yyv1471.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1472 := &x.Status
				yyv1472.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1467)
		} // end switch yys1467
	} // end for yyj1467
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1473 int
	var yyb1473 bool
	var yyhl1473 bool = l >= 0
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1476 := &x.ObjectMeta
		yyv1476.CodecDecodeSelf(d)
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1477 := &x.Spec
		yyv1477.CodecDecodeSelf(d)
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1478 := &x.Status
		yyv1478.CodecDecodeSelf(d)
	}
	for {
		yyj1473++
		if yyhl1473 {
			yyb1473 = yyj1473 > l
		} else {
			yyb1473 = r.CheckBreak()
		}
		if yyb1473 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1473-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1479 := z.EncBinary()
		_ = yym1479
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1480 := !z.EncBinary()
			yy2arr1480 := z.EncBasicHandle().StructToArray
			var yyq1480 [4]bool
			_, _, _ = yysep1480, yyq1480, yy2arr1480
			const yyr1480 bool = false
			yyq1480[0] = x.Kind != ""
			yyq1480[1] = x.APIVersion != ""
			yyq1480[2] = true
			var yynn1480 int
			if yyr1480 || yy2arr1480 {
				r.EncodeArrayStart(4)
			} else {
				yynn1480 = 1
				for _, b := range yyq1480 {
					if b {
						yynn1480++
					}
				}
				r.EncodeMapStart(yynn1480)
				yynn1480 = 0
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[0] {
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1480[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1483 := z.EncBinary()
					_ = yym1483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[1] {
					yym1485 := z.EncBinary()
					_ = yym1485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1480[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1486 := z.EncBinary()
					_ = yym1486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[2] {
					yy1488 := &x.ListMeta
					yym1489 := z.EncBinary()
					_ = yym1489
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1488) {
					} else {
						z.EncFallback(yy1488)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1480[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1490 := &x.ListMeta
					yym1491 := z.EncBinary()
					_ = yym1491
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1490) {
					} else {
						z.EncFallback(yy1490)
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1495 := z.DecBinary()
	_ = yym1495
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1496 := r.ContainerType()
		if yyct1496 == codecSelferValueTypeMap1234 {
			yyl1496 := r.ReadMapStart()
			if yyl1496 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1496, d)
			}
		} else if yyct1496 == codecSelferValueTypeArray1234 {
			yyl1496 := r.ReadArrayStart()
			if yyl1496 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1496, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1497Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1497Slc
	var yyhl1497 bool = l >= 0
	for yyj1497 := 0; ; yyj1497++ {
		if yyhl1497 {
			if yyj1497 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1497Slc = r.DecodeBytes(yys1497Slc, true, true)
		yys1497 := string(yys1497Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1497 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1500 := &x.ListMeta
				yym1501 := z.DecBinary()
				_ = yym1501
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1500) {
				} else {
					z.DecFallback(yyv1500, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1502 := &x.Items
				yym1503 := z.DecBinary()
				_ = yym1503
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1502), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1497)
		} // end switch yys1497
	} // end for yyj1497
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1504 int
	var yyb1504 bool
	var yyhl1504 bool = l >= 0
	yyj1504++
	if yyhl1504 {
		yyb1504 = yyj1504 > l
	} else {
		yyb1504 = r.CheckBreak()
	}
	if yyb1504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1504++
	if yyhl1504 {
		yyb1504 = yyj1504 > l
	} else {
		yyb1504 = r.CheckBreak()
	}
	if yyb1504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1504++
	if yyhl1504 {
		yyb1504 = yyj1504 > l
	} else {
		yyb1504 = r.CheckBreak()
	}
	if yyb1504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1507 := &x.ListMeta
		yym1508 := z.DecBinary()
		_ = yym1508
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1507) {
		} else {
			z.DecFallback(yyv1507, false)
		}
	}
	yyj1504++
	if yyhl1504 {
		yyb1504 = yyj1504 > l
	} else {
		yyb1504 = r.CheckBreak()
	}
	if yyb1504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1509 := &x.Items
		yym1510 := z.DecBinary()
		_ = yym1510
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1509), d)
		}
	}
	for {
		yyj1504++
		if yyhl1504 {
			yyb1504 = yyj1504 > l
		} else {
			yyb1504 = r.CheckBreak()
		}
		if yyb1504 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1504-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1511 := z.EncBinary()
		_ = yym1511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1512 := !z.EncBinary()
			yy2arr1512 := z.EncBasicHandle().StructToArray
			var yyq1512 [3]bool
			_, _, _ = yysep1512, yyq1512, yy2arr1512
			const yyr1512 bool = false
			yyq1512[1] = x.Selector != nil
			yyq1512[2] = x.Template != nil
			var yynn1512 int
			if yyr1512 || yy2arr1512 {
				r.EncodeArrayStart(3)
			} else {
				yynn1512 = 1
				for _, b := range yyq1512 {
					if b {
						yynn1512++
					}
				}
				r.EncodeMapStart(yynn1512)
				yynn1512 = 0
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1514 := z.EncBinary()
				_ = yym1514
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1515 := z.EncBinary()
				_ = yym1515
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1512[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1518 := z.DecBinary()
	_ = yym1518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1519 := r.ContainerType()
		if yyct1519 == codecSelferValueTypeMap1234 {
			yyl1519 := r.ReadMapStart()
			if yyl1519 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1519, d)
			}
		} else if yyct1519 == codecSelferValueTypeArray1234 {
			yyl1519 := r.ReadArrayStart()
			if yyl1519 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1520Slc
	var yyhl1520 bool = l >= 0
	for yyj1520 := 0; ; yyj1520++ {
		if yyhl1520 {
			if yyj1520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1520Slc = r.DecodeBytes(yys1520Slc, true, true)
		yys1520 := string(yys1520Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1520 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1520)
		} // end switch yys1520
	} // end for yyj1520
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1524 int
	var yyb1524 bool
	var yyhl1524 bool = l >= 0
	yyj1524++
	if yyhl1524 {
		yyb1524 = yyj1524 > l
	} else {
		yyb1524 = r.CheckBreak()
	}
	if yyb1524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1524++
	if yyhl1524 {
		yyb1524 = yyj1524 > l
	} else {
		yyb1524 = r.CheckBreak()
	}
	if yyb1524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1524++
	if yyhl1524 {
		yyb1524 = yyj1524 > l
	} else {
		yyb1524 = r.CheckBreak()
	}
	if yyb1524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1524++
		if yyhl1524 {
			yyb1524 = yyj1524 > l
		} else {
			yyb1524 = r.CheckBreak()
		}
		if yyb1524 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1524-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1528 := z.EncBinary()
		_ = yym1528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1529 := !z.EncBinary()
			yy2arr1529 := z.EncBasicHandle().StructToArray
			var yyq1529 [2]bool
			_, _, _ = yysep1529, yyq1529, yy2arr1529
			const yyr1529 bool = false
			yyq1529[1] = x.ObservedGeneration != 0
			var yynn1529 int
			if yyr1529 || yy2arr1529 {
				r.EncodeArrayStart(2)
			} else {
				yynn1529 = 1
				for _, b := range yyq1529 {
					if b {
						yynn1529++
					}
				}
				r.EncodeMapStart(yynn1529)
				yynn1529 = 0
			}
			if yyr1529 || yy2arr1529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1531 := z.EncBinary()
				_ = yym1531
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1532 := z.EncBinary()
				_ = yym1532
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1529 || yy2arr1529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1529[1] {
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1529[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1529 || yy2arr1529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1536 := z.DecBinary()
	_ = yym1536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1537 := r.ContainerType()
		if yyct1537 == codecSelferValueTypeMap1234 {
			yyl1537 := r.ReadMapStart()
			if yyl1537 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1537, d)
			}
		} else if yyct1537 == codecSelferValueTypeArray1234 {
			yyl1537 := r.ReadArrayStart()
			if yyl1537 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1537, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1538Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1538Slc
	var yyhl1538 bool = l >= 0
	for yyj1538 := 0; ; yyj1538++ {
		if yyhl1538 {
			if yyj1538 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1538Slc = r.DecodeBytes(yys1538Slc, true, true)
		yys1538 := string(yys1538Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1538 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1538)
		} // end switch yys1538
	} // end for yyj1538
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1541 int
	var yyb1541 bool
	var yyhl1541 bool = l >= 0
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1541++
		if yyhl1541 {
			yyb1541 = yyj1541 > l
		} else {
			yyb1541 = r.CheckBreak()
		}
		if yyb1541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCertificateSigningRequest(v []CertificateSigningRequest, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1544 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1545 := &yyv1544
		yy1545.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCertificateSigningRequest(v *[]CertificateSigningRequest, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1546 := *v
	yyh1546, yyl1546 := z.DecSliceHelperStart()
	var yyc1546 bool
	if yyl1546 == 0 {
		if yyv1546 == nil {
			yyv1546 = []CertificateSigningRequest{}
			yyc1546 = true
		} else if len(yyv1546) != 0 {
			yyv1546 = yyv1546[:0]
			yyc1546 = true
		}
	} else if yyl1546 > 0 {
		var yyrr1546, yyrl1546 int
		var yyrt1546 bool
		if yyl1546 > cap(yyv1546) {

			yyrg1546 := len(yyv1546) > 0
			yyv21546 := yyv1546
			yyrl1546, yyrt1546 = z.DecInferLen(yyl1546, z.DecBasicHandle().MaxInitLen, 608)
			if yyrt1546 {
				if yyrl1546 <= cap(yyv1546) {
					yyv1546 = yyv1546[:yyrl1546]
				} else {
					yyv1546 = make([]CertificateSigningRequest, yyrl1546)
				}
			} else {
				yyv1546 = make([]CertificateSigningRequest, yyrl1546)
			}
			yyc1546 = true
			yyrr1546 = len(yyv1546)
			if yyrg1546 {
				copy(yyv1546, yyv21546)
			}
		} else if yyl1546 != len(yyv1546) {
			yyv1546 = yyv1546[:yyl1546]
			yyc1546 = true
		}
		yyj1546 := 0
		for ; yyj1546 < yyrr1546; yyj1546++ {
			yyh1546.ElemContainerState(yyj1546)
			if r.TryDecodeAsNil() {
				yyv1546[yyj1546] = CertificateSigningRequest{}
			} else {
				yyv1547 := &yyv1546[yyj1546]
				yyv1547.CodecDecodeSelf(d)
			}

		}
		if yyrt1546 {
			for ; yyj1546 < yyl1546; yyj1546++ {
				yyv1546 = append(yyv1546, CertificateSigningRequest{})
				yyh1546.ElemContainerState(yyj1546)
				if r.TryDecodeAsNil() {
					yyv1546[yyj1546] = CertificateSigningRequest{}
				} else {
					yyv1548 := &yyv1546[yyj1546]
					yyv1548.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1546 := 0
		for ; !r.CheckBreak(); yyj1546++ {

			if yyj1546 >= len(yyv1546) {
				yyv1546 = append(yyv1546, CertificateSigningRequest{}) // var yyz1546 CertificateSigningRequest
				yyc1546 = true
			}
			yyh1546.ElemContainerState(yyj1546)
			if yyj1546 < len(yyv1546) {
				if r.TryDecodeAsNil() {
					yyv1546[yyj1546] = CertificateSigningRequest{}
				} else {
					yyv1549 := &yyv1546[yyj1546]
					yyv1549.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1546 < len(yyv1546) {
			yyv1546 = yyv1546[:yyj1546]
			yyc1546 = true
		} else if yyj1546 == 0 && yyv1546 == nil {
			yyv1546 = []CertificateSigningRequest{}
			yyc1546 = true
		}
	}
	yyh1546.End()
	if yyc1546 {
		*v = yyv1546
	}
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1550 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1551 := &yyv1550
		yy1551.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1552 := *v
	yyh1552, yyl1552 := z.DecSliceHelperStart()
	var yyc1552 bool
	if yyl1552 == 0 {
		if yyv1552 == nil {
			yyv1552 = []CustomMetricTarget{}
			yyc1552 = true
		} else if len(yyv1552) != 0 {
			yyv1552 = yyv1552[:0]
			yyc1552 = true
		}
	} else if yyl1552 > 0 {
		var yyrr1552, yyrl1552 int
		var yyrt1552 bool
		if yyl1552 > cap(yyv1552) {

			yyrg1552 := len(yyv1552) > 0
			yyv21552 := yyv1552
			yyrl1552, yyrt1552 = z.DecInferLen(yyl1552, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1552 {
				if yyrl1552 <= cap(yyv1552) {
					yyv1552 = yyv1552[:yyrl1552]
				} else {
					yyv1552 = make([]CustomMetricTarget, yyrl1552)
				}
			} else {
				yyv1552 = make([]CustomMetricTarget, yyrl1552)
			}
			yyc1552 = true
			yyrr1552 = len(yyv1552)
			if yyrg1552 {
				copy(yyv1552, yyv21552)
			}
		} else if yyl1552 != len(yyv1552) {
			yyv1552 = yyv1552[:yyl1552]
			yyc1552 = true
		}
		yyj1552 := 0
		for ; yyj1552 < yyrr1552; yyj1552++ {
			yyh1552.ElemContainerState(yyj1552)
			if r.TryDecodeAsNil() {
				yyv1552[yyj1552] = CustomMetricTarget{}
			} else {
				yyv1553 := &yyv1552[yyj1552]
				yyv1553.CodecDecodeSelf(d)
			}

		}
		if yyrt1552 {
			for ; yyj1552 < yyl1552; yyj1552++ {
				yyv1552 = append(yyv1552, CustomMetricTarget{})
				yyh1552.ElemContainerState(yyj1552)
				if r.TryDecodeAsNil() {
					yyv1552[yyj1552] = CustomMetricTarget{}
				} else {
					yyv1554 := &yyv1552[yyj1552]
					yyv1554.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1552 := 0
		for ; !r.CheckBreak(); yyj1552++ {

			if yyj1552 >= len(yyv1552) {
				yyv1552 = append(yyv1552, CustomMetricTarget{}) // var yyz1552 CustomMetricTarget
				yyc1552 = true
			}
			yyh1552.ElemContainerState(yyj1552)
			if yyj1552 < len(yyv1552) {
				if r.TryDecodeAsNil() {
					yyv1552[yyj1552] = CustomMetricTarget{}
				} else {
					yyv1555 := &yyv1552[yyj1552]
					yyv1555.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1552 < len(yyv1552) {
			yyv1552 = yyv1552[:yyj1552]
			yyc1552 = true
		} else if yyj1552 == 0 && yyv1552 == nil {
			yyv1552 = []CustomMetricTarget{}
			yyc1552 = true
		}
	}
	yyh1552.End()
	if yyc1552 {
		*v = yyv1552
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1556 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1557 := &yyv1556
		yy1557.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1558 := *v
	yyh1558, yyl1558 := z.DecSliceHelperStart()
	var yyc1558 bool
	if yyl1558 == 0 {
		if yyv1558 == nil {
			yyv1558 = []CustomMetricCurrentStatus{}
			yyc1558 = true
		} else if len(yyv1558) != 0 {
			yyv1558 = yyv1558[:0]
			yyc1558 = true
		}
	} else if yyl1558 > 0 {
		var yyrr1558, yyrl1558 int
		var yyrt1558 bool
		if yyl1558 > cap(yyv1558) {

			yyrg1558 := len(yyv1558) > 0
			yyv21558 := yyv1558
			yyrl1558, yyrt1558 = z.DecInferLen(yyl1558, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1558 {
				if yyrl1558 <= cap(yyv1558) {
					yyv1558 = yyv1558[:yyrl1558]
				} else {
					yyv1558 = make([]CustomMetricCurrentStatus, yyrl1558)
				}
			} else {
				yyv1558 = make([]CustomMetricCurrentStatus, yyrl1558)
			}
			yyc1558 = true
			yyrr1558 = len(yyv1558)
			if yyrg1558 {
				copy(yyv1558, yyv21558)
			}
		} else if yyl1558 != len(yyv1558) {
			yyv1558 = yyv1558[:yyl1558]
			yyc1558 = true
		}
		yyj1558 := 0
		for ; yyj1558 < yyrr1558; yyj1558++ {
			yyh1558.ElemContainerState(yyj1558)
			if r.TryDecodeAsNil() {
				yyv1558[yyj1558] = CustomMetricCurrentStatus{}
			} else {
				yyv1559 := &yyv1558[yyj1558]
				yyv1559.CodecDecodeSelf(d)
			}

		}
		if yyrt1558 {
			for ; yyj1558 < yyl1558; yyj1558++ {
				yyv1558 = append(yyv1558, CustomMetricCurrentStatus{})
				yyh1558.ElemContainerState(yyj1558)
				if r.TryDecodeAsNil() {
					yyv1558[yyj1558] = CustomMetricCurrentStatus{}
				} else {
					yyv1560 := &yyv1558[yyj1558]
					yyv1560.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1558 := 0
		for ; !r.CheckBreak(); yyj1558++ {

			if yyj1558 >= len(yyv1558) {
				yyv1558 = append(yyv1558, CustomMetricCurrentStatus{}) // var yyz1558 CustomMetricCurrentStatus
				yyc1558 = true
			}
			yyh1558.ElemContainerState(yyj1558)
			if yyj1558 < len(yyv1558) {
				if r.TryDecodeAsNil() {
					yyv1558[yyj1558] = CustomMetricCurrentStatus{}
				} else {
					yyv1561 := &yyv1558[yyj1558]
					yyv1561.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1558 < len(yyv1558) {
			yyv1558 = yyv1558[:yyj1558]
			yyc1558 = true
		} else if yyj1558 == 0 && yyv1558 == nil {
			yyv1558 = []CustomMetricCurrentStatus{}
			yyc1558 = true
		}
	}
	yyh1558.End()
	if yyc1558 {
		*v = yyv1558
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1562 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1563 := &yyv1562
		yy1563.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1564 := *v
	yyh1564, yyl1564 := z.DecSliceHelperStart()
	var yyc1564 bool
	if yyl1564 == 0 {
		if yyv1564 == nil {
			yyv1564 = []HorizontalPodAutoscaler{}
			yyc1564 = true
		} else if len(yyv1564) != 0 {
			yyv1564 = yyv1564[:0]
			yyc1564 = true
		}
	} else if yyl1564 > 0 {
		var yyrr1564, yyrl1564 int
		var yyrt1564 bool
		if yyl1564 > cap(yyv1564) {

			yyrg1564 := len(yyv1564) > 0
			yyv21564 := yyv1564
			yyrl1564, yyrt1564 = z.DecInferLen(yyl1564, z.DecBasicHandle().MaxInitLen, 320)
			if yyrt1564 {
				if yyrl1564 <= cap(yyv1564) {
					yyv1564 = yyv1564[:yyrl1564]
				} else {
					yyv1564 = make([]HorizontalPodAutoscaler, yyrl1564)
				}
			} else {
				yyv1564 = make([]HorizontalPodAutoscaler, yyrl1564)
			}
			yyc1564 = true
			yyrr1564 = len(yyv1564)
			if yyrg1564 {
				copy(yyv1564, yyv21564)
			}
		} else if yyl1564 != len(yyv1564) {
			yyv1564 = yyv1564[:yyl1564]
			yyc1564 = true
		}
		yyj1564 := 0
		for ; yyj1564 < yyrr1564; yyj1564++ {
			yyh1564.ElemContainerState(yyj1564)
			if r.TryDecodeAsNil() {
				yyv1564[yyj1564] = HorizontalPodAutoscaler{}
			} else {
				yyv1565 := &yyv1564[yyj1564]
				yyv1565.CodecDecodeSelf(d)
			}

		}
		if yyrt1564 {
			for ; yyj1564 < yyl1564; yyj1564++ {
				yyv1564 = append(yyv1564, HorizontalPodAutoscaler{})
				yyh1564.ElemContainerState(yyj1564)
				if r.TryDecodeAsNil() {
					yyv1564[yyj1564] = HorizontalPodAutoscaler{}
				} else {
					yyv1566 := &yyv1564[yyj1564]
					yyv1566.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1564 := 0
		for ; !r.CheckBreak(); yyj1564++ {

			if yyj1564 >= len(yyv1564) {
				yyv1564 = append(yyv1564, HorizontalPodAutoscaler{}) // var yyz1564 HorizontalPodAutoscaler
				yyc1564 = true
			}
			yyh1564.ElemContainerState(yyj1564)
			if yyj1564 < len(yyv1564) {
				if r.TryDecodeAsNil() {
					yyv1564[yyj1564] = HorizontalPodAutoscaler{}
				} else {
					yyv1567 := &yyv1564[yyj1564]
					yyv1567.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1564 < len(yyv1564) {
			yyv1564 = yyv1564[:yyj1564]
			yyc1564 = true
		} else if yyj1564 == 0 && yyv1564 == nil {
			yyv1564 = []HorizontalPodAutoscaler{}
			yyc1564 = true
		}
	}
	yyh1564.End()
	if yyc1564 {
		*v = yyv1564
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1568 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1569 := &yyv1568
		yy1569.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1570 := *v
	yyh1570, yyl1570 := z.DecSliceHelperStart()
	var yyc1570 bool
	if yyl1570 == 0 {
		if yyv1570 == nil {
			yyv1570 = []APIVersion{}
			yyc1570 = true
		} else if len(yyv1570) != 0 {
			yyv1570 = yyv1570[:0]
			yyc1570 = true
		}
	} else if yyl1570 > 0 {
		var yyrr1570, yyrl1570 int
		var yyrt1570 bool
		if yyl1570 > cap(yyv1570) {

			yyrg1570 := len(yyv1570) > 0
			yyv21570 := yyv1570
			yyrl1570, yyrt1570 = z.DecInferLen(yyl1570, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1570 {
				if yyrl1570 <= cap(yyv1570) {
					yyv1570 = yyv1570[:yyrl1570]
				} else {
					yyv1570 = make([]APIVersion, yyrl1570)
				}
			} else {
				yyv1570 = make([]APIVersion, yyrl1570)
			}
			yyc1570 = true
			yyrr1570 = len(yyv1570)
			if yyrg1570 {
				copy(yyv1570, yyv21570)
			}
		} else if yyl1570 != len(yyv1570) {
			yyv1570 = yyv1570[:yyl1570]
			yyc1570 = true
		}
		yyj1570 := 0
		for ; yyj1570 < yyrr1570; yyj1570++ {
			yyh1570.ElemContainerState(yyj1570)
			if r.TryDecodeAsNil() {
				yyv1570[yyj1570] = APIVersion{}
			} else {
				yyv1571 := &yyv1570[yyj1570]
				yyv1571.CodecDecodeSelf(d)
			}

		}
		if yyrt1570 {
			for ; yyj1570 < yyl1570; yyj1570++ {
				yyv1570 = append(yyv1570, APIVersion{})
				yyh1570.ElemContainerState(yyj1570)
				if r.TryDecodeAsNil() {
					yyv1570[yyj1570] = APIVersion{}
				} else {
					yyv1572 := &yyv1570[yyj1570]
					yyv1572.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1570 := 0
		for ; !r.CheckBreak(); yyj1570++ {

			if yyj1570 >= len(yyv1570) {
				yyv1570 = append(yyv1570, APIVersion{}) // var yyz1570 APIVersion
				yyc1570 = true
			}
			yyh1570.ElemContainerState(yyj1570)
			if yyj1570 < len(yyv1570) {
				if r.TryDecodeAsNil() {
					yyv1570[yyj1570] = APIVersion{}
				} else {
					yyv1573 := &yyv1570[yyj1570]
					yyv1573.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1570 < len(yyv1570) {
			yyv1570 = yyv1570[:yyj1570]
			yyc1570 = true
		} else if yyj1570 == 0 && yyv1570 == nil {
			yyv1570 = []APIVersion{}
			yyc1570 = true
		}
	}
	yyh1570.End()
	if yyc1570 {
		*v = yyv1570
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1574 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1575 := &yyv1574
		yy1575.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1576 := *v
	yyh1576, yyl1576 := z.DecSliceHelperStart()
	var yyc1576 bool
	if yyl1576 == 0 {
		if yyv1576 == nil {
			yyv1576 = []ThirdPartyResource{}
			yyc1576 = true
		} else if len(yyv1576) != 0 {
			yyv1576 = yyv1576[:0]
			yyc1576 = true
		}
	} else if yyl1576 > 0 {
		var yyrr1576, yyrl1576 int
		var yyrt1576 bool
		if yyl1576 > cap(yyv1576) {

			yyrg1576 := len(yyv1576) > 0
			yyv21576 := yyv1576
			yyrl1576, yyrt1576 = z.DecInferLen(yyl1576, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1576 {
				if yyrl1576 <= cap(yyv1576) {
					yyv1576 = yyv1576[:yyrl1576]
				} else {
					yyv1576 = make([]ThirdPartyResource, yyrl1576)
				}
			} else {
				yyv1576 = make([]ThirdPartyResource, yyrl1576)
			}
			yyc1576 = true
			yyrr1576 = len(yyv1576)
			if yyrg1576 {
				copy(yyv1576, yyv21576)
			}
		} else if yyl1576 != len(yyv1576) {
			yyv1576 = yyv1576[:yyl1576]
			yyc1576 = true
		}
		yyj1576 := 0
		for ; yyj1576 < yyrr1576; yyj1576++ {
			yyh1576.ElemContainerState(yyj1576)
			if r.TryDecodeAsNil() {
				yyv1576[yyj1576] = ThirdPartyResource{}
			} else {
				yyv1577 := &yyv1576[yyj1576]
				yyv1577.CodecDecodeSelf(d)
			}

		}
		if yyrt1576 {
			for ; yyj1576 < yyl1576; yyj1576++ {
				yyv1576 = append(yyv1576, ThirdPartyResource{})
				yyh1576.ElemContainerState(yyj1576)
				if r.TryDecodeAsNil() {
					yyv1576[yyj1576] = ThirdPartyResource{}
				} else {
					yyv1578 := &yyv1576[yyj1576]
					yyv1578.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1576 := 0
		for ; !r.CheckBreak(); yyj1576++ {

			if yyj1576 >= len(yyv1576) {
				yyv1576 = append(yyv1576, ThirdPartyResource{}) // var yyz1576 ThirdPartyResource
				yyc1576 = true
			}
			yyh1576.ElemContainerState(yyj1576)
			if yyj1576 < len(yyv1576) {
				if r.TryDecodeAsNil() {
					yyv1576[yyj1576] = ThirdPartyResource{}
				} else {
					yyv1579 := &yyv1576[yyj1576]
					yyv1579.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1576 < len(yyv1576) {
			yyv1576 = yyv1576[:yyj1576]
			yyc1576 = true
		} else if yyj1576 == 0 && yyv1576 == nil {
			yyv1576 = []ThirdPartyResource{}
			yyc1576 = true
		}
	}
	yyh1576.End()
	if yyc1576 {
		*v = yyv1576
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1580 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1581 := &yyv1580
		yy1581.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1582 := *v
	yyh1582, yyl1582 := z.DecSliceHelperStart()
	var yyc1582 bool
	if yyl1582 == 0 {
		if yyv1582 == nil {
			yyv1582 = []Deployment{}
			yyc1582 = true
		} else if len(yyv1582) != 0 {
			yyv1582 = yyv1582[:0]
			yyc1582 = true
		}
	} else if yyl1582 > 0 {
		var yyrr1582, yyrl1582 int
		var yyrt1582 bool
		if yyl1582 > cap(yyv1582) {

			yyrg1582 := len(yyv1582) > 0
			yyv21582 := yyv1582
			yyrl1582, yyrt1582 = z.DecInferLen(yyl1582, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt1582 {
				if yyrl1582 <= cap(yyv1582) {
					yyv1582 = yyv1582[:yyrl1582]
				} else {
					yyv1582 = make([]Deployment, yyrl1582)
				}
			} else {
				yyv1582 = make([]Deployment, yyrl1582)
			}
			yyc1582 = true
			yyrr1582 = len(yyv1582)
			if yyrg1582 {
				copy(yyv1582, yyv21582)
			}
		} else if yyl1582 != len(yyv1582) {
			yyv1582 = yyv1582[:yyl1582]
			yyc1582 = true
		}
		yyj1582 := 0
		for ; yyj1582 < yyrr1582; yyj1582++ {
			yyh1582.ElemContainerState(yyj1582)
			if r.TryDecodeAsNil() {
				yyv1582[yyj1582] = Deployment{}
			} else {
				yyv1583 := &yyv1582[yyj1582]
				yyv1583.CodecDecodeSelf(d)
			}

		}
		if yyrt1582 {
			for ; yyj1582 < yyl1582; yyj1582++ {
				yyv1582 = append(yyv1582, Deployment{})
				yyh1582.ElemContainerState(yyj1582)
				if r.TryDecodeAsNil() {
					yyv1582[yyj1582] = Deployment{}
				} else {
					yyv1584 := &yyv1582[yyj1582]
					yyv1584.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1582 := 0
		for ; !r.CheckBreak(); yyj1582++ {

			if yyj1582 >= len(yyv1582) {
				yyv1582 = append(yyv1582, Deployment{}) // var yyz1582 Deployment
				yyc1582 = true
			}
			yyh1582.ElemContainerState(yyj1582)
			if yyj1582 < len(yyv1582) {
				if r.TryDecodeAsNil() {
					yyv1582[yyj1582] = Deployment{}
				} else {
					yyv1585 := &yyv1582[yyj1582]
					yyv1585.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1582 < len(yyv1582) {
			yyv1582 = yyv1582[:yyj1582]
			yyc1582 = true
		} else if yyj1582 == 0 && yyv1582 == nil {
			yyv1582 = []Deployment{}
			yyc1582 = true
		}
	}
	yyh1582.End()
	if yyc1582 {
		*v = yyv1582
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1586 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1587 := &yyv1586
		yy1587.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1588 := *v
	yyh1588, yyl1588 := z.DecSliceHelperStart()
	var yyc1588 bool
	if yyl1588 == 0 {
		if yyv1588 == nil {
			yyv1588 = []DaemonSet{}
			yyc1588 = true
		} else if len(yyv1588) != 0 {
			yyv1588 = yyv1588[:0]
			yyc1588 = true
		}
	} else if yyl1588 > 0 {
		var yyrr1588, yyrl1588 int
		var yyrt1588 bool
		if yyl1588 > cap(yyv1588) {

			yyrg1588 := len(yyv1588) > 0
			yyv21588 := yyv1588
			yyrl1588, yyrt1588 = z.DecInferLen(yyl1588, z.DecBasicHandle().MaxInitLen, 592)
			if yyrt1588 {
				if yyrl1588 <= cap(yyv1588) {
					yyv1588 = yyv1588[:yyrl1588]
				} else {
					yyv1588 = make([]DaemonSet, yyrl1588)
				}
			} else {
				yyv1588 = make([]DaemonSet, yyrl1588)
			}
			yyc1588 = true
			yyrr1588 = len(yyv1588)
			if yyrg1588 {
				copy(yyv1588, yyv21588)
			}
		} else if yyl1588 != len(yyv1588) {
			yyv1588 = yyv1588[:yyl1588]
			yyc1588 = true
		}
		yyj1588 := 0
		for ; yyj1588 < yyrr1588; yyj1588++ {
			yyh1588.ElemContainerState(yyj1588)
			if r.TryDecodeAsNil() {
				yyv1588[yyj1588] = DaemonSet{}
			} else {
				yyv1589 := &yyv1588[yyj1588]
				yyv1589.CodecDecodeSelf(d)
			}

		}
		if yyrt1588 {
			for ; yyj1588 < yyl1588; yyj1588++ {
				yyv1588 = append(yyv1588, DaemonSet{})
				yyh1588.ElemContainerState(yyj1588)
				if r.TryDecodeAsNil() {
					yyv1588[yyj1588] = DaemonSet{}
				} else {
					yyv1590 := &yyv1588[yyj1588]
					yyv1590.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1588 := 0
		for ; !r.CheckBreak(); yyj1588++ {

			if yyj1588 >= len(yyv1588) {
				yyv1588 = append(yyv1588, DaemonSet{}) // var yyz1588 DaemonSet
				yyc1588 = true
			}
			yyh1588.ElemContainerState(yyj1588)
			if yyj1588 < len(yyv1588) {
				if r.TryDecodeAsNil() {
					yyv1588[yyj1588] = DaemonSet{}
				} else {
					yyv1591 := &yyv1588[yyj1588]
					yyv1591.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1588 < len(yyv1588) {
			yyv1588 = yyv1588[:yyj1588]
			yyc1588 = true
		} else if yyj1588 == 0 && yyv1588 == nil {
			yyv1588 = []DaemonSet{}
			yyc1588 = true
		}
	}
	yyh1588.End()
	if yyc1588 {
		*v = yyv1588
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1592 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1593 := &yyv1592
		yy1593.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1594 := *v
	yyh1594, yyl1594 := z.DecSliceHelperStart()
	var yyc1594 bool
	if yyl1594 == 0 {
		if yyv1594 == nil {
			yyv1594 = []ThirdPartyResourceData{}
			yyc1594 = true
		} else if len(yyv1594) != 0 {
			yyv1594 = yyv1594[:0]
			yyc1594 = true
		}
	} else if yyl1594 > 0 {
		var yyrr1594, yyrl1594 int
		var yyrt1594 bool
		if yyl1594 > cap(yyv1594) {

			yyrg1594 := len(yyv1594) > 0
			yyv21594 := yyv1594
			yyrl1594, yyrt1594 = z.DecInferLen(yyl1594, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1594 {
				if yyrl1594 <= cap(yyv1594) {
					yyv1594 = yyv1594[:yyrl1594]
				} else {
					yyv1594 = make([]ThirdPartyResourceData, yyrl1594)
				}
			} else {
				yyv1594 = make([]ThirdPartyResourceData, yyrl1594)
			}
			yyc1594 = true
			yyrr1594 = len(yyv1594)
			if yyrg1594 {
				copy(yyv1594, yyv21594)
			}
		} else if yyl1594 != len(yyv1594) {
			yyv1594 = yyv1594[:yyl1594]
			yyc1594 = true
		}
		yyj1594 := 0
		for ; yyj1594 < yyrr1594; yyj1594++ {
			yyh1594.ElemContainerState(yyj1594)
			if r.TryDecodeAsNil() {
				yyv1594[yyj1594] = ThirdPartyResourceData{}
			} else {
				yyv1595 := &yyv1594[yyj1594]
				yyv1595.CodecDecodeSelf(d)
			}

		}
		if yyrt1594 {
			for ; yyj1594 < yyl1594; yyj1594++ {
				yyv1594 = append(yyv1594, ThirdPartyResourceData{})
				yyh1594.ElemContainerState(yyj1594)
				if r.TryDecodeAsNil() {
					yyv1594[yyj1594] = ThirdPartyResourceData{}
				} else {
					yyv1596 := &yyv1594[yyj1594]
					yyv1596.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1594 := 0
		for ; !r.CheckBreak(); yyj1594++ {

			if yyj1594 >= len(yyv1594) {
				yyv1594 = append(yyv1594, ThirdPartyResourceData{}) // var yyz1594 ThirdPartyResourceData
				yyc1594 = true
			}
			yyh1594.ElemContainerState(yyj1594)
			if yyj1594 < len(yyv1594) {
				if r.TryDecodeAsNil() {
					yyv1594[yyj1594] = ThirdPartyResourceData{}
				} else {
					yyv1597 := &yyv1594[yyj1594]
					yyv1597.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1594 < len(yyv1594) {
			yyv1594 = yyv1594[:yyj1594]
			yyc1594 = true
		} else if yyj1594 == 0 && yyv1594 == nil {
			yyv1594 = []ThirdPartyResourceData{}
			yyc1594 = true
		}
	}
	yyh1594.End()
	if yyc1594 {
		*v = yyv1594
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1598 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1599 := &yyv1598
		yy1599.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1600 := *v
	yyh1600, yyl1600 := z.DecSliceHelperStart()
	var yyc1600 bool
	if yyl1600 == 0 {
		if yyv1600 == nil {
			yyv1600 = []Job{}
			yyc1600 = true
		} else if len(yyv1600) != 0 {
			yyv1600 = yyv1600[:0]
			yyc1600 = true
		}
	} else if yyl1600 > 0 {
		var yyrr1600, yyrl1600 int
		var yyrt1600 bool
		if yyl1600 > cap(yyv1600) {

			yyrg1600 := len(yyv1600) > 0
			yyv21600 := yyv1600
			yyrl1600, yyrt1600 = z.DecInferLen(yyl1600, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt1600 {
				if yyrl1600 <= cap(yyv1600) {
					yyv1600 = yyv1600[:yyrl1600]
				} else {
					yyv1600 = make([]Job, yyrl1600)
				}
			} else {
				yyv1600 = make([]Job, yyrl1600)
			}
			yyc1600 = true
			yyrr1600 = len(yyv1600)
			if yyrg1600 {
				copy(yyv1600, yyv21600)
			}
		} else if yyl1600 != len(yyv1600) {
			yyv1600 = yyv1600[:yyl1600]
			yyc1600 = true
		}
		yyj1600 := 0
		for ; yyj1600 < yyrr1600; yyj1600++ {
			yyh1600.ElemContainerState(yyj1600)
			if r.TryDecodeAsNil() {
				yyv1600[yyj1600] = Job{}
			} else {
				yyv1601 := &yyv1600[yyj1600]
				yyv1601.CodecDecodeSelf(d)
			}

		}
		if yyrt1600 {
			for ; yyj1600 < yyl1600; yyj1600++ {
				yyv1600 = append(yyv1600, Job{})
				yyh1600.ElemContainerState(yyj1600)
				if r.TryDecodeAsNil() {
					yyv1600[yyj1600] = Job{}
				} else {
					yyv1602 := &yyv1600[yyj1600]
					yyv1602.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1600 := 0
		for ; !r.CheckBreak(); yyj1600++ {

			if yyj1600 >= len(yyv1600) {
				yyv1600 = append(yyv1600, Job{}) // var yyz1600 Job
				yyc1600 = true
			}
			yyh1600.ElemContainerState(yyj1600)
			if yyj1600 < len(yyv1600) {
				if r.TryDecodeAsNil() {
					yyv1600[yyj1600] = Job{}
				} else {
					yyv1603 := &yyv1600[yyj1600]
					yyv1603.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1600 < len(yyv1600) {
			yyv1600 = yyv1600[:yyj1600]
			yyc1600 = true
		} else if yyj1600 == 0 && yyv1600 == nil {
			yyv1600 = []Job{}
			yyc1600 = true
		}
	}
	yyh1600.End()
	if yyc1600 {
		*v = yyv1600
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1604 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1605 := &yyv1604
		yy1605.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1606 := *v
	yyh1606, yyl1606 := z.DecSliceHelperStart()
	var yyc1606 bool
	if yyl1606 == 0 {
		if yyv1606 == nil {
			yyv1606 = []JobCondition{}
			yyc1606 = true
		} else if len(yyv1606) != 0 {
			yyv1606 = yyv1606[:0]
			yyc1606 = true
		}
	} else if yyl1606 > 0 {
		var yyrr1606, yyrl1606 int
		var yyrt1606 bool
		if yyl1606 > cap(yyv1606) {

			yyrg1606 := len(yyv1606) > 0
			yyv21606 := yyv1606
			yyrl1606, yyrt1606 = z.DecInferLen(yyl1606, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1606 {
				if yyrl1606 <= cap(yyv1606) {
					yyv1606 = yyv1606[:yyrl1606]
				} else {
					yyv1606 = make([]JobCondition, yyrl1606)
				}
			} else {
				yyv1606 = make([]JobCondition, yyrl1606)
			}
			yyc1606 = true
			yyrr1606 = len(yyv1606)
			if yyrg1606 {
				copy(yyv1606, yyv21606)
			}
		} else if yyl1606 != len(yyv1606) {
			yyv1606 = yyv1606[:yyl1606]
			yyc1606 = true
		}
		yyj1606 := 0
		for ; yyj1606 < yyrr1606; yyj1606++ {
			yyh1606.ElemContainerState(yyj1606)
			if r.TryDecodeAsNil() {
				yyv1606[yyj1606] = JobCondition{}
			} else {
				yyv1607 := &yyv1606[yyj1606]
				yyv1607.CodecDecodeSelf(d)
			}

		}
		if yyrt1606 {
			for ; yyj1606 < yyl1606; yyj1606++ {
				yyv1606 = append(yyv1606, JobCondition{})
				yyh1606.ElemContainerState(yyj1606)
				if r.TryDecodeAsNil() {
					yyv1606[yyj1606] = JobCondition{}
				} else {
					yyv1608 := &yyv1606[yyj1606]
					yyv1608.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1606 := 0
		for ; !r.CheckBreak(); yyj1606++ {

			if yyj1606 >= len(yyv1606) {
				yyv1606 = append(yyv1606, JobCondition{}) // var yyz1606 JobCondition
				yyc1606 = true
			}
			yyh1606.ElemContainerState(yyj1606)
			if yyj1606 < len(yyv1606) {
				if r.TryDecodeAsNil() {
					yyv1606[yyj1606] = JobCondition{}
				} else {
					yyv1609 := &yyv1606[yyj1606]
					yyv1609.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1606 < len(yyv1606) {
			yyv1606 = yyv1606[:yyj1606]
			yyc1606 = true
		} else if yyj1606 == 0 && yyv1606 == nil {
			yyv1606 = []JobCondition{}
			yyc1606 = true
		}
	}
	yyh1606.End()
	if yyc1606 {
		*v = yyv1606
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1610 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1611 := &yyv1610
		yy1611.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1612 := *v
	yyh1612, yyl1612 := z.DecSliceHelperStart()
	var yyc1612 bool
	if yyl1612 == 0 {
		if yyv1612 == nil {
			yyv1612 = []Ingress{}
			yyc1612 = true
		} else if len(yyv1612) != 0 {
			yyv1612 = yyv1612[:0]
			yyc1612 = true
		}
	} else if yyl1612 > 0 {
		var yyrr1612, yyrl1612 int
		var yyrt1612 bool
		if yyl1612 > cap(yyv1612) {

			yyrg1612 := len(yyv1612) > 0
			yyv21612 := yyv1612
			yyrl1612, yyrt1612 = z.DecInferLen(yyl1612, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt1612 {
				if yyrl1612 <= cap(yyv1612) {
					yyv1612 = yyv1612[:yyrl1612]
				} else {
					yyv1612 = make([]Ingress, yyrl1612)
				}
			} else {
				yyv1612 = make([]Ingress, yyrl1612)
			}
			yyc1612 = true
			yyrr1612 = len(yyv1612)
			if yyrg1612 {
				copy(yyv1612, yyv21612)
			}
		} else if yyl1612 != len(yyv1612) {
			yyv1612 = yyv1612[:yyl1612]
			yyc1612 = true
		}
		yyj1612 := 0
		for ; yyj1612 < yyrr1612; yyj1612++ {
			yyh1612.ElemContainerState(yyj1612)
			if r.TryDecodeAsNil() {
				yyv1612[yyj1612] = Ingress{}
			} else {
				yyv1613 := &yyv1612[yyj1612]
				yyv1613.CodecDecodeSelf(d)
			}

		}
		if yyrt1612 {
			for ; yyj1612 < yyl1612; yyj1612++ {
				yyv1612 = append(yyv1612, Ingress{})
				yyh1612.ElemContainerState(yyj1612)
				if r.TryDecodeAsNil() {
					yyv1612[yyj1612] = Ingress{}
				} else {
					yyv1614 := &yyv1612[yyj1612]
					yyv1614.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1612 := 0
		for ; !r.CheckBreak(); yyj1612++ {

			if yyj1612 >= len(yyv1612) {
				yyv1612 = append(yyv1612, Ingress{}) // var yyz1612 Ingress
				yyc1612 = true
			}
			yyh1612.ElemContainerState(yyj1612)
			if yyj1612 < len(yyv1612) {
				if r.TryDecodeAsNil() {
					yyv1612[yyj1612] = Ingress{}
				} else {
					yyv1615 := &yyv1612[yyj1612]
					yyv1615.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1612 < len(yyv1612) {
			yyv1612 = yyv1612[:yyj1612]
			yyc1612 = true
		} else if yyj1612 == 0 && yyv1612 == nil {
			yyv1612 = []Ingress{}
			yyc1612 = true
		}
	}
	yyh1612.End()
	if yyc1612 {
		*v = yyv1612
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1616 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1617 := &yyv1616
		yy1617.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1618 := *v
	yyh1618, yyl1618 := z.DecSliceHelperStart()
	var yyc1618 bool
	if yyl1618 == 0 {
		if yyv1618 == nil {
			yyv1618 = []IngressRule{}
			yyc1618 = true
		} else if len(yyv1618) != 0 {
			yyv1618 = yyv1618[:0]
			yyc1618 = true
		}
	} else if yyl1618 > 0 {
		var yyrr1618, yyrl1618 int
		var yyrt1618 bool
		if yyl1618 > cap(yyv1618) {

			yyrg1618 := len(yyv1618) > 0
			yyv21618 := yyv1618
			yyrl1618, yyrt1618 = z.DecInferLen(yyl1618, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1618 {
				if yyrl1618 <= cap(yyv1618) {
					yyv1618 = yyv1618[:yyrl1618]
				} else {
					yyv1618 = make([]IngressRule, yyrl1618)
				}
			} else {
				yyv1618 = make([]IngressRule, yyrl1618)
			}
			yyc1618 = true
			yyrr1618 = len(yyv1618)
			if yyrg1618 {
				copy(yyv1618, yyv21618)
			}
		} else if yyl1618 != len(yyv1618) {
			yyv1618 = yyv1618[:yyl1618]
			yyc1618 = true
		}
		yyj1618 := 0
		for ; yyj1618 < yyrr1618; yyj1618++ {
			yyh1618.ElemContainerState(yyj1618)
			if r.TryDecodeAsNil() {
				yyv1618[yyj1618] = IngressRule{}
			} else {
				yyv1619 := &yyv1618[yyj1618]
				yyv1619.CodecDecodeSelf(d)
			}

		}
		if yyrt1618 {
			for ; yyj1618 < yyl1618; yyj1618++ {
				yyv1618 = append(yyv1618, IngressRule{})
				yyh1618.ElemContainerState(yyj1618)
				if r.TryDecodeAsNil() {
					yyv1618[yyj1618] = IngressRule{}
				} else {
					yyv1620 := &yyv1618[yyj1618]
					yyv1620.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1618 := 0
		for ; !r.CheckBreak(); yyj1618++ {

			if yyj1618 >= len(yyv1618) {
				yyv1618 = append(yyv1618, IngressRule{}) // var yyz1618 IngressRule
				yyc1618 = true
			}
			yyh1618.ElemContainerState(yyj1618)
			if yyj1618 < len(yyv1618) {
				if r.TryDecodeAsNil() {
					yyv1618[yyj1618] = IngressRule{}
				} else {
					yyv1621 := &yyv1618[yyj1618]
					yyv1621.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1618 < len(yyv1618) {
			yyv1618 = yyv1618[:yyj1618]
			yyc1618 = true
		} else if yyj1618 == 0 && yyv1618 == nil {
			yyv1618 = []IngressRule{}
			yyc1618 = true
		}
	}
	yyh1618.End()
	if yyc1618 {
		*v = yyv1618
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1622 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1623 := &yyv1622
		yy1623.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1624 := *v
	yyh1624, yyl1624 := z.DecSliceHelperStart()
	var yyc1624 bool
	if yyl1624 == 0 {
		if yyv1624 == nil {
			yyv1624 = []HTTPIngressPath{}
			yyc1624 = true
		} else if len(yyv1624) != 0 {
			yyv1624 = yyv1624[:0]
			yyc1624 = true
		}
	} else if yyl1624 > 0 {
		var yyrr1624, yyrl1624 int
		var yyrt1624 bool
		if yyl1624 > cap(yyv1624) {

			yyrg1624 := len(yyv1624) > 0
			yyv21624 := yyv1624
			yyrl1624, yyrt1624 = z.DecInferLen(yyl1624, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1624 {
				if yyrl1624 <= cap(yyv1624) {
					yyv1624 = yyv1624[:yyrl1624]
				} else {
					yyv1624 = make([]HTTPIngressPath, yyrl1624)
				}
			} else {
				yyv1624 = make([]HTTPIngressPath, yyrl1624)
			}
			yyc1624 = true
			yyrr1624 = len(yyv1624)
			if yyrg1624 {
				copy(yyv1624, yyv21624)
			}
		} else if yyl1624 != len(yyv1624) {
			yyv1624 = yyv1624[:yyl1624]
			yyc1624 = true
		}
		yyj1624 := 0
		for ; yyj1624 < yyrr1624; yyj1624++ {
			yyh1624.ElemContainerState(yyj1624)
			if r.TryDecodeAsNil() {
				yyv1624[yyj1624] = HTTPIngressPath{}
			} else {
				yyv1625 := &yyv1624[yyj1624]
				yyv1625.CodecDecodeSelf(d)
			}

		}
		if yyrt1624 {
			for ; yyj1624 < yyl1624; yyj1624++ {
				yyv1624 = append(yyv1624, HTTPIngressPath{})
				yyh1624.ElemContainerState(yyj1624)
				if r.TryDecodeAsNil() {
					yyv1624[yyj1624] = HTTPIngressPath{}
				} else {
					yyv1626 := &yyv1624[yyj1624]
					yyv1626.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1624 := 0
		for ; !r.CheckBreak(); yyj1624++ {

			if yyj1624 >= len(yyv1624) {
				yyv1624 = append(yyv1624, HTTPIngressPath{}) // var yyz1624 HTTPIngressPath
				yyc1624 = true
			}
			yyh1624.ElemContainerState(yyj1624)
			if yyj1624 < len(yyv1624) {
				if r.TryDecodeAsNil() {
					yyv1624[yyj1624] = HTTPIngressPath{}
				} else {
					yyv1627 := &yyv1624[yyj1624]
					yyv1627.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1624 < len(yyv1624) {
			yyv1624 = yyv1624[:yyj1624]
			yyc1624 = true
		} else if yyj1624 == 0 && yyv1624 == nil {
			yyv1624 = []HTTPIngressPath{}
			yyc1624 = true
		}
	}
	yyh1624.End()
	if yyc1624 {
		*v = yyv1624
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1628 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1629 := &yyv1628
		yy1629.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1630 := *v
	yyh1630, yyl1630 := z.DecSliceHelperStart()
	var yyc1630 bool
	if yyl1630 == 0 {
		if yyv1630 == nil {
			yyv1630 = []NodeUtilization{}
			yyc1630 = true
		} else if len(yyv1630) != 0 {
			yyv1630 = yyv1630[:0]
			yyc1630 = true
		}
	} else if yyl1630 > 0 {
		var yyrr1630, yyrl1630 int
		var yyrt1630 bool
		if yyl1630 > cap(yyv1630) {

			yyrg1630 := len(yyv1630) > 0
			yyv21630 := yyv1630
			yyrl1630, yyrt1630 = z.DecInferLen(yyl1630, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1630 {
				if yyrl1630 <= cap(yyv1630) {
					yyv1630 = yyv1630[:yyrl1630]
				} else {
					yyv1630 = make([]NodeUtilization, yyrl1630)
				}
			} else {
				yyv1630 = make([]NodeUtilization, yyrl1630)
			}
			yyc1630 = true
			yyrr1630 = len(yyv1630)
			if yyrg1630 {
				copy(yyv1630, yyv21630)
			}
		} else if yyl1630 != len(yyv1630) {
			yyv1630 = yyv1630[:yyl1630]
			yyc1630 = true
		}
		yyj1630 := 0
		for ; yyj1630 < yyrr1630; yyj1630++ {
			yyh1630.ElemContainerState(yyj1630)
			if r.TryDecodeAsNil() {
				yyv1630[yyj1630] = NodeUtilization{}
			} else {
				yyv1631 := &yyv1630[yyj1630]
				yyv1631.CodecDecodeSelf(d)
			}

		}
		if yyrt1630 {
			for ; yyj1630 < yyl1630; yyj1630++ {
				yyv1630 = append(yyv1630, NodeUtilization{})
				yyh1630.ElemContainerState(yyj1630)
				if r.TryDecodeAsNil() {
					yyv1630[yyj1630] = NodeUtilization{}
				} else {
					yyv1632 := &yyv1630[yyj1630]
					yyv1632.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1630 := 0
		for ; !r.CheckBreak(); yyj1630++ {

			if yyj1630 >= len(yyv1630) {
				yyv1630 = append(yyv1630, NodeUtilization{}) // var yyz1630 NodeUtilization
				yyc1630 = true
			}
			yyh1630.ElemContainerState(yyj1630)
			if yyj1630 < len(yyv1630) {
				if r.TryDecodeAsNil() {
					yyv1630[yyj1630] = NodeUtilization{}
				} else {
					yyv1633 := &yyv1630[yyj1630]
					yyv1633.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1630 < len(yyv1630) {
			yyv1630 = yyv1630[:yyj1630]
			yyc1630 = true
		} else if yyj1630 == 0 && yyv1630 == nil {
			yyv1630 = []NodeUtilization{}
			yyc1630 = true
		}
	}
	yyh1630.End()
	if yyc1630 {
		*v = yyv1630
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1634 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1635 := &yyv1634
		yy1635.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1636 := *v
	yyh1636, yyl1636 := z.DecSliceHelperStart()
	var yyc1636 bool
	if yyl1636 == 0 {
		if yyv1636 == nil {
			yyv1636 = []ClusterAutoscaler{}
			yyc1636 = true
		} else if len(yyv1636) != 0 {
			yyv1636 = yyv1636[:0]
			yyc1636 = true
		}
	} else if yyl1636 > 0 {
		var yyrr1636, yyrl1636 int
		var yyrt1636 bool
		if yyl1636 > cap(yyv1636) {

			yyrg1636 := len(yyv1636) > 0
			yyv21636 := yyv1636
			yyrl1636, yyrt1636 = z.DecInferLen(yyl1636, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1636 {
				if yyrl1636 <= cap(yyv1636) {
					yyv1636 = yyv1636[:yyrl1636]
				} else {
					yyv1636 = make([]ClusterAutoscaler, yyrl1636)
				}
			} else {
				yyv1636 = make([]ClusterAutoscaler, yyrl1636)
			}
			yyc1636 = true
			yyrr1636 = len(yyv1636)
			if yyrg1636 {
				copy(yyv1636, yyv21636)
			}
		} else if yyl1636 != len(yyv1636) {
			yyv1636 = yyv1636[:yyl1636]
			yyc1636 = true
		}
		yyj1636 := 0
		for ; yyj1636 < yyrr1636; yyj1636++ {
			yyh1636.ElemContainerState(yyj1636)
			if r.TryDecodeAsNil() {
				yyv1636[yyj1636] = ClusterAutoscaler{}
			} else {
				yyv1637 := &yyv1636[yyj1636]
				yyv1637.CodecDecodeSelf(d)
			}

		}
		if yyrt1636 {
			for ; yyj1636 < yyl1636; yyj1636++ {
				yyv1636 = append(yyv1636, ClusterAutoscaler{})
				yyh1636.ElemContainerState(yyj1636)
				if r.TryDecodeAsNil() {
					yyv1636[yyj1636] = ClusterAutoscaler{}
				} else {
					yyv1638 := &yyv1636[yyj1636]
					yyv1638.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1636 := 0
		for ; !r.CheckBreak(); yyj1636++ {

			if yyj1636 >= len(yyv1636) {
				yyv1636 = append(yyv1636, ClusterAutoscaler{}) // var yyz1636 ClusterAutoscaler
				yyc1636 = true
			}
			yyh1636.ElemContainerState(yyj1636)
			if yyj1636 < len(yyv1636) {
				if r.TryDecodeAsNil() {
					yyv1636[yyj1636] = ClusterAutoscaler{}
				} else {
					yyv1639 := &yyv1636[yyj1636]
					yyv1639.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1636 < len(yyv1636) {
			yyv1636 = yyv1636[:yyj1636]
			yyc1636 = true
		} else if yyj1636 == 0 && yyv1636 == nil {
			yyv1636 = []ClusterAutoscaler{}
			yyc1636 = true
		}
	}
	yyh1636.End()
	if yyc1636 {
		*v = yyv1636
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1640 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1641 := &yyv1640
		yy1641.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1642 := *v
	yyh1642, yyl1642 := z.DecSliceHelperStart()
	var yyc1642 bool
	if yyl1642 == 0 {
		if yyv1642 == nil {
			yyv1642 = []LabelSelectorRequirement{}
			yyc1642 = true
		} else if len(yyv1642) != 0 {
			yyv1642 = yyv1642[:0]
			yyc1642 = true
		}
	} else if yyl1642 > 0 {
		var yyrr1642, yyrl1642 int
		var yyrt1642 bool
		if yyl1642 > cap(yyv1642) {

			yyrg1642 := len(yyv1642) > 0
			yyv21642 := yyv1642
			yyrl1642, yyrt1642 = z.DecInferLen(yyl1642, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1642 {
				if yyrl1642 <= cap(yyv1642) {
					yyv1642 = yyv1642[:yyrl1642]
				} else {
					yyv1642 = make([]LabelSelectorRequirement, yyrl1642)
				}
			} else {
				yyv1642 = make([]LabelSelectorRequirement, yyrl1642)
			}
			yyc1642 = true
			yyrr1642 = len(yyv1642)
			if yyrg1642 {
				copy(yyv1642, yyv21642)
			}
		} else if yyl1642 != len(yyv1642) {
			yyv1642 = yyv1642[:yyl1642]
			yyc1642 = true
		}
		yyj1642 := 0
		for ; yyj1642 < yyrr1642; yyj1642++ {
			yyh1642.ElemContainerState(yyj1642)
			if r.TryDecodeAsNil() {
				yyv1642[yyj1642] = LabelSelectorRequirement{}
			} else {
				yyv1643 := &yyv1642[yyj1642]
				yyv1643.CodecDecodeSelf(d)
			}

		}
		if yyrt1642 {
			for ; yyj1642 < yyl1642; yyj1642++ {
				yyv1642 = append(yyv1642, LabelSelectorRequirement{})
				yyh1642.ElemContainerState(yyj1642)
				if r.TryDecodeAsNil() {
					yyv1642[yyj1642] = LabelSelectorRequirement{}
				} else {
					yyv1644 := &yyv1642[yyj1642]
					yyv1644.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1642 := 0
		for ; !r.CheckBreak(); yyj1642++ {

			if yyj1642 >= len(yyv1642) {
				yyv1642 = append(yyv1642, LabelSelectorRequirement{}) // var yyz1642 LabelSelectorRequirement
				yyc1642 = true
			}
			yyh1642.ElemContainerState(yyj1642)
			if yyj1642 < len(yyv1642) {
				if r.TryDecodeAsNil() {
					yyv1642[yyj1642] = LabelSelectorRequirement{}
				} else {
					yyv1645 := &yyv1642[yyj1642]
					yyv1645.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1642 < len(yyv1642) {
			yyv1642 = yyv1642[:yyj1642]
			yyc1642 = true
		} else if yyj1642 == 0 && yyv1642 == nil {
			yyv1642 = []LabelSelectorRequirement{}
			yyc1642 = true
		}
	}
	yyh1642.End()
	if yyc1642 {
		*v = yyv1642
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1646 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1647 := &yyv1646
		yy1647.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1648 := *v
	yyh1648, yyl1648 := z.DecSliceHelperStart()
	var yyc1648 bool
	if yyl1648 == 0 {
		if yyv1648 == nil {
			yyv1648 = []ReplicaSet{}
			yyc1648 = true
		} else if len(yyv1648) != 0 {
			yyv1648 = yyv1648[:0]
			yyc1648 = true
		}
	} else if yyl1648 > 0 {
		var yyrr1648, yyrl1648 int
		var yyrt1648 bool
		if yyl1648 > cap(yyv1648) {

			yyrg1648 := len(yyv1648) > 0
			yyv21648 := yyv1648
			yyrl1648, yyrt1648 = z.DecInferLen(yyl1648, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1648 {
				if yyrl1648 <= cap(yyv1648) {
					yyv1648 = yyv1648[:yyrl1648]
				} else {
					yyv1648 = make([]ReplicaSet, yyrl1648)
				}
			} else {
				yyv1648 = make([]ReplicaSet, yyrl1648)
			}
			yyc1648 = true
			yyrr1648 = len(yyv1648)
			if yyrg1648 {
				copy(yyv1648, yyv21648)
			}
		} else if yyl1648 != len(yyv1648) {
			yyv1648 = yyv1648[:yyl1648]
			yyc1648 = true
		}
		yyj1648 := 0
		for ; yyj1648 < yyrr1648; yyj1648++ {
			yyh1648.ElemContainerState(yyj1648)
			if r.TryDecodeAsNil() {
				yyv1648[yyj1648] = ReplicaSet{}
			} else {
				yyv1649 := &yyv1648[yyj1648]
				yyv1649.CodecDecodeSelf(d)
			}

		}
		if yyrt1648 {
			for ; yyj1648 < yyl1648; yyj1648++ {
				yyv1648 = append(yyv1648, ReplicaSet{})
				yyh1648.ElemContainerState(yyj1648)
				if r.TryDecodeAsNil() {
					yyv1648[yyj1648] = ReplicaSet{}
				} else {
					yyv1650 := &yyv1648[yyj1648]
					yyv1650.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1648 := 0
		for ; !r.CheckBreak(); yyj1648++ {

			if yyj1648 >= len(yyv1648) {
				yyv1648 = append(yyv1648, ReplicaSet{}) // var yyz1648 ReplicaSet
				yyc1648 = true
			}
			yyh1648.ElemContainerState(yyj1648)
			if yyj1648 < len(yyv1648) {
				if r.TryDecodeAsNil() {
					yyv1648[yyj1648] = ReplicaSet{}
				} else {
					yyv1651 := &yyv1648[yyj1648]
					yyv1651.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1648 < len(yyv1648) {
			yyv1648 = yyv1648[:yyj1648]
			yyc1648 = true
		} else if yyj1648 == 0 && yyv1648 == nil {
			yyv1648 = []ReplicaSet{}
			yyc1648 = true
		}
	}
	yyh1648.End()
	if yyc1648 {
		*v = yyv1648
	}
}
