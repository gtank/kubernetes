/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	pkg5_pkix "crypto/x509/pkix"
	pkg6_asn1 "encoding/asn1"
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg7_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg4_user "k8s.io/kubernetes/pkg/auth/user"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg9_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg8_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg5_pkix.Name
		var v1 pkg6_asn1.ObjectIdentifier
		var v2 pkg7_resource.Quantity
		var v3 pkg1_unversioned.TypeMeta
		var v4 pkg2_v1.ObjectMeta
		var v5 pkg4_user.Info
		var v6 pkg3_types.UID
		var v7 pkg9_intstr.IntOrString
		var v8 pkg8_inf.Dec
		var v9 time.Time
		_, _, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8, v9
	}
}

func (x *CertificateSigningRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yy10.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy11 := &x.ObjectMeta
					yy11.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy13 := &x.Spec
				yy13.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy14 := &x.Spec
				yy14.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy16 := &x.Status
				yy16.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy17 := &x.Status
				yy17.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym18 := z.DecBinary()
	_ = yym18
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct19 := r.ContainerType()
		if yyct19 == codecSelferValueTypeMap1234 {
			yyl19 := r.ReadMapStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl19, d)
			}
		} else if yyct19 == codecSelferValueTypeArray1234 {
			yyl19 := r.ReadArrayStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl19, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys20Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys20Slc
	var yyhl20 bool = l >= 0
	for yyj20 := 0; ; yyj20++ {
		if yyhl20 {
			if yyj20 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys20Slc = r.DecodeBytes(yys20Slc, true, true)
		yys20 := string(yys20Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys20 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv23 := &x.ObjectMeta
				yyv23.CodecDecodeSelf(d)
			}
		case "Spec":
			if r.TryDecodeAsNil() {
				x.Spec = CertificateSigningRequestSpec{}
			} else {
				yyv24 := &x.Spec
				yyv24.CodecDecodeSelf(d)
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = CertificateSigningRequestStatus{}
			} else {
				yyv25 := &x.Status
				yyv25.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys20)
		} // end switch yys20
	} // end for yyj20
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv29 := &x.ObjectMeta
		yyv29.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = CertificateSigningRequestSpec{}
	} else {
		yyv30 := &x.Spec
		yyv30.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = CertificateSigningRequestStatus{}
	} else {
		yyv31 := &x.Status
		yyv31.CodecDecodeSelf(d)
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CertificateSigningRequestSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym32 := z.EncBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep33 := !z.EncBinary()
			yy2arr33 := z.EncBasicHandle().StructToArray
			var yyq33 [3]bool
			_, _, _ = yysep33, yyq33, yy2arr33
			const yyr33 bool = false
			yyq33[1] = x.User != nil
			yyq33[2] = len(x.ExtraInfo) != 0
			var yynn33 int
			if yyr33 || yy2arr33 {
				r.EncodeArrayStart(3)
			} else {
				yynn33 = 1
				for _, b := range yyq33 {
					if b {
						yynn33++
					}
				}
				r.EncodeMapStart(yynn33)
				yynn33 = 0
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CertificateRequest))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("request"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym36 := z.EncBinary()
				_ = yym36
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CertificateRequest))
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[1] {
					if x.User == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else if z.HasExtensions() && z.EncExt(x.User) {
						} else {
							z.EncFallback(x.User)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.User == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else if z.HasExtensions() && z.EncExt(x.User) {
						} else {
							z.EncFallback(x.User)
						}
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[2] {
					if x.ExtraInfo == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncSliceStringV(x.ExtraInfo, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("extrainfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExtraInfo == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncSliceStringV(x.ExtraInfo, false, e)
						}
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequestSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequestSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "request":
			if r.TryDecodeAsNil() {
				x.CertificateRequest = ""
			} else {
				x.CertificateRequest = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = nil
			} else {
				yyv47 := &x.User
				yym48 := z.DecBinary()
				_ = yym48
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv47) {
				} else {
					z.DecFallback(yyv47, true)
				}
			}
		case "extrainfo":
			if r.TryDecodeAsNil() {
				x.ExtraInfo = nil
			} else {
				yyv49 := &x.ExtraInfo
				yym50 := z.DecBinary()
				_ = yym50
				if false {
				} else {
					z.F.DecSliceStringX(yyv49, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequestSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj51 int
	var yyb51 bool
	var yyhl51 bool = l >= 0
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CertificateRequest = ""
	} else {
		x.CertificateRequest = string(r.DecodeString())
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = nil
	} else {
		yyv53 := &x.User
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv53) {
		} else {
			z.DecFallback(yyv53, true)
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExtraInfo = nil
	} else {
		yyv55 := &x.ExtraInfo
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			z.F.DecSliceStringX(yyv55, false, d)
		}
	}
	for {
		yyj51++
		if yyhl51 {
			yyb51 = yyj51 > l
		} else {
			yyb51 = r.CheckBreak()
		}
		if yyb51 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj51-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CertificateSigningRequestStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym57 := z.EncBinary()
		_ = yym57
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep58 := !z.EncBinary()
			yy2arr58 := z.EncBasicHandle().StructToArray
			var yyq58 [8]bool
			_, _, _ = yysep58, yyq58, yy2arr58
			const yyr58 bool = false
			yyq58[1] = x.Reason != ""
			yyq58[2] = x.Message != ""
			yyq58[3] = x.Certificate != ""
			yyq58[4] = x.Fingerprint != ""
			yyq58[5] = true
			yyq58[6] = len(x.Hostnames) != 0
			yyq58[7] = len(x.IPAddresses) != 0
			var yynn58 int
			if yyr58 || yy2arr58 {
				r.EncodeArrayStart(8)
			} else {
				yynn58 = 1
				for _, b := range yyq58 {
					if b {
						yynn58++
					}
				}
				r.EncodeMapStart(yynn58)
				yynn58 = 0
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym60 := z.EncBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym61 := z.EncBinary()
				_ = yym61
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[1] {
					yym63 := z.EncBinary()
					_ = yym63
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq58[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[2] {
					yym66 := z.EncBinary()
					_ = yym66
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq58[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[3] {
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Certificate))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq58[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("certificate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym70 := z.EncBinary()
					_ = yym70
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Certificate))
					}
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[4] {
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Fingerprint))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq58[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fingerprint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym73 := z.EncBinary()
					_ = yym73
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Fingerprint))
					}
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[5] {
					yy75 := &x.Subject
					yym76 := z.EncBinary()
					_ = yym76
					if false {
					} else if z.HasExtensions() && z.EncExt(yy75) {
					} else {
						z.EncFallback(yy75)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq58[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy77 := &x.Subject
					yym78 := z.EncBinary()
					_ = yym78
					if false {
					} else if z.HasExtensions() && z.EncExt(yy77) {
					} else {
						z.EncFallback(yy77)
					}
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[6] {
					if x.Hostnames == nil {
						r.EncodeNil()
					} else {
						yym80 := z.EncBinary()
						_ = yym80
						if false {
						} else {
							z.F.EncSliceStringV(x.Hostnames, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq58[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostnames"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hostnames == nil {
						r.EncodeNil()
					} else {
						yym81 := z.EncBinary()
						_ = yym81
						if false {
						} else {
							z.F.EncSliceStringV(x.Hostnames, false, e)
						}
					}
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[7] {
					if x.IPAddresses == nil {
						r.EncodeNil()
					} else {
						yym83 := z.EncBinary()
						_ = yym83
						if false {
						} else {
							z.F.EncSliceStringV(x.IPAddresses, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq58[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ipaddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.IPAddresses == nil {
						r.EncodeNil()
					} else {
						yym84 := z.EncBinary()
						_ = yym84
						if false {
						} else {
							z.F.EncSliceStringV(x.IPAddresses, false, e)
						}
					}
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequestStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym85 := z.DecBinary()
	_ = yym85
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct86 := r.ContainerType()
		if yyct86 == codecSelferValueTypeMap1234 {
			yyl86 := r.ReadMapStart()
			if yyl86 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl86, d)
			}
		} else if yyct86 == codecSelferValueTypeArray1234 {
			yyl86 := r.ReadArrayStart()
			if yyl86 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl86, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequestStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys87Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys87Slc
	var yyhl87 bool = l >= 0
	for yyj87 := 0; ; yyj87++ {
		if yyhl87 {
			if yyj87 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys87Slc = r.DecodeBytes(yys87Slc, true, true)
		yys87 := string(yys87Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys87 {
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "certificate":
			if r.TryDecodeAsNil() {
				x.Certificate = ""
			} else {
				x.Certificate = string(r.DecodeString())
			}
		case "fingerprint":
			if r.TryDecodeAsNil() {
				x.Fingerprint = ""
			} else {
				x.Fingerprint = string(r.DecodeString())
			}
		case "subject":
			if r.TryDecodeAsNil() {
				x.Subject = pkg5_pkix.Name{}
			} else {
				yyv93 := &x.Subject
				yym94 := z.DecBinary()
				_ = yym94
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv93) {
				} else {
					z.DecFallback(yyv93, false)
				}
			}
		case "hostnames":
			if r.TryDecodeAsNil() {
				x.Hostnames = nil
			} else {
				yyv95 := &x.Hostnames
				yym96 := z.DecBinary()
				_ = yym96
				if false {
				} else {
					z.F.DecSliceStringX(yyv95, false, d)
				}
			}
		case "ipaddresses":
			if r.TryDecodeAsNil() {
				x.IPAddresses = nil
			} else {
				yyv97 := &x.IPAddresses
				yym98 := z.DecBinary()
				_ = yym98
				if false {
				} else {
					z.F.DecSliceStringX(yyv97, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys87)
		} // end switch yys87
	} // end for yyj87
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequestStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj99 int
	var yyb99 bool
	var yyhl99 bool = l >= 0
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Certificate = ""
	} else {
		x.Certificate = string(r.DecodeString())
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Fingerprint = ""
	} else {
		x.Fingerprint = string(r.DecodeString())
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subject = pkg5_pkix.Name{}
	} else {
		yyv105 := &x.Subject
		yym106 := z.DecBinary()
		_ = yym106
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv105) {
		} else {
			z.DecFallback(yyv105, false)
		}
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostnames = nil
	} else {
		yyv107 := &x.Hostnames
		yym108 := z.DecBinary()
		_ = yym108
		if false {
		} else {
			z.F.DecSliceStringX(yyv107, false, d)
		}
	}
	yyj99++
	if yyhl99 {
		yyb99 = yyj99 > l
	} else {
		yyb99 = r.CheckBreak()
	}
	if yyb99 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IPAddresses = nil
	} else {
		yyv109 := &x.IPAddresses
		yym110 := z.DecBinary()
		_ = yym110
		if false {
		} else {
			z.F.DecSliceStringX(yyv109, false, d)
		}
	}
	for {
		yyj99++
		if yyhl99 {
			yyb99 = yyj99 > l
		} else {
			yyb99 = r.CheckBreak()
		}
		if yyb99 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj99-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CertificateSigningRequestList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym111 := z.EncBinary()
		_ = yym111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep112 := !z.EncBinary()
			yy2arr112 := z.EncBasicHandle().StructToArray
			var yyq112 [4]bool
			_, _, _ = yysep112, yyq112, yy2arr112
			const yyr112 bool = false
			yyq112[0] = x.Kind != ""
			yyq112[1] = x.APIVersion != ""
			yyq112[2] = true
			yyq112[3] = len(x.Items) != 0
			var yynn112 int
			if yyr112 || yy2arr112 {
				r.EncodeArrayStart(4)
			} else {
				yynn112 = 0
				for _, b := range yyq112 {
					if b {
						yynn112++
					}
				}
				r.EncodeMapStart(yynn112)
				yynn112 = 0
			}
			if yyr112 || yy2arr112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq112[0] {
					yym114 := z.EncBinary()
					_ = yym114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq112[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym115 := z.EncBinary()
					_ = yym115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr112 || yy2arr112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq112[1] {
					yym117 := z.EncBinary()
					_ = yym117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq112[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym118 := z.EncBinary()
					_ = yym118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr112 || yy2arr112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq112[2] {
					yy120 := &x.ListMeta
					yym121 := z.EncBinary()
					_ = yym121
					if false {
					} else if z.HasExtensions() && z.EncExt(yy120) {
					} else {
						z.EncFallback(yy120)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq112[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy122 := &x.ListMeta
					yym123 := z.EncBinary()
					_ = yym123
					if false {
					} else if z.HasExtensions() && z.EncExt(yy122) {
					} else {
						z.EncFallback(yy122)
					}
				}
			}
			if yyr112 || yy2arr112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq112[3] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym125 := z.EncBinary()
						_ = yym125
						if false {
						} else {
							h.encSliceCertificateSigningRequest(([]CertificateSigningRequest)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq112[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym126 := z.EncBinary()
						_ = yym126
						if false {
						} else {
							h.encSliceCertificateSigningRequest(([]CertificateSigningRequest)(x.Items), e)
						}
					}
				}
			}
			if yyr112 || yy2arr112 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequestList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym127 := z.DecBinary()
	_ = yym127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct128 := r.ContainerType()
		if yyct128 == codecSelferValueTypeMap1234 {
			yyl128 := r.ReadMapStart()
			if yyl128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl128, d)
			}
		} else if yyct128 == codecSelferValueTypeArray1234 {
			yyl128 := r.ReadArrayStart()
			if yyl128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequestList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys129Slc
	var yyhl129 bool = l >= 0
	for yyj129 := 0; ; yyj129++ {
		if yyhl129 {
			if yyj129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys129Slc = r.DecodeBytes(yys129Slc, true, true)
		yys129 := string(yys129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys129 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv132 := &x.ListMeta
				yym133 := z.DecBinary()
				_ = yym133
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv132) {
				} else {
					z.DecFallback(yyv132, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv134 := &x.Items
				yym135 := z.DecBinary()
				_ = yym135
				if false {
				} else {
					h.decSliceCertificateSigningRequest((*[]CertificateSigningRequest)(yyv134), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys129)
		} // end switch yys129
	} // end for yyj129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequestList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj136 int
	var yyb136 bool
	var yyhl136 bool = l >= 0
	yyj136++
	if yyhl136 {
		yyb136 = yyj136 > l
	} else {
		yyb136 = r.CheckBreak()
	}
	if yyb136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj136++
	if yyhl136 {
		yyb136 = yyj136 > l
	} else {
		yyb136 = r.CheckBreak()
	}
	if yyb136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj136++
	if yyhl136 {
		yyb136 = yyj136 > l
	} else {
		yyb136 = r.CheckBreak()
	}
	if yyb136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv139 := &x.ListMeta
		yym140 := z.DecBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv139) {
		} else {
			z.DecFallback(yyv139, false)
		}
	}
	yyj136++
	if yyhl136 {
		yyb136 = yyj136 > l
	} else {
		yyb136 = r.CheckBreak()
	}
	if yyb136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv141 := &x.Items
		yym142 := z.DecBinary()
		_ = yym142
		if false {
		} else {
			h.decSliceCertificateSigningRequest((*[]CertificateSigningRequest)(yyv141), d)
		}
	}
	for {
		yyj136++
		if yyhl136 {
			yyb136 = yyj136 > l
		} else {
			yyb136 = r.CheckBreak()
		}
		if yyb136 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj136-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [1]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.Replicas != 0
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(1)
			} else {
				yynn144 = 0
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym148 := z.DecBinary()
	_ = yym148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct149 := r.ContainerType()
		if yyct149 == codecSelferValueTypeMap1234 {
			yyl149 := r.ReadMapStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl149, d)
			}
		} else if yyct149 == codecSelferValueTypeArray1234 {
			yyl149 := r.ReadArrayStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys150Slc
	var yyhl150 bool = l >= 0
	for yyj150 := 0; ; yyj150++ {
		if yyhl150 {
			if yyj150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys150Slc = r.DecodeBytes(yys150Slc, true, true)
		yys150 := string(yys150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys150 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys150)
		} // end switch yys150
	} // end for yyj150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj152 int
	var yyb152 bool
	var yyhl152 bool = l >= 0
	yyj152++
	if yyhl152 {
		yyb152 = yyj152 > l
	} else {
		yyb152 = r.CheckBreak()
	}
	if yyb152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj152++
		if yyhl152 {
			yyb152 = yyj152 > l
		} else {
			yyb152 = r.CheckBreak()
		}
		if yyb152 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj152-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym154 := z.EncBinary()
		_ = yym154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep155 := !z.EncBinary()
			yy2arr155 := z.EncBasicHandle().StructToArray
			var yyq155 [2]bool
			_, _, _ = yysep155, yyq155, yy2arr155
			const yyr155 bool = false
			yyq155[1] = len(x.Selector) != 0
			var yynn155 int
			if yyr155 || yy2arr155 {
				r.EncodeArrayStart(2)
			} else {
				yynn155 = 1
				for _, b := range yyq155 {
					if b {
						yynn155++
					}
				}
				r.EncodeMapStart(yynn155)
				yynn155 = 0
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym157 := z.EncBinary()
				_ = yym157
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym158 := z.EncBinary()
				_ = yym158
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym160 := z.EncBinary()
						_ = yym160
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq155[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym161 := z.EncBinary()
						_ = yym161
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym162 := z.DecBinary()
	_ = yym162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct163 := r.ContainerType()
		if yyct163 == codecSelferValueTypeMap1234 {
			yyl163 := r.ReadMapStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl163, d)
			}
		} else if yyct163 == codecSelferValueTypeArray1234 {
			yyl163 := r.ReadArrayStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys164Slc
	var yyhl164 bool = l >= 0
	for yyj164 := 0; ; yyj164++ {
		if yyhl164 {
			if yyj164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys164Slc = r.DecodeBytes(yys164Slc, true, true)
		yys164 := string(yys164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys164 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv166 := &x.Selector
				yym167 := z.DecBinary()
				_ = yym167
				if false {
				} else {
					z.F.DecMapStringStringX(yyv166, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys164)
		} // end switch yys164
	} // end for yyj164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj168 int
	var yyb168 bool
	var yyhl168 bool = l >= 0
	yyj168++
	if yyhl168 {
		yyb168 = yyj168 > l
	} else {
		yyb168 = r.CheckBreak()
	}
	if yyb168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj168++
	if yyhl168 {
		yyb168 = yyj168 > l
	} else {
		yyb168 = r.CheckBreak()
	}
	if yyb168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv170 := &x.Selector
		yym171 := z.DecBinary()
		_ = yym171
		if false {
		} else {
			z.F.DecMapStringStringX(yyv170, false, d)
		}
	}
	for {
		yyj168++
		if yyhl168 {
			yyb168 = yyj168 > l
		} else {
			yyb168 = r.CheckBreak()
		}
		if yyb168 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj168-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym172 := z.EncBinary()
		_ = yym172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep173 := !z.EncBinary()
			yy2arr173 := z.EncBasicHandle().StructToArray
			var yyq173 [5]bool
			_, _, _ = yysep173, yyq173, yy2arr173
			const yyr173 bool = false
			yyq173[0] = x.Kind != ""
			yyq173[1] = x.APIVersion != ""
			yyq173[2] = true
			yyq173[3] = true
			yyq173[4] = true
			var yynn173 int
			if yyr173 || yy2arr173 {
				r.EncodeArrayStart(5)
			} else {
				yynn173 = 0
				for _, b := range yyq173 {
					if b {
						yynn173++
					}
				}
				r.EncodeMapStart(yynn173)
				yynn173 = 0
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[0] {
					yym175 := z.EncBinary()
					_ = yym175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym176 := z.EncBinary()
					_ = yym176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[1] {
					yym178 := z.EncBinary()
					_ = yym178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq173[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[2] {
					yy181 := &x.ObjectMeta
					yy181.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy182 := &x.ObjectMeta
					yy182.CodecEncodeSelf(e)
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[3] {
					yy184 := &x.Spec
					yy184.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy185 := &x.Spec
					yy185.CodecEncodeSelf(e)
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[4] {
					yy187 := &x.Status
					yy187.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy188 := &x.Status
					yy188.CodecEncodeSelf(e)
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym189 := z.DecBinary()
	_ = yym189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct190 := r.ContainerType()
		if yyct190 == codecSelferValueTypeMap1234 {
			yyl190 := r.ReadMapStart()
			if yyl190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl190, d)
			}
		} else if yyct190 == codecSelferValueTypeArray1234 {
			yyl190 := r.ReadArrayStart()
			if yyl190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys191Slc
	var yyhl191 bool = l >= 0
	for yyj191 := 0; ; yyj191++ {
		if yyhl191 {
			if yyj191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys191Slc = r.DecodeBytes(yys191Slc, true, true)
		yys191 := string(yys191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys191 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv194 := &x.ObjectMeta
				yyv194.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv195 := &x.Spec
				yyv195.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv196 := &x.Status
				yyv196.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys191)
		} // end switch yys191
	} // end for yyj191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj197 int
	var yyb197 bool
	var yyhl197 bool = l >= 0
	yyj197++
	if yyhl197 {
		yyb197 = yyj197 > l
	} else {
		yyb197 = r.CheckBreak()
	}
	if yyb197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj197++
	if yyhl197 {
		yyb197 = yyj197 > l
	} else {
		yyb197 = r.CheckBreak()
	}
	if yyb197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj197++
	if yyhl197 {
		yyb197 = yyj197 > l
	} else {
		yyb197 = r.CheckBreak()
	}
	if yyb197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv200 := &x.ObjectMeta
		yyv200.CodecDecodeSelf(d)
	}
	yyj197++
	if yyhl197 {
		yyb197 = yyj197 > l
	} else {
		yyb197 = r.CheckBreak()
	}
	if yyb197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv201 := &x.Spec
		yyv201.CodecDecodeSelf(d)
	}
	yyj197++
	if yyhl197 {
		yyb197 = yyj197 > l
	} else {
		yyb197 = r.CheckBreak()
	}
	if yyb197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv202 := &x.Status
		yyv202.CodecDecodeSelf(d)
	}
	for {
		yyj197++
		if yyhl197 {
			yyb197 = yyj197 > l
		} else {
			yyb197 = r.CheckBreak()
		}
		if yyb197 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj197-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym203 := z.EncBinary()
		_ = yym203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep204 := !z.EncBinary()
			yy2arr204 := z.EncBasicHandle().StructToArray
			var yyq204 [2]bool
			_, _, _ = yysep204, yyq204, yy2arr204
			const yyr204 bool = false
			yyq204[0] = x.Kind != ""
			yyq204[1] = x.APIVersion != ""
			var yynn204 int
			if yyr204 || yy2arr204 {
				r.EncodeArrayStart(2)
			} else {
				yynn204 = 0
				for _, b := range yyq204 {
					if b {
						yynn204++
					}
				}
				r.EncodeMapStart(yynn204)
				yynn204 = 0
			}
			if yyr204 || yy2arr204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq204[0] {
					yym206 := z.EncBinary()
					_ = yym206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq204[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym207 := z.EncBinary()
					_ = yym207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr204 || yy2arr204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq204[1] {
					yym209 := z.EncBinary()
					_ = yym209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq204[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym210 := z.EncBinary()
					_ = yym210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr204 || yy2arr204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym211 := z.DecBinary()
	_ = yym211
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct212 := r.ContainerType()
		if yyct212 == codecSelferValueTypeMap1234 {
			yyl212 := r.ReadMapStart()
			if yyl212 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl212, d)
			}
		} else if yyct212 == codecSelferValueTypeArray1234 {
			yyl212 := r.ReadArrayStart()
			if yyl212 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl212, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys213Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys213Slc
	var yyhl213 bool = l >= 0
	for yyj213 := 0; ; yyj213++ {
		if yyhl213 {
			if yyj213 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys213Slc = r.DecodeBytes(yys213Slc, true, true)
		yys213 := string(yys213Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys213 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys213)
		} // end switch yys213
	} // end for yyj213
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj216 int
	var yyb216 bool
	var yyhl216 bool = l >= 0
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj216++
		if yyhl216 {
			yyb216 = yyj216 > l
		} else {
			yyb216 = r.CheckBreak()
		}
		if yyb216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym219 := z.EncBinary()
		_ = yym219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep220 := !z.EncBinary()
			yy2arr220 := z.EncBasicHandle().StructToArray
			var yyq220 [4]bool
			_, _, _ = yysep220, yyq220, yy2arr220
			const yyr220 bool = false
			yyq220[0] = x.Kind != ""
			yyq220[1] = x.Name != ""
			yyq220[2] = x.APIVersion != ""
			yyq220[3] = x.Subresource != ""
			var yynn220 int
			if yyr220 || yy2arr220 {
				r.EncodeArrayStart(4)
			} else {
				yynn220 = 0
				for _, b := range yyq220 {
					if b {
						yynn220++
					}
				}
				r.EncodeMapStart(yynn220)
				yynn220 = 0
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[0] {
					yym222 := z.EncBinary()
					_ = yym222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq220[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym223 := z.EncBinary()
					_ = yym223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[1] {
					yym225 := z.EncBinary()
					_ = yym225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq220[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym226 := z.EncBinary()
					_ = yym226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[2] {
					yym228 := z.EncBinary()
					_ = yym228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq220[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym229 := z.EncBinary()
					_ = yym229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[3] {
					yym231 := z.EncBinary()
					_ = yym231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq220[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym232 := z.EncBinary()
					_ = yym232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym233 := z.DecBinary()
	_ = yym233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct234 := r.ContainerType()
		if yyct234 == codecSelferValueTypeMap1234 {
			yyl234 := r.ReadMapStart()
			if yyl234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl234, d)
			}
		} else if yyct234 == codecSelferValueTypeArray1234 {
			yyl234 := r.ReadArrayStart()
			if yyl234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys235Slc
	var yyhl235 bool = l >= 0
	for yyj235 := 0; ; yyj235++ {
		if yyhl235 {
			if yyj235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys235Slc = r.DecodeBytes(yys235Slc, true, true)
		yys235 := string(yys235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys235 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys235)
		} // end switch yys235
	} // end for yyj235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj240 int
	var yyb240 bool
	var yyhl240 bool = l >= 0
	yyj240++
	if yyhl240 {
		yyb240 = yyj240 > l
	} else {
		yyb240 = r.CheckBreak()
	}
	if yyb240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj240++
	if yyhl240 {
		yyb240 = yyj240 > l
	} else {
		yyb240 = r.CheckBreak()
	}
	if yyb240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj240++
	if yyhl240 {
		yyb240 = yyj240 > l
	} else {
		yyb240 = r.CheckBreak()
	}
	if yyb240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj240++
	if yyhl240 {
		yyb240 = yyj240 > l
	} else {
		yyb240 = r.CheckBreak()
	}
	if yyb240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj240++
		if yyhl240 {
			yyb240 = yyj240 > l
		} else {
			yyb240 = r.CheckBreak()
		}
		if yyb240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym245 := z.EncBinary()
		_ = yym245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep246 := !z.EncBinary()
			yy2arr246 := z.EncBasicHandle().StructToArray
			var yyq246 [1]bool
			_, _, _ = yysep246, yyq246, yy2arr246
			const yyr246 bool = false
			var yynn246 int
			if yyr246 || yy2arr246 {
				r.EncodeArrayStart(1)
			} else {
				yynn246 = 1
				for _, b := range yyq246 {
					if b {
						yynn246++
					}
				}
				r.EncodeMapStart(yynn246)
				yynn246 = 0
			}
			if yyr246 || yy2arr246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym248 := z.EncBinary()
				_ = yym248
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym249 := z.EncBinary()
				_ = yym249
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr246 || yy2arr246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym250 := z.DecBinary()
	_ = yym250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct251 := r.ContainerType()
		if yyct251 == codecSelferValueTypeMap1234 {
			yyl251 := r.ReadMapStart()
			if yyl251 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl251, d)
			}
		} else if yyct251 == codecSelferValueTypeArray1234 {
			yyl251 := r.ReadArrayStart()
			if yyl251 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys252Slc
	var yyhl252 bool = l >= 0
	for yyj252 := 0; ; yyj252++ {
		if yyhl252 {
			if yyj252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys252Slc = r.DecodeBytes(yys252Slc, true, true)
		yys252 := string(yys252Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys252 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys252)
		} // end switch yys252
	} // end for yyj252
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj254 int
	var yyb254 bool
	var yyhl254 bool = l >= 0
	yyj254++
	if yyhl254 {
		yyb254 = yyj254 > l
	} else {
		yyb254 = r.CheckBreak()
	}
	if yyb254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int32(r.DecodeInt(32))
	}
	for {
		yyj254++
		if yyhl254 {
			yyb254 = yyj254 > l
		} else {
			yyb254 = r.CheckBreak()
		}
		if yyb254 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj254-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym256 := z.EncBinary()
		_ = yym256
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep257 := !z.EncBinary()
			yy2arr257 := z.EncBasicHandle().StructToArray
			var yyq257 [2]bool
			_, _, _ = yysep257, yyq257, yy2arr257
			const yyr257 bool = false
			var yynn257 int
			if yyr257 || yy2arr257 {
				r.EncodeArrayStart(2)
			} else {
				yynn257 = 2
				for _, b := range yyq257 {
					if b {
						yynn257++
					}
				}
				r.EncodeMapStart(yynn257)
				yynn257 = 0
			}
			if yyr257 || yy2arr257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym259 := z.EncBinary()
				_ = yym259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym260 := z.EncBinary()
				_ = yym260
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr257 || yy2arr257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy262 := &x.TargetValue
				yym263 := z.EncBinary()
				_ = yym263
				if false {
				} else if z.HasExtensions() && z.EncExt(yy262) {
				} else if !yym263 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy262)
				} else {
					z.EncFallback(yy262)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy264 := &x.TargetValue
				yym265 := z.EncBinary()
				_ = yym265
				if false {
				} else if z.HasExtensions() && z.EncExt(yy264) {
				} else if !yym265 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy264)
				} else {
					z.EncFallback(yy264)
				}
			}
			if yyr257 || yy2arr257 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct267 := r.ContainerType()
		if yyct267 == codecSelferValueTypeMap1234 {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if yyct267 == codecSelferValueTypeArray1234 {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys268 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg7_resource.Quantity{}
			} else {
				yyv270 := &x.TargetValue
				yym271 := z.DecBinary()
				_ = yym271
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv270) {
				} else if !yym271 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv270)
				} else {
					z.DecFallback(yyv270, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj272 int
	var yyb272 bool
	var yyhl272 bool = l >= 0
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg7_resource.Quantity{}
	} else {
		yyv274 := &x.TargetValue
		yym275 := z.DecBinary()
		_ = yym275
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv274) {
		} else if !yym275 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv274)
		} else {
			z.DecFallback(yyv274, false)
		}
	}
	for {
		yyj272++
		if yyhl272 {
			yyb272 = yyj272 > l
		} else {
			yyb272 = r.CheckBreak()
		}
		if yyb272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym276 := z.EncBinary()
		_ = yym276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep277 := !z.EncBinary()
			yy2arr277 := z.EncBasicHandle().StructToArray
			var yyq277 [1]bool
			_, _, _ = yysep277, yyq277, yy2arr277
			const yyr277 bool = false
			var yynn277 int
			if yyr277 || yy2arr277 {
				r.EncodeArrayStart(1)
			} else {
				yynn277 = 1
				for _, b := range yyq277 {
					if b {
						yynn277++
					}
				}
				r.EncodeMapStart(yynn277)
				yynn277 = 0
			}
			if yyr277 || yy2arr277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym279 := z.EncBinary()
					_ = yym279
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym280 := z.EncBinary()
					_ = yym280
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr277 || yy2arr277 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym281 := z.DecBinary()
	_ = yym281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct282 := r.ContainerType()
		if yyct282 == codecSelferValueTypeMap1234 {
			yyl282 := r.ReadMapStart()
			if yyl282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl282, d)
			}
		} else if yyct282 == codecSelferValueTypeArray1234 {
			yyl282 := r.ReadArrayStart()
			if yyl282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys283Slc
	var yyhl283 bool = l >= 0
	for yyj283 := 0; ; yyj283++ {
		if yyhl283 {
			if yyj283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys283Slc = r.DecodeBytes(yys283Slc, true, true)
		yys283 := string(yys283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys283 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv284 := &x.Items
				yym285 := z.DecBinary()
				_ = yym285
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv284), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys283)
		} // end switch yys283
	} // end for yyj283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj286 int
	var yyb286 bool
	var yyhl286 bool = l >= 0
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv287 := &x.Items
		yym288 := z.DecBinary()
		_ = yym288
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv287), d)
		}
	}
	for {
		yyj286++
		if yyhl286 {
			yyb286 = yyj286 > l
		} else {
			yyb286 = r.CheckBreak()
		}
		if yyb286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym289 := z.EncBinary()
		_ = yym289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep290 := !z.EncBinary()
			yy2arr290 := z.EncBasicHandle().StructToArray
			var yyq290 [2]bool
			_, _, _ = yysep290, yyq290, yy2arr290
			const yyr290 bool = false
			var yynn290 int
			if yyr290 || yy2arr290 {
				r.EncodeArrayStart(2)
			} else {
				yynn290 = 2
				for _, b := range yyq290 {
					if b {
						yynn290++
					}
				}
				r.EncodeMapStart(yynn290)
				yynn290 = 0
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym292 := z.EncBinary()
				_ = yym292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym293 := z.EncBinary()
				_ = yym293
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy295 := &x.CurrentValue
				yym296 := z.EncBinary()
				_ = yym296
				if false {
				} else if z.HasExtensions() && z.EncExt(yy295) {
				} else if !yym296 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy295)
				} else {
					z.EncFallback(yy295)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy297 := &x.CurrentValue
				yym298 := z.EncBinary()
				_ = yym298
				if false {
				} else if z.HasExtensions() && z.EncExt(yy297) {
				} else if !yym298 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy297)
				} else {
					z.EncFallback(yy297)
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct300 := r.ContainerType()
		if yyct300 == codecSelferValueTypeMap1234 {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if yyct300 == codecSelferValueTypeArray1234 {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys301 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg7_resource.Quantity{}
			} else {
				yyv303 := &x.CurrentValue
				yym304 := z.DecBinary()
				_ = yym304
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv303) {
				} else if !yym304 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv303)
				} else {
					z.DecFallback(yyv303, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj305 int
	var yyb305 bool
	var yyhl305 bool = l >= 0
	yyj305++
	if yyhl305 {
		yyb305 = yyj305 > l
	} else {
		yyb305 = r.CheckBreak()
	}
	if yyb305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj305++
	if yyhl305 {
		yyb305 = yyj305 > l
	} else {
		yyb305 = r.CheckBreak()
	}
	if yyb305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg7_resource.Quantity{}
	} else {
		yyv307 := &x.CurrentValue
		yym308 := z.DecBinary()
		_ = yym308
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv307) {
		} else if !yym308 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv307)
		} else {
			z.DecFallback(yyv307, false)
		}
	}
	for {
		yyj305++
		if yyhl305 {
			yyb305 = yyj305 > l
		} else {
			yyb305 = r.CheckBreak()
		}
		if yyb305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym309 := z.EncBinary()
		_ = yym309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep310 := !z.EncBinary()
			yy2arr310 := z.EncBasicHandle().StructToArray
			var yyq310 [1]bool
			_, _, _ = yysep310, yyq310, yy2arr310
			const yyr310 bool = false
			var yynn310 int
			if yyr310 || yy2arr310 {
				r.EncodeArrayStart(1)
			} else {
				yynn310 = 1
				for _, b := range yyq310 {
					if b {
						yynn310++
					}
				}
				r.EncodeMapStart(yynn310)
				yynn310 = 0
			}
			if yyr310 || yy2arr310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym312 := z.EncBinary()
					_ = yym312
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr310 || yy2arr310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym314 := z.DecBinary()
	_ = yym314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct315 := r.ContainerType()
		if yyct315 == codecSelferValueTypeMap1234 {
			yyl315 := r.ReadMapStart()
			if yyl315 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl315, d)
			}
		} else if yyct315 == codecSelferValueTypeArray1234 {
			yyl315 := r.ReadArrayStart()
			if yyl315 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl315, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys316Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys316Slc
	var yyhl316 bool = l >= 0
	for yyj316 := 0; ; yyj316++ {
		if yyhl316 {
			if yyj316 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys316Slc = r.DecodeBytes(yys316Slc, true, true)
		yys316 := string(yys316Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys316 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv317 := &x.Items
				yym318 := z.DecBinary()
				_ = yym318
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv317), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys316)
		} // end switch yys316
	} // end for yyj316
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj319 int
	var yyb319 bool
	var yyhl319 bool = l >= 0
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv320 := &x.Items
		yym321 := z.DecBinary()
		_ = yym321
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv320), d)
		}
	}
	for {
		yyj319++
		if yyhl319 {
			yyb319 = yyj319 > l
		} else {
			yyb319 = r.CheckBreak()
		}
		if yyb319 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj319-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym322 := z.EncBinary()
		_ = yym322
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep323 := !z.EncBinary()
			yy2arr323 := z.EncBasicHandle().StructToArray
			var yyq323 [4]bool
			_, _, _ = yysep323, yyq323, yy2arr323
			const yyr323 bool = false
			yyq323[1] = x.MinReplicas != nil
			yyq323[3] = x.CPUUtilization != nil
			var yynn323 int
			if yyr323 || yy2arr323 {
				r.EncodeArrayStart(4)
			} else {
				yynn323 = 2
				for _, b := range yyq323 {
					if b {
						yynn323++
					}
				}
				r.EncodeMapStart(yynn323)
				yynn323 = 0
			}
			if yyr323 || yy2arr323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy325 := &x.ScaleRef
				yy325.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy326 := &x.ScaleRef
				yy326.CodecEncodeSelf(e)
			}
			if yyr323 || yy2arr323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq323[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy328 := *x.MinReplicas
						yym329 := z.EncBinary()
						_ = yym329
						if false {
						} else {
							r.EncodeInt(int64(yy328))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq323[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy330 := *x.MinReplicas
						yym331 := z.EncBinary()
						_ = yym331
						if false {
						} else {
							r.EncodeInt(int64(yy330))
						}
					}
				}
			}
			if yyr323 || yy2arr323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym333 := z.EncBinary()
				_ = yym333
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym334 := z.EncBinary()
				_ = yym334
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr323 || yy2arr323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq323[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq323[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr323 || yy2arr323 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct337 := r.ContainerType()
		if yyct337 == codecSelferValueTypeMap1234 {
			yyl337 := r.ReadMapStart()
			if yyl337 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl337, d)
			}
		} else if yyct337 == codecSelferValueTypeArray1234 {
			yyl337 := r.ReadArrayStart()
			if yyl337 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys338Slc
	var yyhl338 bool = l >= 0
	for yyj338 := 0; ; yyj338++ {
		if yyhl338 {
			if yyj338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys338Slc = r.DecodeBytes(yys338Slc, true, true)
		yys338 := string(yys338Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys338 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv339 := &x.ScaleRef
				yyv339.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int32)
				}
				yym341 := z.DecBinary()
				_ = yym341
				if false {
				} else {
					*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int32(r.DecodeInt(32))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys338)
		} // end switch yys338
	} // end for yyj338
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj344 int
	var yyb344 bool
	var yyhl344 bool = l >= 0
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv345 := &x.ScaleRef
		yyv345.CodecDecodeSelf(d)
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int32)
		}
		yym347 := z.DecBinary()
		_ = yym347
		if false {
		} else {
			*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int32(r.DecodeInt(32))
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj344++
		if yyhl344 {
			yyb344 = yyj344 > l
		} else {
			yyb344 = r.CheckBreak()
		}
		if yyb344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym350 := z.EncBinary()
		_ = yym350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep351 := !z.EncBinary()
			yy2arr351 := z.EncBasicHandle().StructToArray
			var yyq351 [5]bool
			_, _, _ = yysep351, yyq351, yy2arr351
			const yyr351 bool = false
			yyq351[0] = x.ObservedGeneration != nil
			yyq351[1] = x.LastScaleTime != nil
			yyq351[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn351 int
			if yyr351 || yy2arr351 {
				r.EncodeArrayStart(5)
			} else {
				yynn351 = 2
				for _, b := range yyq351 {
					if b {
						yynn351++
					}
				}
				r.EncodeMapStart(yynn351)
				yynn351 = 0
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy353 := *x.ObservedGeneration
						yym354 := z.EncBinary()
						_ = yym354
						if false {
						} else {
							r.EncodeInt(int64(yy353))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy355 := *x.ObservedGeneration
						yym356 := z.EncBinary()
						_ = yym356
						if false {
						} else {
							r.EncodeInt(int64(yy355))
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym358 := z.EncBinary()
						_ = yym358
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym358 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym358 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym359 := z.EncBinary()
						_ = yym359
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym359 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym359 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym361 := z.EncBinary()
				_ = yym361
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym362 := z.EncBinary()
				_ = yym362
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym364 := z.EncBinary()
				_ = yym364
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym365 := z.EncBinary()
				_ = yym365
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy367 := *x.CurrentCPUUtilizationPercentage
						yym368 := z.EncBinary()
						_ = yym368
						if false {
						} else {
							r.EncodeInt(int64(yy367))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy369 := *x.CurrentCPUUtilizationPercentage
						yym370 := z.EncBinary()
						_ = yym370
						if false {
						} else {
							r.EncodeInt(int64(yy369))
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym371 := z.DecBinary()
	_ = yym371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct372 := r.ContainerType()
		if yyct372 == codecSelferValueTypeMap1234 {
			yyl372 := r.ReadMapStart()
			if yyl372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl372, d)
			}
		} else if yyct372 == codecSelferValueTypeArray1234 {
			yyl372 := r.ReadArrayStart()
			if yyl372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys373Slc
	var yyhl373 bool = l >= 0
	for yyj373 := 0; ; yyj373++ {
		if yyhl373 {
			if yyj373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys373Slc = r.DecodeBytes(yys373Slc, true, true)
		yys373 := string(yys373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys373 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym375 := z.DecBinary()
				_ = yym375
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym377 := z.DecBinary()
				_ = yym377
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym377 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym377 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int32(r.DecodeInt(32))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int32(r.DecodeInt(32))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int32)
				}
				yym381 := z.DecBinary()
				_ = yym381
				if false {
				} else {
					*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys373)
		} // end switch yys373
	} // end for yyj373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj382 int
	var yyb382 bool
	var yyhl382 bool = l >= 0
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym384 := z.DecBinary()
		_ = yym384
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym386 := z.DecBinary()
		_ = yym386
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym386 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym386 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int32(r.DecodeInt(32))
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int32(r.DecodeInt(32))
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int32)
		}
		yym390 := z.DecBinary()
		_ = yym390
		if false {
		} else {
			*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj382++
		if yyhl382 {
			yyb382 = yyj382 > l
		} else {
			yyb382 = r.CheckBreak()
		}
		if yyb382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym391 := z.EncBinary()
		_ = yym391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep392 := !z.EncBinary()
			yy2arr392 := z.EncBasicHandle().StructToArray
			var yyq392 [5]bool
			_, _, _ = yysep392, yyq392, yy2arr392
			const yyr392 bool = false
			yyq392[0] = x.Kind != ""
			yyq392[1] = x.APIVersion != ""
			yyq392[2] = true
			yyq392[3] = true
			yyq392[4] = true
			var yynn392 int
			if yyr392 || yy2arr392 {
				r.EncodeArrayStart(5)
			} else {
				yynn392 = 0
				for _, b := range yyq392 {
					if b {
						yynn392++
					}
				}
				r.EncodeMapStart(yynn392)
				yynn392 = 0
			}
			if yyr392 || yy2arr392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq392[0] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq392[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr392 || yy2arr392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq392[1] {
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq392[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr392 || yy2arr392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq392[2] {
					yy400 := &x.ObjectMeta
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq392[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy401 := &x.ObjectMeta
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr392 || yy2arr392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq392[3] {
					yy403 := &x.Spec
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq392[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy404 := &x.Spec
					yy404.CodecEncodeSelf(e)
				}
			}
			if yyr392 || yy2arr392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq392[4] {
					yy406 := &x.Status
					yy406.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq392[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy407 := &x.Status
					yy407.CodecEncodeSelf(e)
				}
			}
			if yyr392 || yy2arr392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym408 := z.DecBinary()
	_ = yym408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct409 := r.ContainerType()
		if yyct409 == codecSelferValueTypeMap1234 {
			yyl409 := r.ReadMapStart()
			if yyl409 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl409, d)
			}
		} else if yyct409 == codecSelferValueTypeArray1234 {
			yyl409 := r.ReadArrayStart()
			if yyl409 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys410Slc
	var yyhl410 bool = l >= 0
	for yyj410 := 0; ; yyj410++ {
		if yyhl410 {
			if yyj410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys410Slc = r.DecodeBytes(yys410Slc, true, true)
		yys410 := string(yys410Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys410 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv413 := &x.ObjectMeta
				yyv413.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv414 := &x.Spec
				yyv414.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv415 := &x.Status
				yyv415.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys410)
		} // end switch yys410
	} // end for yyj410
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj416 int
	var yyb416 bool
	var yyhl416 bool = l >= 0
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv419 := &x.ObjectMeta
		yyv419.CodecDecodeSelf(d)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv420 := &x.Spec
		yyv420.CodecDecodeSelf(d)
	}
	yyj416++
	if yyhl416 {
		yyb416 = yyj416 > l
	} else {
		yyb416 = r.CheckBreak()
	}
	if yyb416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv421 := &x.Status
		yyv421.CodecDecodeSelf(d)
	}
	for {
		yyj416++
		if yyhl416 {
			yyb416 = yyj416 > l
		} else {
			yyb416 = r.CheckBreak()
		}
		if yyb416 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj416-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym422 := z.EncBinary()
		_ = yym422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep423 := !z.EncBinary()
			yy2arr423 := z.EncBasicHandle().StructToArray
			var yyq423 [4]bool
			_, _, _ = yysep423, yyq423, yy2arr423
			const yyr423 bool = false
			yyq423[0] = x.Kind != ""
			yyq423[1] = x.APIVersion != ""
			yyq423[2] = true
			var yynn423 int
			if yyr423 || yy2arr423 {
				r.EncodeArrayStart(4)
			} else {
				yynn423 = 1
				for _, b := range yyq423 {
					if b {
						yynn423++
					}
				}
				r.EncodeMapStart(yynn423)
				yynn423 = 0
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[0] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[1] {
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[2] {
					yy431 := &x.ListMeta
					yym432 := z.EncBinary()
					_ = yym432
					if false {
					} else if z.HasExtensions() && z.EncExt(yy431) {
					} else {
						z.EncFallback(yy431)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq423[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy433 := &x.ListMeta
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else if z.HasExtensions() && z.EncExt(yy433) {
					} else {
						z.EncFallback(yy433)
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym437 := z.EncBinary()
					_ = yym437
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym438 := z.DecBinary()
	_ = yym438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct439 := r.ContainerType()
		if yyct439 == codecSelferValueTypeMap1234 {
			yyl439 := r.ReadMapStart()
			if yyl439 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl439, d)
			}
		} else if yyct439 == codecSelferValueTypeArray1234 {
			yyl439 := r.ReadArrayStart()
			if yyl439 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys440Slc
	var yyhl440 bool = l >= 0
	for yyj440 := 0; ; yyj440++ {
		if yyhl440 {
			if yyj440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys440Slc = r.DecodeBytes(yys440Slc, true, true)
		yys440 := string(yys440Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys440 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv443 := &x.ListMeta
				yym444 := z.DecBinary()
				_ = yym444
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv443) {
				} else {
					z.DecFallback(yyv443, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv445 := &x.Items
				yym446 := z.DecBinary()
				_ = yym446
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv445), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys440)
		} // end switch yys440
	} // end for yyj440
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj447 int
	var yyb447 bool
	var yyhl447 bool = l >= 0
	yyj447++
	if yyhl447 {
		yyb447 = yyj447 > l
	} else {
		yyb447 = r.CheckBreak()
	}
	if yyb447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj447++
	if yyhl447 {
		yyb447 = yyj447 > l
	} else {
		yyb447 = r.CheckBreak()
	}
	if yyb447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj447++
	if yyhl447 {
		yyb447 = yyj447 > l
	} else {
		yyb447 = r.CheckBreak()
	}
	if yyb447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv450 := &x.ListMeta
		yym451 := z.DecBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv450) {
		} else {
			z.DecFallback(yyv450, false)
		}
	}
	yyj447++
	if yyhl447 {
		yyb447 = yyj447 > l
	} else {
		yyb447 = r.CheckBreak()
	}
	if yyb447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv452 := &x.Items
		yym453 := z.DecBinary()
		_ = yym453
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv452), d)
		}
	}
	for {
		yyj447++
		if yyhl447 {
			yyb447 = yyj447 > l
		} else {
			yyb447 = r.CheckBreak()
		}
		if yyb447 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj447-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym454 := z.EncBinary()
		_ = yym454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep455 := !z.EncBinary()
			yy2arr455 := z.EncBasicHandle().StructToArray
			var yyq455 [5]bool
			_, _, _ = yysep455, yyq455, yy2arr455
			const yyr455 bool = false
			yyq455[0] = x.Kind != ""
			yyq455[1] = x.APIVersion != ""
			yyq455[2] = true
			yyq455[3] = x.Description != ""
			yyq455[4] = len(x.Versions) != 0
			var yynn455 int
			if yyr455 || yy2arr455 {
				r.EncodeArrayStart(5)
			} else {
				yynn455 = 0
				for _, b := range yyq455 {
					if b {
						yynn455++
					}
				}
				r.EncodeMapStart(yynn455)
				yynn455 = 0
			}
			if yyr455 || yy2arr455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq455[0] {
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq455[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym458 := z.EncBinary()
					_ = yym458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr455 || yy2arr455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq455[1] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq455[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr455 || yy2arr455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq455[2] {
					yy463 := &x.ObjectMeta
					yy463.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq455[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy464 := &x.ObjectMeta
					yy464.CodecEncodeSelf(e)
				}
			}
			if yyr455 || yy2arr455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq455[3] {
					yym466 := z.EncBinary()
					_ = yym466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq455[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr455 || yy2arr455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq455[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym469 := z.EncBinary()
						_ = yym469
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq455[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym470 := z.EncBinary()
						_ = yym470
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr455 || yy2arr455 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym471 := z.DecBinary()
	_ = yym471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct472 := r.ContainerType()
		if yyct472 == codecSelferValueTypeMap1234 {
			yyl472 := r.ReadMapStart()
			if yyl472 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl472, d)
			}
		} else if yyct472 == codecSelferValueTypeArray1234 {
			yyl472 := r.ReadArrayStart()
			if yyl472 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl472, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys473Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys473Slc
	var yyhl473 bool = l >= 0
	for yyj473 := 0; ; yyj473++ {
		if yyhl473 {
			if yyj473 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys473Slc = r.DecodeBytes(yys473Slc, true, true)
		yys473 := string(yys473Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys473 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv476 := &x.ObjectMeta
				yyv476.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv478 := &x.Versions
				yym479 := z.DecBinary()
				_ = yym479
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv478), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys473)
		} // end switch yys473
	} // end for yyj473
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj480 int
	var yyb480 bool
	var yyhl480 bool = l >= 0
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv483 := &x.ObjectMeta
		yyv483.CodecDecodeSelf(d)
	}
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv485 := &x.Versions
		yym486 := z.DecBinary()
		_ = yym486
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv485), d)
		}
	}
	for {
		yyj480++
		if yyhl480 {
			yyb480 = yyj480 > l
		} else {
			yyb480 = r.CheckBreak()
		}
		if yyb480 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj480-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym487 := z.EncBinary()
		_ = yym487
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep488 := !z.EncBinary()
			yy2arr488 := z.EncBasicHandle().StructToArray
			var yyq488 [4]bool
			_, _, _ = yysep488, yyq488, yy2arr488
			const yyr488 bool = false
			yyq488[0] = x.Kind != ""
			yyq488[1] = x.APIVersion != ""
			yyq488[2] = true
			var yynn488 int
			if yyr488 || yy2arr488 {
				r.EncodeArrayStart(4)
			} else {
				yynn488 = 1
				for _, b := range yyq488 {
					if b {
						yynn488++
					}
				}
				r.EncodeMapStart(yynn488)
				yynn488 = 0
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq488[0] {
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq488[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq488[1] {
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq488[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym494 := z.EncBinary()
					_ = yym494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq488[2] {
					yy496 := &x.ListMeta
					yym497 := z.EncBinary()
					_ = yym497
					if false {
					} else if z.HasExtensions() && z.EncExt(yy496) {
					} else {
						z.EncFallback(yy496)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq488[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy498 := &x.ListMeta
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else if z.HasExtensions() && z.EncExt(yy498) {
					} else {
						z.EncFallback(yy498)
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym503 := z.DecBinary()
	_ = yym503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct504 := r.ContainerType()
		if yyct504 == codecSelferValueTypeMap1234 {
			yyl504 := r.ReadMapStart()
			if yyl504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl504, d)
			}
		} else if yyct504 == codecSelferValueTypeArray1234 {
			yyl504 := r.ReadArrayStart()
			if yyl504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys505Slc
	var yyhl505 bool = l >= 0
	for yyj505 := 0; ; yyj505++ {
		if yyhl505 {
			if yyj505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys505Slc = r.DecodeBytes(yys505Slc, true, true)
		yys505 := string(yys505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys505 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv508 := &x.ListMeta
				yym509 := z.DecBinary()
				_ = yym509
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv508) {
				} else {
					z.DecFallback(yyv508, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv510 := &x.Items
				yym511 := z.DecBinary()
				_ = yym511
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv510), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys505)
		} // end switch yys505
	} // end for yyj505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj512 int
	var yyb512 bool
	var yyhl512 bool = l >= 0
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv515 := &x.ListMeta
		yym516 := z.DecBinary()
		_ = yym516
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv515) {
		} else {
			z.DecFallback(yyv515, false)
		}
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv517 := &x.Items
		yym518 := z.DecBinary()
		_ = yym518
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv517), d)
		}
	}
	for {
		yyj512++
		if yyhl512 {
			yyb512 = yyj512 > l
		} else {
			yyb512 = r.CheckBreak()
		}
		if yyb512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [2]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[0] = x.Name != ""
			yyq520[1] = x.APIGroup != ""
			var yynn520 int
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(2)
			} else {
				yynn520 = 0
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
				yynn520 = 0
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[0] {
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq520[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[1] {
					yym525 := z.EncBinary()
					_ = yym525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq520[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym527 := z.DecBinary()
	_ = yym527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct528 := r.ContainerType()
		if yyct528 == codecSelferValueTypeMap1234 {
			yyl528 := r.ReadMapStart()
			if yyl528 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl528, d)
			}
		} else if yyct528 == codecSelferValueTypeArray1234 {
			yyl528 := r.ReadArrayStart()
			if yyl528 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys529Slc
	var yyhl529 bool = l >= 0
	for yyj529 := 0; ; yyj529++ {
		if yyhl529 {
			if yyj529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys529Slc = r.DecodeBytes(yys529Slc, true, true)
		yys529 := string(yys529Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys529 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys529)
		} // end switch yys529
	} // end for yyj529
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj532 int
	var yyb532 bool
	var yyhl532 bool = l >= 0
	yyj532++
	if yyhl532 {
		yyb532 = yyj532 > l
	} else {
		yyb532 = r.CheckBreak()
	}
	if yyb532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj532++
	if yyhl532 {
		yyb532 = yyj532 > l
	} else {
		yyb532 = r.CheckBreak()
	}
	if yyb532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj532++
		if yyhl532 {
			yyb532 = yyj532 > l
		} else {
			yyb532 = r.CheckBreak()
		}
		if yyb532 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj532-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym535 := z.EncBinary()
		_ = yym535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep536 := !z.EncBinary()
			yy2arr536 := z.EncBasicHandle().StructToArray
			var yyq536 [4]bool
			_, _, _ = yysep536, yyq536, yy2arr536
			const yyr536 bool = false
			yyq536[0] = x.Kind != ""
			yyq536[1] = x.APIVersion != ""
			yyq536[2] = true
			yyq536[3] = len(x.Data) != 0
			var yynn536 int
			if yyr536 || yy2arr536 {
				r.EncodeArrayStart(4)
			} else {
				yynn536 = 0
				for _, b := range yyq536 {
					if b {
						yynn536++
					}
				}
				r.EncodeMapStart(yynn536)
				yynn536 = 0
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[0] {
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq536[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym539 := z.EncBinary()
					_ = yym539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[1] {
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[2] {
					yy544 := &x.ObjectMeta
					yy544.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq536[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy545 := &x.ObjectMeta
					yy545.CodecEncodeSelf(e)
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym547 := z.EncBinary()
						_ = yym547
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq536[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym548 := z.EncBinary()
						_ = yym548
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym549 := z.DecBinary()
	_ = yym549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct550 := r.ContainerType()
		if yyct550 == codecSelferValueTypeMap1234 {
			yyl550 := r.ReadMapStart()
			if yyl550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl550, d)
			}
		} else if yyct550 == codecSelferValueTypeArray1234 {
			yyl550 := r.ReadArrayStart()
			if yyl550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys551Slc
	var yyhl551 bool = l >= 0
	for yyj551 := 0; ; yyj551++ {
		if yyhl551 {
			if yyj551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys551Slc = r.DecodeBytes(yys551Slc, true, true)
		yys551 := string(yys551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys551 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv554 := &x.ObjectMeta
				yyv554.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv555 := &x.Data
				yym556 := z.DecBinary()
				_ = yym556
				if false {
				} else {
					*yyv555 = r.DecodeBytes(*(*[]byte)(yyv555), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys551)
		} // end switch yys551
	} // end for yyj551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj557 int
	var yyb557 bool
	var yyhl557 bool = l >= 0
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv560 := &x.ObjectMeta
		yyv560.CodecDecodeSelf(d)
	}
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv561 := &x.Data
		yym562 := z.DecBinary()
		_ = yym562
		if false {
		} else {
			*yyv561 = r.DecodeBytes(*(*[]byte)(yyv561), false, false)
		}
	}
	for {
		yyj557++
		if yyhl557 {
			yyb557 = yyj557 > l
		} else {
			yyb557 = r.CheckBreak()
		}
		if yyb557 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj557-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym563 := z.EncBinary()
		_ = yym563
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep564 := !z.EncBinary()
			yy2arr564 := z.EncBasicHandle().StructToArray
			var yyq564 [5]bool
			_, _, _ = yysep564, yyq564, yy2arr564
			const yyr564 bool = false
			yyq564[0] = x.Kind != ""
			yyq564[1] = x.APIVersion != ""
			yyq564[2] = true
			yyq564[3] = true
			yyq564[4] = true
			var yynn564 int
			if yyr564 || yy2arr564 {
				r.EncodeArrayStart(5)
			} else {
				yynn564 = 0
				for _, b := range yyq564 {
					if b {
						yynn564++
					}
				}
				r.EncodeMapStart(yynn564)
				yynn564 = 0
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq564[0] {
					yym566 := z.EncBinary()
					_ = yym566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq564[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq564[1] {
					yym569 := z.EncBinary()
					_ = yym569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq564[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym570 := z.EncBinary()
					_ = yym570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq564[2] {
					yy572 := &x.ObjectMeta
					yy572.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq564[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy573 := &x.ObjectMeta
					yy573.CodecEncodeSelf(e)
				}
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq564[3] {
					yy575 := &x.Spec
					yy575.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq564[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy576 := &x.Spec
					yy576.CodecEncodeSelf(e)
				}
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq564[4] {
					yy578 := &x.Status
					yy578.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq564[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy579 := &x.Status
					yy579.CodecEncodeSelf(e)
				}
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym580 := z.DecBinary()
	_ = yym580
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct581 := r.ContainerType()
		if yyct581 == codecSelferValueTypeMap1234 {
			yyl581 := r.ReadMapStart()
			if yyl581 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl581, d)
			}
		} else if yyct581 == codecSelferValueTypeArray1234 {
			yyl581 := r.ReadArrayStart()
			if yyl581 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl581, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys582Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys582Slc
	var yyhl582 bool = l >= 0
	for yyj582 := 0; ; yyj582++ {
		if yyhl582 {
			if yyj582 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys582Slc = r.DecodeBytes(yys582Slc, true, true)
		yys582 := string(yys582Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys582 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv585 := &x.ObjectMeta
				yyv585.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv586 := &x.Spec
				yyv586.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv587 := &x.Status
				yyv587.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys582)
		} // end switch yys582
	} // end for yyj582
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj588 int
	var yyb588 bool
	var yyhl588 bool = l >= 0
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv591 := &x.ObjectMeta
		yyv591.CodecDecodeSelf(d)
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv592 := &x.Spec
		yyv592.CodecDecodeSelf(d)
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv593 := &x.Status
		yyv593.CodecDecodeSelf(d)
	}
	for {
		yyj588++
		if yyhl588 {
			yyb588 = yyj588 > l
		} else {
			yyb588 = r.CheckBreak()
		}
		if yyb588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym594 := z.EncBinary()
		_ = yym594
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep595 := !z.EncBinary()
			yy2arr595 := z.EncBasicHandle().StructToArray
			var yyq595 [8]bool
			_, _, _ = yysep595, yyq595, yy2arr595
			const yyr595 bool = false
			yyq595[0] = x.Replicas != nil
			yyq595[1] = len(x.Selector) != 0
			yyq595[3] = true
			yyq595[4] = x.RevisionHistoryLimit != nil
			yyq595[5] = x.UniqueLabelKey != nil
			yyq595[6] = x.Paused != false
			yyq595[7] = x.RollbackTo != nil
			var yynn595 int
			if yyr595 || yy2arr595 {
				r.EncodeArrayStart(8)
			} else {
				yynn595 = 1
				for _, b := range yyq595 {
					if b {
						yynn595++
					}
				}
				r.EncodeMapStart(yynn595)
				yynn595 = 0
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy597 := *x.Replicas
						yym598 := z.EncBinary()
						_ = yym598
						if false {
						} else {
							r.EncodeInt(int64(yy597))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq595[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy599 := *x.Replicas
						yym600 := z.EncBinary()
						_ = yym600
						if false {
						} else {
							r.EncodeInt(int64(yy599))
						}
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym602 := z.EncBinary()
						_ = yym602
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq595[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym603 := z.EncBinary()
						_ = yym603
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy605 := &x.Template
				yy605.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy606 := &x.Template
				yy606.CodecEncodeSelf(e)
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[3] {
					yy608 := &x.Strategy
					yy608.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq595[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy609 := &x.Strategy
					yy609.CodecEncodeSelf(e)
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[4] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy611 := *x.RevisionHistoryLimit
						yym612 := z.EncBinary()
						_ = yym612
						if false {
						} else {
							r.EncodeInt(int64(yy611))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq595[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy613 := *x.RevisionHistoryLimit
						yym614 := z.EncBinary()
						_ = yym614
						if false {
						} else {
							r.EncodeInt(int64(yy613))
						}
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[5] {
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy616 := *x.UniqueLabelKey
						yym617 := z.EncBinary()
						_ = yym617
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy616))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq595[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy618 := *x.UniqueLabelKey
						yym619 := z.EncBinary()
						_ = yym619
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy618))
						}
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[6] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq595[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq595[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct625 := r.ContainerType()
		if yyct625 == codecSelferValueTypeMap1234 {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if yyct625 == codecSelferValueTypeArray1234 {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys626 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv629 := &x.Selector
				yym630 := z.DecBinary()
				_ = yym630
				if false {
				} else {
					z.F.DecMapStringStringX(yyv629, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv631 := &x.Template
				yyv631.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv632 := &x.Strategy
				yyv632.CodecDecodeSelf(d)
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int32)
				}
				yym634 := z.DecBinary()
				_ = yym634
				if false {
				} else {
					*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
				}
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				if x.UniqueLabelKey != nil {
					x.UniqueLabelKey = nil
				}
			} else {
				if x.UniqueLabelKey == nil {
					x.UniqueLabelKey = new(string)
				}
				yym636 := z.DecBinary()
				_ = yym636
				if false {
				} else {
					*((*string)(x.UniqueLabelKey)) = r.DecodeString()
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj639 int
	var yyb639 bool
	var yyhl639 bool = l >= 0
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym641 := z.DecBinary()
		_ = yym641
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv642 := &x.Selector
		yym643 := z.DecBinary()
		_ = yym643
		if false {
		} else {
			z.F.DecMapStringStringX(yyv642, false, d)
		}
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv644 := &x.Template
		yyv644.CodecDecodeSelf(d)
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv645 := &x.Strategy
		yyv645.CodecDecodeSelf(d)
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int32)
		}
		yym647 := z.DecBinary()
		_ = yym647
		if false {
		} else {
			*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
		}
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UniqueLabelKey != nil {
			x.UniqueLabelKey = nil
		}
	} else {
		if x.UniqueLabelKey == nil {
			x.UniqueLabelKey = new(string)
		}
		yym649 := z.DecBinary()
		_ = yym649
		if false {
		} else {
			*((*string)(x.UniqueLabelKey)) = r.DecodeString()
		}
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj639++
		if yyhl639 {
			yyb639 = yyj639 > l
		} else {
			yyb639 = r.CheckBreak()
		}
		if yyb639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym652 := z.EncBinary()
		_ = yym652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep653 := !z.EncBinary()
			yy2arr653 := z.EncBasicHandle().StructToArray
			var yyq653 [5]bool
			_, _, _ = yysep653, yyq653, yy2arr653
			const yyr653 bool = false
			yyq653[0] = x.Kind != ""
			yyq653[1] = x.APIVersion != ""
			yyq653[3] = len(x.UpdatedAnnotations) != 0
			var yynn653 int
			if yyr653 || yy2arr653 {
				r.EncodeArrayStart(5)
			} else {
				yynn653 = 2
				for _, b := range yyq653 {
					if b {
						yynn653++
					}
				}
				r.EncodeMapStart(yynn653)
				yynn653 = 0
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq653[0] {
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq653[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq653[1] {
					yym658 := z.EncBinary()
					_ = yym658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq653[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym661 := z.EncBinary()
				_ = yym661
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym662 := z.EncBinary()
				_ = yym662
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq653[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym664 := z.EncBinary()
						_ = yym664
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq653[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym665 := z.EncBinary()
						_ = yym665
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy667 := &x.RollbackTo
				yy667.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy668 := &x.RollbackTo
				yy668.CodecEncodeSelf(e)
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym669 := z.DecBinary()
	_ = yym669
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct670 := r.ContainerType()
		if yyct670 == codecSelferValueTypeMap1234 {
			yyl670 := r.ReadMapStart()
			if yyl670 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl670, d)
			}
		} else if yyct670 == codecSelferValueTypeArray1234 {
			yyl670 := r.ReadArrayStart()
			if yyl670 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl670, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys671Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys671Slc
	var yyhl671 bool = l >= 0
	for yyj671 := 0; ; yyj671++ {
		if yyhl671 {
			if yyj671 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys671Slc = r.DecodeBytes(yys671Slc, true, true)
		yys671 := string(yys671Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys671 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv675 := &x.UpdatedAnnotations
				yym676 := z.DecBinary()
				_ = yym676
				if false {
				} else {
					z.F.DecMapStringStringX(yyv675, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv677 := &x.RollbackTo
				yyv677.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys671)
		} // end switch yys671
	} // end for yyj671
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj678 int
	var yyb678 bool
	var yyhl678 bool = l >= 0
	yyj678++
	if yyhl678 {
		yyb678 = yyj678 > l
	} else {
		yyb678 = r.CheckBreak()
	}
	if yyb678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj678++
	if yyhl678 {
		yyb678 = yyj678 > l
	} else {
		yyb678 = r.CheckBreak()
	}
	if yyb678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj678++
	if yyhl678 {
		yyb678 = yyj678 > l
	} else {
		yyb678 = r.CheckBreak()
	}
	if yyb678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj678++
	if yyhl678 {
		yyb678 = yyj678 > l
	} else {
		yyb678 = r.CheckBreak()
	}
	if yyb678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv682 := &x.UpdatedAnnotations
		yym683 := z.DecBinary()
		_ = yym683
		if false {
		} else {
			z.F.DecMapStringStringX(yyv682, false, d)
		}
	}
	yyj678++
	if yyhl678 {
		yyb678 = yyj678 > l
	} else {
		yyb678 = r.CheckBreak()
	}
	if yyb678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv684 := &x.RollbackTo
		yyv684.CodecDecodeSelf(d)
	}
	for {
		yyj678++
		if yyhl678 {
			yyb678 = yyj678 > l
		} else {
			yyb678 = r.CheckBreak()
		}
		if yyb678 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj678-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym685 := z.EncBinary()
		_ = yym685
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep686 := !z.EncBinary()
			yy2arr686 := z.EncBasicHandle().StructToArray
			var yyq686 [1]bool
			_, _, _ = yysep686, yyq686, yy2arr686
			const yyr686 bool = false
			yyq686[0] = x.Revision != 0
			var yynn686 int
			if yyr686 || yy2arr686 {
				r.EncodeArrayStart(1)
			} else {
				yynn686 = 0
				for _, b := range yyq686 {
					if b {
						yynn686++
					}
				}
				r.EncodeMapStart(yynn686)
				yynn686 = 0
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq686[0] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq686[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym690 := z.DecBinary()
	_ = yym690
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct691 := r.ContainerType()
		if yyct691 == codecSelferValueTypeMap1234 {
			yyl691 := r.ReadMapStart()
			if yyl691 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl691, d)
			}
		} else if yyct691 == codecSelferValueTypeArray1234 {
			yyl691 := r.ReadArrayStart()
			if yyl691 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl691, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys692Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys692Slc
	var yyhl692 bool = l >= 0
	for yyj692 := 0; ; yyj692++ {
		if yyhl692 {
			if yyj692 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys692Slc = r.DecodeBytes(yys692Slc, true, true)
		yys692 := string(yys692Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys692 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys692)
		} // end switch yys692
	} // end for yyj692
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj694 int
	var yyb694 bool
	var yyhl694 bool = l >= 0
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj694++
		if yyhl694 {
			yyb694 = yyj694 > l
		} else {
			yyb694 = r.CheckBreak()
		}
		if yyb694 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj694-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym696 := z.EncBinary()
		_ = yym696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep697 := !z.EncBinary()
			yy2arr697 := z.EncBasicHandle().StructToArray
			var yyq697 [2]bool
			_, _, _ = yysep697, yyq697, yy2arr697
			const yyr697 bool = false
			yyq697[0] = x.Type != ""
			yyq697[1] = x.RollingUpdate != nil
			var yynn697 int
			if yyr697 || yy2arr697 {
				r.EncodeArrayStart(2)
			} else {
				yynn697 = 0
				for _, b := range yyq697 {
					if b {
						yynn697++
					}
				}
				r.EncodeMapStart(yynn697)
				yynn697 = 0
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq697[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq697[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq697[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq697[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym700 := z.DecBinary()
	_ = yym700
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct701 := r.ContainerType()
		if yyct701 == codecSelferValueTypeMap1234 {
			yyl701 := r.ReadMapStart()
			if yyl701 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl701, d)
			}
		} else if yyct701 == codecSelferValueTypeArray1234 {
			yyl701 := r.ReadArrayStart()
			if yyl701 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl701, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys702Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys702Slc
	var yyhl702 bool = l >= 0
	for yyj702 := 0; ; yyj702++ {
		if yyhl702 {
			if yyj702 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys702Slc = r.DecodeBytes(yys702Slc, true, true)
		yys702 := string(yys702Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys702 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys702)
		} // end switch yys702
	} // end for yyj702
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj705 int
	var yyb705 bool
	var yyhl705 bool = l >= 0
	yyj705++
	if yyhl705 {
		yyb705 = yyj705 > l
	} else {
		yyb705 = r.CheckBreak()
	}
	if yyb705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj705++
	if yyhl705 {
		yyb705 = yyj705 > l
	} else {
		yyb705 = r.CheckBreak()
	}
	if yyb705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj705++
		if yyhl705 {
			yyb705 = yyj705 > l
		} else {
			yyb705 = r.CheckBreak()
		}
		if yyb705 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj705-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym708 := z.EncBinary()
	_ = yym708
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym709 := z.DecBinary()
	_ = yym709
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym710 := z.EncBinary()
		_ = yym710
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep711 := !z.EncBinary()
			yy2arr711 := z.EncBasicHandle().StructToArray
			var yyq711 [3]bool
			_, _, _ = yysep711, yyq711, yy2arr711
			const yyr711 bool = false
			yyq711[0] = x.MaxUnavailable != nil
			yyq711[1] = x.MaxSurge != nil
			yyq711[2] = x.MinReadySeconds != 0
			var yynn711 int
			if yyr711 || yy2arr711 {
				r.EncodeArrayStart(3)
			} else {
				yynn711 = 0
				for _, b := range yyq711 {
					if b {
						yynn711++
					}
				}
				r.EncodeMapStart(yynn711)
				yynn711 = 0
			}
			if yyr711 || yy2arr711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq711[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym713 := z.EncBinary()
						_ = yym713
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym713 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq711[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym714 := z.EncBinary()
						_ = yym714
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym714 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr711 || yy2arr711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq711[1] {
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym716 := z.EncBinary()
						_ = yym716
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym716 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq711[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym717 := z.EncBinary()
						_ = yym717
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym717 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				}
			}
			if yyr711 || yy2arr711 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq711[2] {
					yym719 := z.EncBinary()
					_ = yym719
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq711[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr711 || yy2arr711 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym721 := z.DecBinary()
	_ = yym721
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct722 := r.ContainerType()
		if yyct722 == codecSelferValueTypeMap1234 {
			yyl722 := r.ReadMapStart()
			if yyl722 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl722, d)
			}
		} else if yyct722 == codecSelferValueTypeArray1234 {
			yyl722 := r.ReadArrayStart()
			if yyl722 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl722, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys723Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys723Slc
	var yyhl723 bool = l >= 0
	for yyj723 := 0; ; yyj723++ {
		if yyhl723 {
			if yyj723 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys723Slc = r.DecodeBytes(yys723Slc, true, true)
		yys723 := string(yys723Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys723 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg9_intstr.IntOrString)
				}
				yym725 := z.DecBinary()
				_ = yym725
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym725 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				if x.MaxSurge != nil {
					x.MaxSurge = nil
				}
			} else {
				if x.MaxSurge == nil {
					x.MaxSurge = new(pkg9_intstr.IntOrString)
				}
				yym727 := z.DecBinary()
				_ = yym727
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
				} else if !yym727 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxSurge)
				} else {
					z.DecFallback(x.MaxSurge, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys723)
		} // end switch yys723
	} // end for yyj723
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj729 int
	var yyb729 bool
	var yyhl729 bool = l >= 0
	yyj729++
	if yyhl729 {
		yyb729 = yyj729 > l
	} else {
		yyb729 = r.CheckBreak()
	}
	if yyb729 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg9_intstr.IntOrString)
		}
		yym731 := z.DecBinary()
		_ = yym731
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym731 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj729++
	if yyhl729 {
		yyb729 = yyj729 > l
	} else {
		yyb729 = r.CheckBreak()
	}
	if yyb729 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxSurge != nil {
			x.MaxSurge = nil
		}
	} else {
		if x.MaxSurge == nil {
			x.MaxSurge = new(pkg9_intstr.IntOrString)
		}
		yym733 := z.DecBinary()
		_ = yym733
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
		} else if !yym733 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxSurge)
		} else {
			z.DecFallback(x.MaxSurge, false)
		}
	}
	yyj729++
	if yyhl729 {
		yyb729 = yyj729 > l
	} else {
		yyb729 = r.CheckBreak()
	}
	if yyb729 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	for {
		yyj729++
		if yyhl729 {
			yyb729 = yyj729 > l
		} else {
			yyb729 = r.CheckBreak()
		}
		if yyb729 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj729-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym735 := z.EncBinary()
		_ = yym735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep736 := !z.EncBinary()
			yy2arr736 := z.EncBasicHandle().StructToArray
			var yyq736 [4]bool
			_, _, _ = yysep736, yyq736, yy2arr736
			const yyr736 bool = false
			yyq736[0] = x.Replicas != 0
			yyq736[1] = x.UpdatedReplicas != 0
			yyq736[2] = x.AvailableReplicas != 0
			yyq736[3] = x.UnavailableReplicas != 0
			var yynn736 int
			if yyr736 || yy2arr736 {
				r.EncodeArrayStart(4)
			} else {
				yynn736 = 0
				for _, b := range yyq736 {
					if b {
						yynn736++
					}
				}
				r.EncodeMapStart(yynn736)
				yynn736 = 0
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[0] {
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq736[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[1] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq736[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[2] {
					yym744 := z.EncBinary()
					_ = yym744
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq736[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[3] {
					yym747 := z.EncBinary()
					_ = yym747
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq736[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym749 := z.DecBinary()
	_ = yym749
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct750 := r.ContainerType()
		if yyct750 == codecSelferValueTypeMap1234 {
			yyl750 := r.ReadMapStart()
			if yyl750 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl750, d)
			}
		} else if yyct750 == codecSelferValueTypeArray1234 {
			yyl750 := r.ReadArrayStart()
			if yyl750 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl750, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys751Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys751Slc
	var yyhl751 bool = l >= 0
	for yyj751 := 0; ; yyj751++ {
		if yyhl751 {
			if yyj751 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys751Slc = r.DecodeBytes(yys751Slc, true, true)
		yys751 := string(yys751Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys751 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys751)
		} // end switch yys751
	} // end for yyj751
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj756 int
	var yyb756 bool
	var yyhl756 bool = l >= 0
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	for {
		yyj756++
		if yyhl756 {
			yyb756 = yyj756 > l
		} else {
			yyb756 = r.CheckBreak()
		}
		if yyb756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym761 := z.EncBinary()
		_ = yym761
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep762 := !z.EncBinary()
			yy2arr762 := z.EncBasicHandle().StructToArray
			var yyq762 [4]bool
			_, _, _ = yysep762, yyq762, yy2arr762
			const yyr762 bool = false
			yyq762[0] = x.Kind != ""
			yyq762[1] = x.APIVersion != ""
			yyq762[2] = true
			var yynn762 int
			if yyr762 || yy2arr762 {
				r.EncodeArrayStart(4)
			} else {
				yynn762 = 1
				for _, b := range yyq762 {
					if b {
						yynn762++
					}
				}
				r.EncodeMapStart(yynn762)
				yynn762 = 0
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[0] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq762[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[1] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq762[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq762[2] {
					yy770 := &x.ListMeta
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else if z.HasExtensions() && z.EncExt(yy770) {
					} else {
						z.EncFallback(yy770)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq762[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy772 := &x.ListMeta
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else if z.HasExtensions() && z.EncExt(yy772) {
					} else {
						z.EncFallback(yy772)
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym775 := z.EncBinary()
					_ = yym775
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr762 || yy2arr762 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym777 := z.DecBinary()
	_ = yym777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct778 := r.ContainerType()
		if yyct778 == codecSelferValueTypeMap1234 {
			yyl778 := r.ReadMapStart()
			if yyl778 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl778, d)
			}
		} else if yyct778 == codecSelferValueTypeArray1234 {
			yyl778 := r.ReadArrayStart()
			if yyl778 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys779Slc
	var yyhl779 bool = l >= 0
	for yyj779 := 0; ; yyj779++ {
		if yyhl779 {
			if yyj779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys779Slc = r.DecodeBytes(yys779Slc, true, true)
		yys779 := string(yys779Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys779 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv782 := &x.ListMeta
				yym783 := z.DecBinary()
				_ = yym783
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv782) {
				} else {
					z.DecFallback(yyv782, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv784 := &x.Items
				yym785 := z.DecBinary()
				_ = yym785
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv784), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys779)
		} // end switch yys779
	} // end for yyj779
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj786 int
	var yyb786 bool
	var yyhl786 bool = l >= 0
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv789 := &x.ListMeta
		yym790 := z.DecBinary()
		_ = yym790
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv789) {
		} else {
			z.DecFallback(yyv789, false)
		}
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv791 := &x.Items
		yym792 := z.DecBinary()
		_ = yym792
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv791), d)
		}
	}
	for {
		yyj786++
		if yyhl786 {
			yyb786 = yyj786 > l
		} else {
			yyb786 = r.CheckBreak()
		}
		if yyb786 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj786-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetUpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym793 := z.EncBinary()
		_ = yym793
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep794 := !z.EncBinary()
			yy2arr794 := z.EncBasicHandle().StructToArray
			var yyq794 [2]bool
			_, _, _ = yysep794, yyq794, yy2arr794
			const yyr794 bool = false
			yyq794[0] = x.Type != ""
			yyq794[1] = x.RollingUpdate != nil
			var yynn794 int
			if yyr794 || yy2arr794 {
				r.EncodeArrayStart(2)
			} else {
				yynn794 = 0
				for _, b := range yyq794 {
					if b {
						yynn794++
					}
				}
				r.EncodeMapStart(yynn794)
				yynn794 = 0
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq794[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq794[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetUpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym797 := z.DecBinary()
	_ = yym797
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct798 := r.ContainerType()
		if yyct798 == codecSelferValueTypeMap1234 {
			yyl798 := r.ReadMapStart()
			if yyl798 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl798, d)
			}
		} else if yyct798 == codecSelferValueTypeArray1234 {
			yyl798 := r.ReadArrayStart()
			if yyl798 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl798, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys799Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys799Slc
	var yyhl799 bool = l >= 0
	for yyj799 := 0; ; yyj799++ {
		if yyhl799 {
			if yyj799 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys799Slc = r.DecodeBytes(yys799Slc, true, true)
		yys799 := string(yys799Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys799 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDaemonSet)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys799)
		} // end switch yys799
	} // end for yyj799
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj802 int
	var yyb802 bool
	var yyhl802 bool = l >= 0
	yyj802++
	if yyhl802 {
		yyb802 = yyj802 > l
	} else {
		yyb802 = r.CheckBreak()
	}
	if yyb802 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
	}
	yyj802++
	if yyhl802 {
		yyb802 = yyj802 > l
	} else {
		yyb802 = r.CheckBreak()
	}
	if yyb802 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDaemonSet)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj802++
		if yyhl802 {
			yyb802 = yyj802 > l
		} else {
			yyb802 = r.CheckBreak()
		}
		if yyb802 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj802-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DaemonSetUpdateStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym805 := z.EncBinary()
	_ = yym805
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DaemonSetUpdateStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym806 := z.DecBinary()
	_ = yym806
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym807 := z.EncBinary()
		_ = yym807
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep808 := !z.EncBinary()
			yy2arr808 := z.EncBasicHandle().StructToArray
			var yyq808 [2]bool
			_, _, _ = yysep808, yyq808, yy2arr808
			const yyr808 bool = false
			yyq808[0] = x.MaxUnavailable != nil
			yyq808[1] = x.MinReadySeconds != 0
			var yynn808 int
			if yyr808 || yy2arr808 {
				r.EncodeArrayStart(2)
			} else {
				yynn808 = 0
				for _, b := range yyq808 {
					if b {
						yynn808++
					}
				}
				r.EncodeMapStart(yynn808)
				yynn808 = 0
			}
			if yyr808 || yy2arr808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq808[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym810 := z.EncBinary()
						_ = yym810
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym810 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq808[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym811 := z.EncBinary()
						_ = yym811
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym811 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr808 || yy2arr808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq808[1] {
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq808[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr808 || yy2arr808 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym815 := z.DecBinary()
	_ = yym815
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct816 := r.ContainerType()
		if yyct816 == codecSelferValueTypeMap1234 {
			yyl816 := r.ReadMapStart()
			if yyl816 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl816, d)
			}
		} else if yyct816 == codecSelferValueTypeArray1234 {
			yyl816 := r.ReadArrayStart()
			if yyl816 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl816, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys817Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys817Slc
	var yyhl817 bool = l >= 0
	for yyj817 := 0; ; yyj817++ {
		if yyhl817 {
			if yyj817 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys817Slc = r.DecodeBytes(yys817Slc, true, true)
		yys817 := string(yys817Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys817 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg9_intstr.IntOrString)
				}
				yym819 := z.DecBinary()
				_ = yym819
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym819 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys817)
		} // end switch yys817
	} // end for yyj817
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj821 int
	var yyb821 bool
	var yyhl821 bool = l >= 0
	yyj821++
	if yyhl821 {
		yyb821 = yyj821 > l
	} else {
		yyb821 = r.CheckBreak()
	}
	if yyb821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg9_intstr.IntOrString)
		}
		yym823 := z.DecBinary()
		_ = yym823
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym823 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj821++
	if yyhl821 {
		yyb821 = yyj821 > l
	} else {
		yyb821 = r.CheckBreak()
	}
	if yyb821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	for {
		yyj821++
		if yyhl821 {
			yyb821 = yyj821 > l
		} else {
			yyb821 = r.CheckBreak()
		}
		if yyb821 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj821-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym825 := z.EncBinary()
		_ = yym825
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep826 := !z.EncBinary()
			yy2arr826 := z.EncBasicHandle().StructToArray
			var yyq826 [4]bool
			_, _, _ = yysep826, yyq826, yy2arr826
			const yyr826 bool = false
			yyq826[0] = x.Selector != nil
			yyq826[2] = true
			yyq826[3] = x.UniqueLabelKey != nil
			var yynn826 int
			if yyr826 || yy2arr826 {
				r.EncodeArrayStart(4)
			} else {
				yynn826 = 1
				for _, b := range yyq826 {
					if b {
						yynn826++
					}
				}
				r.EncodeMapStart(yynn826)
				yynn826 = 0
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq826[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy829 := &x.Template
				yy829.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy830 := &x.Template
				yy830.CodecEncodeSelf(e)
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[2] {
					yy832 := &x.UpdateStrategy
					yy832.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq826[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updateStrategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy833 := &x.UpdateStrategy
					yy833.CodecEncodeSelf(e)
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[3] {
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy835 := *x.UniqueLabelKey
						yym836 := z.EncBinary()
						_ = yym836
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy835))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq826[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy837 := *x.UniqueLabelKey
						yym838 := z.EncBinary()
						_ = yym838
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy837))
						}
					}
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym839 := z.DecBinary()
	_ = yym839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct840 := r.ContainerType()
		if yyct840 == codecSelferValueTypeMap1234 {
			yyl840 := r.ReadMapStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl840, d)
			}
		} else if yyct840 == codecSelferValueTypeArray1234 {
			yyl840 := r.ReadArrayStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys841Slc
	var yyhl841 bool = l >= 0
	for yyj841 := 0; ; yyj841++ {
		if yyhl841 {
			if yyj841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys841Slc = r.DecodeBytes(yys841Slc, true, true)
		yys841 := string(yys841Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys841 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv843 := &x.Template
				yyv843.CodecDecodeSelf(d)
			}
		case "updateStrategy":
			if r.TryDecodeAsNil() {
				x.UpdateStrategy = DaemonSetUpdateStrategy{}
			} else {
				yyv844 := &x.UpdateStrategy
				yyv844.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				if x.UniqueLabelKey != nil {
					x.UniqueLabelKey = nil
				}
			} else {
				if x.UniqueLabelKey == nil {
					x.UniqueLabelKey = new(string)
				}
				yym846 := z.DecBinary()
				_ = yym846
				if false {
				} else {
					*((*string)(x.UniqueLabelKey)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys841)
		} // end switch yys841
	} // end for yyj841
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj847 int
	var yyb847 bool
	var yyhl847 bool = l >= 0
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv849 := &x.Template
		yyv849.CodecDecodeSelf(d)
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdateStrategy = DaemonSetUpdateStrategy{}
	} else {
		yyv850 := &x.UpdateStrategy
		yyv850.CodecDecodeSelf(d)
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UniqueLabelKey != nil {
			x.UniqueLabelKey = nil
		}
	} else {
		if x.UniqueLabelKey == nil {
			x.UniqueLabelKey = new(string)
		}
		yym852 := z.DecBinary()
		_ = yym852
		if false {
		} else {
			*((*string)(x.UniqueLabelKey)) = r.DecodeString()
		}
	}
	for {
		yyj847++
		if yyhl847 {
			yyb847 = yyj847 > l
		} else {
			yyb847 = r.CheckBreak()
		}
		if yyb847 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj847-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym853 := z.EncBinary()
		_ = yym853
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep854 := !z.EncBinary()
			yy2arr854 := z.EncBasicHandle().StructToArray
			var yyq854 [3]bool
			_, _, _ = yysep854, yyq854, yy2arr854
			const yyr854 bool = false
			var yynn854 int
			if yyr854 || yy2arr854 {
				r.EncodeArrayStart(3)
			} else {
				yynn854 = 3
				for _, b := range yyq854 {
					if b {
						yynn854++
					}
				}
				r.EncodeMapStart(yynn854)
				yynn854 = 0
			}
			if yyr854 || yy2arr854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym856 := z.EncBinary()
				_ = yym856
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym857 := z.EncBinary()
				_ = yym857
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr854 || yy2arr854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym859 := z.EncBinary()
				_ = yym859
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym860 := z.EncBinary()
				_ = yym860
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr854 || yy2arr854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym862 := z.EncBinary()
				_ = yym862
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym863 := z.EncBinary()
				_ = yym863
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr854 || yy2arr854 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym864 := z.DecBinary()
	_ = yym864
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct865 := r.ContainerType()
		if yyct865 == codecSelferValueTypeMap1234 {
			yyl865 := r.ReadMapStart()
			if yyl865 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl865, d)
			}
		} else if yyct865 == codecSelferValueTypeArray1234 {
			yyl865 := r.ReadArrayStart()
			if yyl865 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl865, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys866Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys866Slc
	var yyhl866 bool = l >= 0
	for yyj866 := 0; ; yyj866++ {
		if yyhl866 {
			if yyj866 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys866Slc = r.DecodeBytes(yys866Slc, true, true)
		yys866 := string(yys866Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys866 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys866)
		} // end switch yys866
	} // end for yyj866
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj870 int
	var yyb870 bool
	var yyhl870 bool = l >= 0
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	for {
		yyj870++
		if yyhl870 {
			yyb870 = yyj870 > l
		} else {
			yyb870 = r.CheckBreak()
		}
		if yyb870 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj870-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym874 := z.EncBinary()
		_ = yym874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep875 := !z.EncBinary()
			yy2arr875 := z.EncBasicHandle().StructToArray
			var yyq875 [5]bool
			_, _, _ = yysep875, yyq875, yy2arr875
			const yyr875 bool = false
			yyq875[0] = x.Kind != ""
			yyq875[1] = x.APIVersion != ""
			yyq875[2] = true
			yyq875[3] = true
			yyq875[4] = true
			var yynn875 int
			if yyr875 || yy2arr875 {
				r.EncodeArrayStart(5)
			} else {
				yynn875 = 0
				for _, b := range yyq875 {
					if b {
						yynn875++
					}
				}
				r.EncodeMapStart(yynn875)
				yynn875 = 0
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[0] {
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq875[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[1] {
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq875[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym881 := z.EncBinary()
					_ = yym881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[2] {
					yy883 := &x.ObjectMeta
					yy883.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq875[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy884 := &x.ObjectMeta
					yy884.CodecEncodeSelf(e)
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[3] {
					yy886 := &x.Spec
					yy886.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq875[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy887 := &x.Spec
					yy887.CodecEncodeSelf(e)
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[4] {
					yy889 := &x.Status
					yy889.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq875[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy890 := &x.Status
					yy890.CodecEncodeSelf(e)
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym891 := z.DecBinary()
	_ = yym891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct892 := r.ContainerType()
		if yyct892 == codecSelferValueTypeMap1234 {
			yyl892 := r.ReadMapStart()
			if yyl892 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl892, d)
			}
		} else if yyct892 == codecSelferValueTypeArray1234 {
			yyl892 := r.ReadArrayStart()
			if yyl892 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl892, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys893Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys893Slc
	var yyhl893 bool = l >= 0
	for yyj893 := 0; ; yyj893++ {
		if yyhl893 {
			if yyj893 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys893Slc = r.DecodeBytes(yys893Slc, true, true)
		yys893 := string(yys893Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys893 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv896 := &x.ObjectMeta
				yyv896.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv897 := &x.Spec
				yyv897.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv898 := &x.Status
				yyv898.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys893)
		} // end switch yys893
	} // end for yyj893
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj899 int
	var yyb899 bool
	var yyhl899 bool = l >= 0
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv902 := &x.ObjectMeta
		yyv902.CodecDecodeSelf(d)
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv903 := &x.Spec
		yyv903.CodecDecodeSelf(d)
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv904 := &x.Status
		yyv904.CodecDecodeSelf(d)
	}
	for {
		yyj899++
		if yyhl899 {
			yyb899 = yyj899 > l
		} else {
			yyb899 = r.CheckBreak()
		}
		if yyb899 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj899-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym905 := z.EncBinary()
		_ = yym905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep906 := !z.EncBinary()
			yy2arr906 := z.EncBasicHandle().StructToArray
			var yyq906 [4]bool
			_, _, _ = yysep906, yyq906, yy2arr906
			const yyr906 bool = false
			yyq906[0] = x.Kind != ""
			yyq906[1] = x.APIVersion != ""
			yyq906[2] = true
			var yynn906 int
			if yyr906 || yy2arr906 {
				r.EncodeArrayStart(4)
			} else {
				yynn906 = 1
				for _, b := range yyq906 {
					if b {
						yynn906++
					}
				}
				r.EncodeMapStart(yynn906)
				yynn906 = 0
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[0] {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq906[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[1] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq906[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[2] {
					yy914 := &x.ListMeta
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else if z.HasExtensions() && z.EncExt(yy914) {
					} else {
						z.EncFallback(yy914)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq906[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy916 := &x.ListMeta
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else if z.HasExtensions() && z.EncExt(yy916) {
					} else {
						z.EncFallback(yy916)
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym919 := z.EncBinary()
					_ = yym919
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym920 := z.EncBinary()
					_ = yym920
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym921 := z.DecBinary()
	_ = yym921
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct922 := r.ContainerType()
		if yyct922 == codecSelferValueTypeMap1234 {
			yyl922 := r.ReadMapStart()
			if yyl922 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl922, d)
			}
		} else if yyct922 == codecSelferValueTypeArray1234 {
			yyl922 := r.ReadArrayStart()
			if yyl922 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl922, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys923Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys923Slc
	var yyhl923 bool = l >= 0
	for yyj923 := 0; ; yyj923++ {
		if yyhl923 {
			if yyj923 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys923Slc = r.DecodeBytes(yys923Slc, true, true)
		yys923 := string(yys923Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys923 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv926 := &x.ListMeta
				yym927 := z.DecBinary()
				_ = yym927
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv926) {
				} else {
					z.DecFallback(yyv926, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv928 := &x.Items
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv928), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys923)
		} // end switch yys923
	} // end for yyj923
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj930 int
	var yyb930 bool
	var yyhl930 bool = l >= 0
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv933 := &x.ListMeta
		yym934 := z.DecBinary()
		_ = yym934
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv933) {
		} else {
			z.DecFallback(yyv933, false)
		}
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv935 := &x.Items
		yym936 := z.DecBinary()
		_ = yym936
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv935), d)
		}
	}
	for {
		yyj930++
		if yyhl930 {
			yyb930 = yyj930 > l
		} else {
			yyb930 = r.CheckBreak()
		}
		if yyb930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym937 := z.EncBinary()
		_ = yym937
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep938 := !z.EncBinary()
			yy2arr938 := z.EncBasicHandle().StructToArray
			var yyq938 [4]bool
			_, _, _ = yysep938, yyq938, yy2arr938
			const yyr938 bool = false
			yyq938[0] = x.Kind != ""
			yyq938[1] = x.APIVersion != ""
			yyq938[2] = true
			var yynn938 int
			if yyr938 || yy2arr938 {
				r.EncodeArrayStart(4)
			} else {
				yynn938 = 1
				for _, b := range yyq938 {
					if b {
						yynn938++
					}
				}
				r.EncodeMapStart(yynn938)
				yynn938 = 0
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[0] {
					yym940 := z.EncBinary()
					_ = yym940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq938[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym941 := z.EncBinary()
					_ = yym941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[1] {
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq938[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym944 := z.EncBinary()
					_ = yym944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[2] {
					yy946 := &x.ListMeta
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else if z.HasExtensions() && z.EncExt(yy946) {
					} else {
						z.EncFallback(yy946)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq938[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy948 := &x.ListMeta
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else if z.HasExtensions() && z.EncExt(yy948) {
					} else {
						z.EncFallback(yy948)
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym953 := z.DecBinary()
	_ = yym953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct954 := r.ContainerType()
		if yyct954 == codecSelferValueTypeMap1234 {
			yyl954 := r.ReadMapStart()
			if yyl954 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl954, d)
			}
		} else if yyct954 == codecSelferValueTypeArray1234 {
			yyl954 := r.ReadArrayStart()
			if yyl954 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys955Slc
	var yyhl955 bool = l >= 0
	for yyj955 := 0; ; yyj955++ {
		if yyhl955 {
			if yyj955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys955Slc = r.DecodeBytes(yys955Slc, true, true)
		yys955 := string(yys955Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys955 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv958 := &x.ListMeta
				yym959 := z.DecBinary()
				_ = yym959
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv958) {
				} else {
					z.DecFallback(yyv958, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv960 := &x.Items
				yym961 := z.DecBinary()
				_ = yym961
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv960), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys955)
		} // end switch yys955
	} // end for yyj955
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj962 int
	var yyb962 bool
	var yyhl962 bool = l >= 0
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv965 := &x.ListMeta
		yym966 := z.DecBinary()
		_ = yym966
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv965) {
		} else {
			z.DecFallback(yyv965, false)
		}
	}
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv967 := &x.Items
		yym968 := z.DecBinary()
		_ = yym968
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv967), d)
		}
	}
	for {
		yyj962++
		if yyhl962 {
			yyb962 = yyj962 > l
		} else {
			yyb962 = r.CheckBreak()
		}
		if yyb962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym969 := z.EncBinary()
		_ = yym969
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep970 := !z.EncBinary()
			yy2arr970 := z.EncBasicHandle().StructToArray
			var yyq970 [5]bool
			_, _, _ = yysep970, yyq970, yy2arr970
			const yyr970 bool = false
			yyq970[0] = x.Kind != ""
			yyq970[1] = x.APIVersion != ""
			yyq970[2] = true
			yyq970[3] = true
			yyq970[4] = true
			var yynn970 int
			if yyr970 || yy2arr970 {
				r.EncodeArrayStart(5)
			} else {
				yynn970 = 0
				for _, b := range yyq970 {
					if b {
						yynn970++
					}
				}
				r.EncodeMapStart(yynn970)
				yynn970 = 0
			}
			if yyr970 || yy2arr970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq970[0] {
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq970[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr970 || yy2arr970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq970[1] {
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq970[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym976 := z.EncBinary()
					_ = yym976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr970 || yy2arr970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq970[2] {
					yy978 := &x.ObjectMeta
					yy978.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq970[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy979 := &x.ObjectMeta
					yy979.CodecEncodeSelf(e)
				}
			}
			if yyr970 || yy2arr970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq970[3] {
					yy981 := &x.Spec
					yy981.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq970[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy982 := &x.Spec
					yy982.CodecEncodeSelf(e)
				}
			}
			if yyr970 || yy2arr970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq970[4] {
					yy984 := &x.Status
					yy984.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq970[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy985 := &x.Status
					yy985.CodecEncodeSelf(e)
				}
			}
			if yyr970 || yy2arr970 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym986 := z.DecBinary()
	_ = yym986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct987 := r.ContainerType()
		if yyct987 == codecSelferValueTypeMap1234 {
			yyl987 := r.ReadMapStart()
			if yyl987 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl987, d)
			}
		} else if yyct987 == codecSelferValueTypeArray1234 {
			yyl987 := r.ReadArrayStart()
			if yyl987 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys988Slc
	var yyhl988 bool = l >= 0
	for yyj988 := 0; ; yyj988++ {
		if yyhl988 {
			if yyj988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys988Slc = r.DecodeBytes(yys988Slc, true, true)
		yys988 := string(yys988Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys988 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv991 := &x.ObjectMeta
				yyv991.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv992 := &x.Spec
				yyv992.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv993 := &x.Status
				yyv993.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys988)
		} // end switch yys988
	} // end for yyj988
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj994 int
	var yyb994 bool
	var yyhl994 bool = l >= 0
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv997 := &x.ObjectMeta
		yyv997.CodecDecodeSelf(d)
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv998 := &x.Spec
		yyv998.CodecDecodeSelf(d)
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv999 := &x.Status
		yyv999.CodecDecodeSelf(d)
	}
	for {
		yyj994++
		if yyhl994 {
			yyb994 = yyj994 > l
		} else {
			yyb994 = r.CheckBreak()
		}
		if yyb994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1000 := z.EncBinary()
		_ = yym1000
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1001 := !z.EncBinary()
			yy2arr1001 := z.EncBasicHandle().StructToArray
			var yyq1001 [4]bool
			_, _, _ = yysep1001, yyq1001, yy2arr1001
			const yyr1001 bool = false
			yyq1001[0] = x.Kind != ""
			yyq1001[1] = x.APIVersion != ""
			yyq1001[2] = true
			var yynn1001 int
			if yyr1001 || yy2arr1001 {
				r.EncodeArrayStart(4)
			} else {
				yynn1001 = 1
				for _, b := range yyq1001 {
					if b {
						yynn1001++
					}
				}
				r.EncodeMapStart(yynn1001)
				yynn1001 = 0
			}
			if yyr1001 || yy2arr1001 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1001[0] {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1001[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1001 || yy2arr1001 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1001[1] {
					yym1006 := z.EncBinary()
					_ = yym1006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1001[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1001 || yy2arr1001 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1001[2] {
					yy1009 := &x.ListMeta
					yym1010 := z.EncBinary()
					_ = yym1010
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1009) {
					} else {
						z.EncFallback(yy1009)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1001[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1011 := &x.ListMeta
					yym1012 := z.EncBinary()
					_ = yym1012
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1011) {
					} else {
						z.EncFallback(yy1011)
					}
				}
			}
			if yyr1001 || yy2arr1001 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1014 := z.EncBinary()
					_ = yym1014
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1015 := z.EncBinary()
					_ = yym1015
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr1001 || yy2arr1001 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1016 := z.DecBinary()
	_ = yym1016
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1017 := r.ContainerType()
		if yyct1017 == codecSelferValueTypeMap1234 {
			yyl1017 := r.ReadMapStart()
			if yyl1017 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1017, d)
			}
		} else if yyct1017 == codecSelferValueTypeArray1234 {
			yyl1017 := r.ReadArrayStart()
			if yyl1017 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1017, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1018Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1018Slc
	var yyhl1018 bool = l >= 0
	for yyj1018 := 0; ; yyj1018++ {
		if yyhl1018 {
			if yyj1018 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1018Slc = r.DecodeBytes(yys1018Slc, true, true)
		yys1018 := string(yys1018Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1018 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1021 := &x.ListMeta
				yym1022 := z.DecBinary()
				_ = yym1022
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1021) {
				} else {
					z.DecFallback(yyv1021, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1023 := &x.Items
				yym1024 := z.DecBinary()
				_ = yym1024
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv1023), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1018)
		} // end switch yys1018
	} // end for yyj1018
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1025 int
	var yyb1025 bool
	var yyhl1025 bool = l >= 0
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1028 := &x.ListMeta
		yym1029 := z.DecBinary()
		_ = yym1029
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1028) {
		} else {
			z.DecFallback(yyv1028, false)
		}
	}
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1030 := &x.Items
		yym1031 := z.DecBinary()
		_ = yym1031
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv1030), d)
		}
	}
	for {
		yyj1025++
		if yyhl1025 {
			yyb1025 = yyj1025 > l
		} else {
			yyb1025 = r.CheckBreak()
		}
		if yyb1025 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1025-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1032 := z.EncBinary()
		_ = yym1032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1033 := !z.EncBinary()
			yy2arr1033 := z.EncBasicHandle().StructToArray
			var yyq1033 [5]bool
			_, _, _ = yysep1033, yyq1033, yy2arr1033
			const yyr1033 bool = false
			yyq1033[0] = x.Parallelism != nil
			yyq1033[1] = x.Completions != nil
			yyq1033[2] = x.ActiveDeadlineSeconds != nil
			yyq1033[3] = x.Selector != nil
			var yynn1033 int
			if yyr1033 || yy2arr1033 {
				r.EncodeArrayStart(5)
			} else {
				yynn1033 = 1
				for _, b := range yyq1033 {
					if b {
						yynn1033++
					}
				}
				r.EncodeMapStart(yynn1033)
				yynn1033 = 0
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1033[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy1035 := *x.Parallelism
						yym1036 := z.EncBinary()
						_ = yym1036
						if false {
						} else {
							r.EncodeInt(int64(yy1035))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1033[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy1037 := *x.Parallelism
						yym1038 := z.EncBinary()
						_ = yym1038
						if false {
						} else {
							r.EncodeInt(int64(yy1037))
						}
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1033[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy1040 := *x.Completions
						yym1041 := z.EncBinary()
						_ = yym1041
						if false {
						} else {
							r.EncodeInt(int64(yy1040))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1033[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy1042 := *x.Completions
						yym1043 := z.EncBinary()
						_ = yym1043
						if false {
						} else {
							r.EncodeInt(int64(yy1042))
						}
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1033[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1045 := *x.ActiveDeadlineSeconds
						yym1046 := z.EncBinary()
						_ = yym1046
						if false {
						} else {
							r.EncodeInt(int64(yy1045))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1033[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1047 := *x.ActiveDeadlineSeconds
						yym1048 := z.EncBinary()
						_ = yym1048
						if false {
						} else {
							r.EncodeInt(int64(yy1047))
						}
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1033[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1033[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1051 := &x.Template
				yy1051.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1052 := &x.Template
				yy1052.CodecEncodeSelf(e)
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1053 := z.DecBinary()
	_ = yym1053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1054 := r.ContainerType()
		if yyct1054 == codecSelferValueTypeMap1234 {
			yyl1054 := r.ReadMapStart()
			if yyl1054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1054, d)
			}
		} else if yyct1054 == codecSelferValueTypeArray1234 {
			yyl1054 := r.ReadArrayStart()
			if yyl1054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1055Slc
	var yyhl1055 bool = l >= 0
	for yyj1055 := 0; ; yyj1055++ {
		if yyhl1055 {
			if yyj1055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1055Slc = r.DecodeBytes(yys1055Slc, true, true)
		yys1055 := string(yys1055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1055 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int32)
				}
				yym1057 := z.DecBinary()
				_ = yym1057
				if false {
				} else {
					*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int32)
				}
				yym1059 := z.DecBinary()
				_ = yym1059
				if false {
				} else {
					*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1061 := z.DecBinary()
				_ = yym1061
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv1063 := &x.Template
				yyv1063.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1055)
		} // end switch yys1055
	} // end for yyj1055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1064 int
	var yyb1064 bool
	var yyhl1064 bool = l >= 0
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int32)
		}
		yym1066 := z.DecBinary()
		_ = yym1066
		if false {
		} else {
			*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
		}
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int32)
		}
		yym1068 := z.DecBinary()
		_ = yym1068
		if false {
		} else {
			*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
		}
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1070 := z.DecBinary()
		_ = yym1070
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv1072 := &x.Template
		yyv1072.CodecDecodeSelf(d)
	}
	for {
		yyj1064++
		if yyhl1064 {
			yyb1064 = yyj1064 > l
		} else {
			yyb1064 = r.CheckBreak()
		}
		if yyb1064 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1064-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1073 := z.EncBinary()
		_ = yym1073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1074 := !z.EncBinary()
			yy2arr1074 := z.EncBasicHandle().StructToArray
			var yyq1074 [6]bool
			_, _, _ = yysep1074, yyq1074, yy2arr1074
			const yyr1074 bool = false
			yyq1074[0] = len(x.Conditions) != 0
			yyq1074[1] = x.StartTime != nil
			yyq1074[2] = x.CompletionTime != nil
			yyq1074[3] = x.Active != 0
			yyq1074[4] = x.Succeeded != 0
			yyq1074[5] = x.Failed != 0
			var yynn1074 int
			if yyr1074 || yy2arr1074 {
				r.EncodeArrayStart(6)
			} else {
				yynn1074 = 0
				for _, b := range yyq1074 {
					if b {
						yynn1074++
					}
				}
				r.EncodeMapStart(yynn1074)
				yynn1074 = 0
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1076 := z.EncBinary()
						_ = yym1076
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1077 := z.EncBinary()
						_ = yym1077
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1079 := z.EncBinary()
						_ = yym1079
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1079 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1079 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1080 := z.EncBinary()
						_ = yym1080
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1080 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1080 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym1082 := z.EncBinary()
						_ = yym1082
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym1082 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym1082 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym1083 := z.EncBinary()
						_ = yym1083
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym1083 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym1083 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[3] {
					yym1085 := z.EncBinary()
					_ = yym1085
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1074[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1086 := z.EncBinary()
					_ = yym1086
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[4] {
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1074[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[5] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1074[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1093 := z.DecBinary()
	_ = yym1093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1094 := r.ContainerType()
		if yyct1094 == codecSelferValueTypeMap1234 {
			yyl1094 := r.ReadMapStart()
			if yyl1094 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1094, d)
			}
		} else if yyct1094 == codecSelferValueTypeArray1234 {
			yyl1094 := r.ReadArrayStart()
			if yyl1094 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1095Slc
	var yyhl1095 bool = l >= 0
	for yyj1095 := 0; ; yyj1095++ {
		if yyhl1095 {
			if yyj1095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1095Slc = r.DecodeBytes(yys1095Slc, true, true)
		yys1095 := string(yys1095Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1095 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1096 := &x.Conditions
				yym1097 := z.DecBinary()
				_ = yym1097
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv1096), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym1099 := z.DecBinary()
				_ = yym1099
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1099 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1099 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym1101 := z.DecBinary()
				_ = yym1101
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym1101 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym1101 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int32(r.DecodeInt(32))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int32(r.DecodeInt(32))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1095)
		} // end switch yys1095
	} // end for yyj1095
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1105 int
	var yyb1105 bool
	var yyhl1105 bool = l >= 0
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1106 := &x.Conditions
		yym1107 := z.DecBinary()
		_ = yym1107
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv1106), d)
		}
	}
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym1109 := z.DecBinary()
		_ = yym1109
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1109 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1109 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym1111 := z.DecBinary()
		_ = yym1111
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym1111 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym1111 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int32(r.DecodeInt(32))
	}
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int32(r.DecodeInt(32))
	}
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int32(r.DecodeInt(32))
	}
	for {
		yyj1105++
		if yyhl1105 {
			yyb1105 = yyj1105 > l
		} else {
			yyb1105 = r.CheckBreak()
		}
		if yyb1105 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1105-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1115 := z.EncBinary()
	_ = yym1115
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1116 := z.DecBinary()
	_ = yym1116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1117 := z.EncBinary()
		_ = yym1117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1118 := !z.EncBinary()
			yy2arr1118 := z.EncBasicHandle().StructToArray
			var yyq1118 [6]bool
			_, _, _ = yysep1118, yyq1118, yy2arr1118
			const yyr1118 bool = false
			yyq1118[2] = true
			yyq1118[3] = true
			yyq1118[4] = x.Reason != ""
			yyq1118[5] = x.Message != ""
			var yynn1118 int
			if yyr1118 || yy2arr1118 {
				r.EncodeArrayStart(6)
			} else {
				yynn1118 = 2
				for _, b := range yyq1118 {
					if b {
						yynn1118++
					}
				}
				r.EncodeMapStart(yynn1118)
				yynn1118 = 0
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1121 := z.EncBinary()
				_ = yym1121
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1122 := z.EncBinary()
				_ = yym1122
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[2] {
					yy1124 := &x.LastProbeTime
					yym1125 := z.EncBinary()
					_ = yym1125
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1124) {
					} else if yym1125 {
						z.EncBinaryMarshal(yy1124)
					} else if !yym1125 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1124)
					} else {
						z.EncFallback(yy1124)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1118[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1126 := &x.LastProbeTime
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1126) {
					} else if yym1127 {
						z.EncBinaryMarshal(yy1126)
					} else if !yym1127 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1126)
					} else {
						z.EncFallback(yy1126)
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[3] {
					yy1129 := &x.LastTransitionTime
					yym1130 := z.EncBinary()
					_ = yym1130
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1129) {
					} else if yym1130 {
						z.EncBinaryMarshal(yy1129)
					} else if !yym1130 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1129)
					} else {
						z.EncFallback(yy1129)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1118[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1131 := &x.LastTransitionTime
					yym1132 := z.EncBinary()
					_ = yym1132
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1131) {
					} else if yym1132 {
						z.EncBinaryMarshal(yy1131)
					} else if !yym1132 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1131)
					} else {
						z.EncFallback(yy1131)
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[4] {
					yym1134 := z.EncBinary()
					_ = yym1134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1118[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1135 := z.EncBinary()
					_ = yym1135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[5] {
					yym1137 := z.EncBinary()
					_ = yym1137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1118[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1138 := z.EncBinary()
					_ = yym1138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1139 := z.DecBinary()
	_ = yym1139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1140 := r.ContainerType()
		if yyct1140 == codecSelferValueTypeMap1234 {
			yyl1140 := r.ReadMapStart()
			if yyl1140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1140, d)
			}
		} else if yyct1140 == codecSelferValueTypeArray1234 {
			yyl1140 := r.ReadArrayStart()
			if yyl1140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1141Slc
	var yyhl1141 bool = l >= 0
	for yyj1141 := 0; ; yyj1141++ {
		if yyhl1141 {
			if yyj1141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1141Slc = r.DecodeBytes(yys1141Slc, true, true)
		yys1141 := string(yys1141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1141 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1144 := &x.LastProbeTime
				yym1145 := z.DecBinary()
				_ = yym1145
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1144) {
				} else if yym1145 {
					z.DecBinaryUnmarshal(yyv1144)
				} else if !yym1145 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1144)
				} else {
					z.DecFallback(yyv1144, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1146 := &x.LastTransitionTime
				yym1147 := z.DecBinary()
				_ = yym1147
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1146) {
				} else if yym1147 {
					z.DecBinaryUnmarshal(yyv1146)
				} else if !yym1147 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1146)
				} else {
					z.DecFallback(yyv1146, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1141)
		} // end switch yys1141
	} // end for yyj1141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1150 int
	var yyb1150 bool
	var yyhl1150 bool = l >= 0
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1153 := &x.LastProbeTime
		yym1154 := z.DecBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1153) {
		} else if yym1154 {
			z.DecBinaryUnmarshal(yyv1153)
		} else if !yym1154 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1153)
		} else {
			z.DecFallback(yyv1153, false)
		}
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1155 := &x.LastTransitionTime
		yym1156 := z.DecBinary()
		_ = yym1156
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1155) {
		} else if yym1156 {
			z.DecBinaryUnmarshal(yyv1155)
		} else if !yym1156 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1155)
		} else {
			z.DecFallback(yyv1155, false)
		}
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1150++
		if yyhl1150 {
			yyb1150 = yyj1150 > l
		} else {
			yyb1150 = r.CheckBreak()
		}
		if yyb1150 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1150-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1159 := z.EncBinary()
		_ = yym1159
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1160 := !z.EncBinary()
			yy2arr1160 := z.EncBasicHandle().StructToArray
			var yyq1160 [5]bool
			_, _, _ = yysep1160, yyq1160, yy2arr1160
			const yyr1160 bool = false
			yyq1160[0] = x.Kind != ""
			yyq1160[1] = x.APIVersion != ""
			yyq1160[2] = true
			yyq1160[3] = true
			yyq1160[4] = true
			var yynn1160 int
			if yyr1160 || yy2arr1160 {
				r.EncodeArrayStart(5)
			} else {
				yynn1160 = 0
				for _, b := range yyq1160 {
					if b {
						yynn1160++
					}
				}
				r.EncodeMapStart(yynn1160)
				yynn1160 = 0
			}
			if yyr1160 || yy2arr1160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1160[0] {
					yym1162 := z.EncBinary()
					_ = yym1162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1160[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1163 := z.EncBinary()
					_ = yym1163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1160 || yy2arr1160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1160[1] {
					yym1165 := z.EncBinary()
					_ = yym1165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1160[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1166 := z.EncBinary()
					_ = yym1166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1160 || yy2arr1160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1160[2] {
					yy1168 := &x.ObjectMeta
					yy1168.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1160[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1169 := &x.ObjectMeta
					yy1169.CodecEncodeSelf(e)
				}
			}
			if yyr1160 || yy2arr1160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1160[3] {
					yy1171 := &x.Spec
					yy1171.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1160[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1172 := &x.Spec
					yy1172.CodecEncodeSelf(e)
				}
			}
			if yyr1160 || yy2arr1160 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1160[4] {
					yy1174 := &x.Status
					yy1174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1160[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1175 := &x.Status
					yy1175.CodecEncodeSelf(e)
				}
			}
			if yyr1160 || yy2arr1160 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1176 := z.DecBinary()
	_ = yym1176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1177 := r.ContainerType()
		if yyct1177 == codecSelferValueTypeMap1234 {
			yyl1177 := r.ReadMapStart()
			if yyl1177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1177, d)
			}
		} else if yyct1177 == codecSelferValueTypeArray1234 {
			yyl1177 := r.ReadArrayStart()
			if yyl1177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1178Slc
	var yyhl1178 bool = l >= 0
	for yyj1178 := 0; ; yyj1178++ {
		if yyhl1178 {
			if yyj1178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1178Slc = r.DecodeBytes(yys1178Slc, true, true)
		yys1178 := string(yys1178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1178 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1181 := &x.ObjectMeta
				yyv1181.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv1182 := &x.Spec
				yyv1182.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv1183 := &x.Status
				yyv1183.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1178)
		} // end switch yys1178
	} // end for yyj1178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1184 int
	var yyb1184 bool
	var yyhl1184 bool = l >= 0
	yyj1184++
	if yyhl1184 {
		yyb1184 = yyj1184 > l
	} else {
		yyb1184 = r.CheckBreak()
	}
	if yyb1184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1184++
	if yyhl1184 {
		yyb1184 = yyj1184 > l
	} else {
		yyb1184 = r.CheckBreak()
	}
	if yyb1184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1184++
	if yyhl1184 {
		yyb1184 = yyj1184 > l
	} else {
		yyb1184 = r.CheckBreak()
	}
	if yyb1184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1187 := &x.ObjectMeta
		yyv1187.CodecDecodeSelf(d)
	}
	yyj1184++
	if yyhl1184 {
		yyb1184 = yyj1184 > l
	} else {
		yyb1184 = r.CheckBreak()
	}
	if yyb1184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv1188 := &x.Spec
		yyv1188.CodecDecodeSelf(d)
	}
	yyj1184++
	if yyhl1184 {
		yyb1184 = yyj1184 > l
	} else {
		yyb1184 = r.CheckBreak()
	}
	if yyb1184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv1189 := &x.Status
		yyv1189.CodecDecodeSelf(d)
	}
	for {
		yyj1184++
		if yyhl1184 {
			yyb1184 = yyj1184 > l
		} else {
			yyb1184 = r.CheckBreak()
		}
		if yyb1184 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1184-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1190 := z.EncBinary()
		_ = yym1190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1191 := !z.EncBinary()
			yy2arr1191 := z.EncBasicHandle().StructToArray
			var yyq1191 [4]bool
			_, _, _ = yysep1191, yyq1191, yy2arr1191
			const yyr1191 bool = false
			yyq1191[0] = x.Kind != ""
			yyq1191[1] = x.APIVersion != ""
			yyq1191[2] = true
			var yynn1191 int
			if yyr1191 || yy2arr1191 {
				r.EncodeArrayStart(4)
			} else {
				yynn1191 = 1
				for _, b := range yyq1191 {
					if b {
						yynn1191++
					}
				}
				r.EncodeMapStart(yynn1191)
				yynn1191 = 0
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1191[0] {
					yym1193 := z.EncBinary()
					_ = yym1193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1191[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1194 := z.EncBinary()
					_ = yym1194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1191[1] {
					yym1196 := z.EncBinary()
					_ = yym1196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1191[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1197 := z.EncBinary()
					_ = yym1197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1191[2] {
					yy1199 := &x.ListMeta
					yym1200 := z.EncBinary()
					_ = yym1200
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1199) {
					} else {
						z.EncFallback(yy1199)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1191[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1201 := &x.ListMeta
					yym1202 := z.EncBinary()
					_ = yym1202
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1201) {
					} else {
						z.EncFallback(yy1201)
					}
				}
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1204 := z.EncBinary()
					_ = yym1204
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1207 := r.ContainerType()
		if yyct1207 == codecSelferValueTypeMap1234 {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if yyct1207 == codecSelferValueTypeArray1234 {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1208 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1211 := &x.ListMeta
				yym1212 := z.DecBinary()
				_ = yym1212
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1211) {
				} else {
					z.DecFallback(yyv1211, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1213 := &x.Items
				yym1214 := z.DecBinary()
				_ = yym1214
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv1213), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1215 int
	var yyb1215 bool
	var yyhl1215 bool = l >= 0
	yyj1215++
	if yyhl1215 {
		yyb1215 = yyj1215 > l
	} else {
		yyb1215 = r.CheckBreak()
	}
	if yyb1215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1215++
	if yyhl1215 {
		yyb1215 = yyj1215 > l
	} else {
		yyb1215 = r.CheckBreak()
	}
	if yyb1215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1215++
	if yyhl1215 {
		yyb1215 = yyj1215 > l
	} else {
		yyb1215 = r.CheckBreak()
	}
	if yyb1215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1218 := &x.ListMeta
		yym1219 := z.DecBinary()
		_ = yym1219
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1218) {
		} else {
			z.DecFallback(yyv1218, false)
		}
	}
	yyj1215++
	if yyhl1215 {
		yyb1215 = yyj1215 > l
	} else {
		yyb1215 = r.CheckBreak()
	}
	if yyb1215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1220 := &x.Items
		yym1221 := z.DecBinary()
		_ = yym1221
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv1220), d)
		}
	}
	for {
		yyj1215++
		if yyhl1215 {
			yyb1215 = yyj1215 > l
		} else {
			yyb1215 = r.CheckBreak()
		}
		if yyb1215 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1215-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1222 := z.EncBinary()
		_ = yym1222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1223 := !z.EncBinary()
			yy2arr1223 := z.EncBasicHandle().StructToArray
			var yyq1223 [2]bool
			_, _, _ = yysep1223, yyq1223, yy2arr1223
			const yyr1223 bool = false
			yyq1223[0] = x.Backend != nil
			yyq1223[1] = len(x.Rules) != 0
			var yynn1223 int
			if yyr1223 || yy2arr1223 {
				r.EncodeArrayStart(2)
			} else {
				yynn1223 = 0
				for _, b := range yyq1223 {
					if b {
						yynn1223++
					}
				}
				r.EncodeMapStart(yynn1223)
				yynn1223 = 0
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1223[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1223[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1223[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1226 := z.EncBinary()
						_ = yym1226
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1223[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1227 := z.EncBinary()
						_ = yym1227
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1228 := z.DecBinary()
	_ = yym1228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1229 := r.ContainerType()
		if yyct1229 == codecSelferValueTypeMap1234 {
			yyl1229 := r.ReadMapStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1229, d)
			}
		} else if yyct1229 == codecSelferValueTypeArray1234 {
			yyl1229 := r.ReadArrayStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1230Slc
	var yyhl1230 bool = l >= 0
	for yyj1230 := 0; ; yyj1230++ {
		if yyhl1230 {
			if yyj1230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1230Slc = r.DecodeBytes(yys1230Slc, true, true)
		yys1230 := string(yys1230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1230 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv1232 := &x.Rules
				yym1233 := z.DecBinary()
				_ = yym1233
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv1232), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1230)
		} // end switch yys1230
	} // end for yyj1230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1234 int
	var yyb1234 bool
	var yyhl1234 bool = l >= 0
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv1236 := &x.Rules
		yym1237 := z.DecBinary()
		_ = yym1237
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv1236), d)
		}
	}
	for {
		yyj1234++
		if yyhl1234 {
			yyb1234 = yyj1234 > l
		} else {
			yyb1234 = r.CheckBreak()
		}
		if yyb1234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1238 := z.EncBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1239 := !z.EncBinary()
			yy2arr1239 := z.EncBasicHandle().StructToArray
			var yyq1239 [1]bool
			_, _, _ = yysep1239, yyq1239, yy2arr1239
			const yyr1239 bool = false
			yyq1239[0] = true
			var yynn1239 int
			if yyr1239 || yy2arr1239 {
				r.EncodeArrayStart(1)
			} else {
				yynn1239 = 0
				for _, b := range yyq1239 {
					if b {
						yynn1239++
					}
				}
				r.EncodeMapStart(yynn1239)
				yynn1239 = 0
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[0] {
					yy1241 := &x.LoadBalancer
					yy1241.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1242 := &x.LoadBalancer
					yy1242.CodecEncodeSelf(e)
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1243 := z.DecBinary()
	_ = yym1243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1244 := r.ContainerType()
		if yyct1244 == codecSelferValueTypeMap1234 {
			yyl1244 := r.ReadMapStart()
			if yyl1244 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1244, d)
			}
		} else if yyct1244 == codecSelferValueTypeArray1234 {
			yyl1244 := r.ReadArrayStart()
			if yyl1244 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1244, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1245Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1245Slc
	var yyhl1245 bool = l >= 0
	for yyj1245 := 0; ; yyj1245++ {
		if yyhl1245 {
			if yyj1245 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1245Slc = r.DecodeBytes(yys1245Slc, true, true)
		yys1245 := string(yys1245Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1245 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
			} else {
				yyv1246 := &x.LoadBalancer
				yyv1246.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1245)
		} // end switch yys1245
	} // end for yyj1245
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1247 int
	var yyb1247 bool
	var yyhl1247 bool = l >= 0
	yyj1247++
	if yyhl1247 {
		yyb1247 = yyj1247 > l
	} else {
		yyb1247 = r.CheckBreak()
	}
	if yyb1247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
	} else {
		yyv1248 := &x.LoadBalancer
		yyv1248.CodecDecodeSelf(d)
	}
	for {
		yyj1247++
		if yyhl1247 {
			yyb1247 = yyj1247 > l
		} else {
			yyb1247 = r.CheckBreak()
		}
		if yyb1247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1249 := z.EncBinary()
		_ = yym1249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1250 := !z.EncBinary()
			yy2arr1250 := z.EncBasicHandle().StructToArray
			var yyq1250 [2]bool
			_, _, _ = yysep1250, yyq1250, yy2arr1250
			const yyr1250 bool = false
			yyq1250[0] = x.Host != ""
			yyq1250[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1250 int
			if yyr1250 || yy2arr1250 {
				r.EncodeArrayStart(2)
			} else {
				yynn1250 = 0
				for _, b := range yyq1250 {
					if b {
						yynn1250++
					}
				}
				r.EncodeMapStart(yynn1250)
				yynn1250 = 0
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[0] {
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1253 := z.EncBinary()
					_ = yym1253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1254 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1254 = true
				goto LABEL1254
			}
		LABEL1254:
			if yyr1250 || yy2arr1250 {
				if yyn1254 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1250[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1254 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1255 := z.DecBinary()
	_ = yym1255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1256 := r.ContainerType()
		if yyct1256 == codecSelferValueTypeMap1234 {
			yyl1256 := r.ReadMapStart()
			if yyl1256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1256, d)
			}
		} else if yyct1256 == codecSelferValueTypeArray1234 {
			yyl1256 := r.ReadArrayStart()
			if yyl1256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1257Slc
	var yyhl1257 bool = l >= 0
	for yyj1257 := 0; ; yyj1257++ {
		if yyhl1257 {
			if yyj1257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1257Slc = r.DecodeBytes(yys1257Slc, true, true)
		yys1257 := string(yys1257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1257 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1257)
		} // end switch yys1257
	} // end for yyj1257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1260 int
	var yyb1260 bool
	var yyhl1260 bool = l >= 0
	yyj1260++
	if yyhl1260 {
		yyb1260 = yyj1260 > l
	} else {
		yyb1260 = r.CheckBreak()
	}
	if yyb1260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1260++
	if yyhl1260 {
		yyb1260 = yyj1260 > l
	} else {
		yyb1260 = r.CheckBreak()
	}
	if yyb1260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1260++
		if yyhl1260 {
			yyb1260 = yyj1260 > l
		} else {
			yyb1260 = r.CheckBreak()
		}
		if yyb1260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1263 := z.EncBinary()
		_ = yym1263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1264 := !z.EncBinary()
			yy2arr1264 := z.EncBasicHandle().StructToArray
			var yyq1264 [1]bool
			_, _, _ = yysep1264, yyq1264, yy2arr1264
			const yyr1264 bool = false
			yyq1264[0] = x.HTTP != nil
			var yynn1264 int
			if yyr1264 || yy2arr1264 {
				r.EncodeArrayStart(1)
			} else {
				yynn1264 = 0
				for _, b := range yyq1264 {
					if b {
						yynn1264++
					}
				}
				r.EncodeMapStart(yynn1264)
				yynn1264 = 0
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1264[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1264[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1266 := z.DecBinary()
	_ = yym1266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1267 := r.ContainerType()
		if yyct1267 == codecSelferValueTypeMap1234 {
			yyl1267 := r.ReadMapStart()
			if yyl1267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1267, d)
			}
		} else if yyct1267 == codecSelferValueTypeArray1234 {
			yyl1267 := r.ReadArrayStart()
			if yyl1267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1268Slc
	var yyhl1268 bool = l >= 0
	for yyj1268 := 0; ; yyj1268++ {
		if yyhl1268 {
			if yyj1268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1268Slc = r.DecodeBytes(yys1268Slc, true, true)
		yys1268 := string(yys1268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1268 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1268)
		} // end switch yys1268
	} // end for yyj1268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1270 int
	var yyb1270 bool
	var yyhl1270 bool = l >= 0
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1270++
		if yyhl1270 {
			yyb1270 = yyj1270 > l
		} else {
			yyb1270 = r.CheckBreak()
		}
		if yyb1270 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1270-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1272 := z.EncBinary()
		_ = yym1272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1273 := !z.EncBinary()
			yy2arr1273 := z.EncBasicHandle().StructToArray
			var yyq1273 [1]bool
			_, _, _ = yysep1273, yyq1273, yy2arr1273
			const yyr1273 bool = false
			var yynn1273 int
			if yyr1273 || yy2arr1273 {
				r.EncodeArrayStart(1)
			} else {
				yynn1273 = 1
				for _, b := range yyq1273 {
					if b {
						yynn1273++
					}
				}
				r.EncodeMapStart(yynn1273)
				yynn1273 = 0
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1277 := z.DecBinary()
	_ = yym1277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1278 := r.ContainerType()
		if yyct1278 == codecSelferValueTypeMap1234 {
			yyl1278 := r.ReadMapStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1278, d)
			}
		} else if yyct1278 == codecSelferValueTypeArray1234 {
			yyl1278 := r.ReadArrayStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1279Slc
	var yyhl1279 bool = l >= 0
	for yyj1279 := 0; ; yyj1279++ {
		if yyhl1279 {
			if yyj1279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1279Slc = r.DecodeBytes(yys1279Slc, true, true)
		yys1279 := string(yys1279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1279 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1280 := &x.Paths
				yym1281 := z.DecBinary()
				_ = yym1281
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1280), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1279)
		} // end switch yys1279
	} // end for yyj1279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1282 int
	var yyb1282 bool
	var yyhl1282 bool = l >= 0
	yyj1282++
	if yyhl1282 {
		yyb1282 = yyj1282 > l
	} else {
		yyb1282 = r.CheckBreak()
	}
	if yyb1282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1283 := &x.Paths
		yym1284 := z.DecBinary()
		_ = yym1284
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1283), d)
		}
	}
	for {
		yyj1282++
		if yyhl1282 {
			yyb1282 = yyj1282 > l
		} else {
			yyb1282 = r.CheckBreak()
		}
		if yyb1282 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1282-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1285 := z.EncBinary()
		_ = yym1285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1286 := !z.EncBinary()
			yy2arr1286 := z.EncBasicHandle().StructToArray
			var yyq1286 [2]bool
			_, _, _ = yysep1286, yyq1286, yy2arr1286
			const yyr1286 bool = false
			yyq1286[0] = x.Path != ""
			var yynn1286 int
			if yyr1286 || yy2arr1286 {
				r.EncodeArrayStart(2)
			} else {
				yynn1286 = 1
				for _, b := range yyq1286 {
					if b {
						yynn1286++
					}
				}
				r.EncodeMapStart(yynn1286)
				yynn1286 = 0
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1286[0] {
					yym1288 := z.EncBinary()
					_ = yym1288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1286[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1289 := z.EncBinary()
					_ = yym1289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1291 := &x.Backend
				yy1291.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1292 := &x.Backend
				yy1292.CodecEncodeSelf(e)
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1294 := r.ContainerType()
		if yyct1294 == codecSelferValueTypeMap1234 {
			yyl1294 := r.ReadMapStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1294, d)
			}
		} else if yyct1294 == codecSelferValueTypeArray1234 {
			yyl1294 := r.ReadArrayStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1295Slc
	var yyhl1295 bool = l >= 0
	for yyj1295 := 0; ; yyj1295++ {
		if yyhl1295 {
			if yyj1295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1295Slc = r.DecodeBytes(yys1295Slc, true, true)
		yys1295 := string(yys1295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1295 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1297 := &x.Backend
				yyv1297.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1295)
		} // end switch yys1295
	} // end for yyj1295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1298 int
	var yyb1298 bool
	var yyhl1298 bool = l >= 0
	yyj1298++
	if yyhl1298 {
		yyb1298 = yyj1298 > l
	} else {
		yyb1298 = r.CheckBreak()
	}
	if yyb1298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1298++
	if yyhl1298 {
		yyb1298 = yyj1298 > l
	} else {
		yyb1298 = r.CheckBreak()
	}
	if yyb1298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1300 := &x.Backend
		yyv1300.CodecDecodeSelf(d)
	}
	for {
		yyj1298++
		if yyhl1298 {
			yyb1298 = yyj1298 > l
		} else {
			yyb1298 = r.CheckBreak()
		}
		if yyb1298 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1298-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1301 := z.EncBinary()
		_ = yym1301
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1302 := !z.EncBinary()
			yy2arr1302 := z.EncBasicHandle().StructToArray
			var yyq1302 [2]bool
			_, _, _ = yysep1302, yyq1302, yy2arr1302
			const yyr1302 bool = false
			var yynn1302 int
			if yyr1302 || yy2arr1302 {
				r.EncodeArrayStart(2)
			} else {
				yynn1302 = 2
				for _, b := range yyq1302 {
					if b {
						yynn1302++
					}
				}
				r.EncodeMapStart(yynn1302)
				yynn1302 = 0
			}
			if yyr1302 || yy2arr1302 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1304 := z.EncBinary()
				_ = yym1304
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1305 := z.EncBinary()
				_ = yym1305
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1302 || yy2arr1302 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1307 := &x.ServicePort
				yym1308 := z.EncBinary()
				_ = yym1308
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1307) {
				} else if !yym1308 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1307)
				} else {
					z.EncFallback(yy1307)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1309 := &x.ServicePort
				yym1310 := z.EncBinary()
				_ = yym1310
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1309) {
				} else if !yym1310 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1309)
				} else {
					z.EncFallback(yy1309)
				}
			}
			if yyr1302 || yy2arr1302 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1311 := z.DecBinary()
	_ = yym1311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1312 := r.ContainerType()
		if yyct1312 == codecSelferValueTypeMap1234 {
			yyl1312 := r.ReadMapStart()
			if yyl1312 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1312, d)
			}
		} else if yyct1312 == codecSelferValueTypeArray1234 {
			yyl1312 := r.ReadArrayStart()
			if yyl1312 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1312, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1313Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1313Slc
	var yyhl1313 bool = l >= 0
	for yyj1313 := 0; ; yyj1313++ {
		if yyhl1313 {
			if yyj1313 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1313Slc = r.DecodeBytes(yys1313Slc, true, true)
		yys1313 := string(yys1313Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1313 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg9_intstr.IntOrString{}
			} else {
				yyv1315 := &x.ServicePort
				yym1316 := z.DecBinary()
				_ = yym1316
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1315) {
				} else if !yym1316 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1315)
				} else {
					z.DecFallback(yyv1315, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1313)
		} // end switch yys1313
	} // end for yyj1313
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1317 int
	var yyb1317 bool
	var yyhl1317 bool = l >= 0
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg9_intstr.IntOrString{}
	} else {
		yyv1319 := &x.ServicePort
		yym1320 := z.DecBinary()
		_ = yym1320
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1319) {
		} else if !yym1320 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1319)
		} else {
			z.DecFallback(yyv1319, false)
		}
	}
	for {
		yyj1317++
		if yyhl1317 {
			yyb1317 = yyj1317 > l
		} else {
			yyb1317 = r.CheckBreak()
		}
		if yyb1317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1321 := z.EncBinary()
	_ = yym1321
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1322 := z.DecBinary()
	_ = yym1322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1323 := z.EncBinary()
		_ = yym1323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1324 := !z.EncBinary()
			yy2arr1324 := z.EncBasicHandle().StructToArray
			var yyq1324 [2]bool
			_, _, _ = yysep1324, yyq1324, yy2arr1324
			const yyr1324 bool = false
			var yynn1324 int
			if yyr1324 || yy2arr1324 {
				r.EncodeArrayStart(2)
			} else {
				yynn1324 = 2
				for _, b := range yyq1324 {
					if b {
						yynn1324++
					}
				}
				r.EncodeMapStart(yynn1324)
				yynn1324 = 0
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1327 := z.EncBinary()
				_ = yym1327
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1328 := z.EncBinary()
				_ = yym1328
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1329 := z.DecBinary()
	_ = yym1329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1330 := r.ContainerType()
		if yyct1330 == codecSelferValueTypeMap1234 {
			yyl1330 := r.ReadMapStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1330, d)
			}
		} else if yyct1330 == codecSelferValueTypeArray1234 {
			yyl1330 := r.ReadArrayStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1331Slc
	var yyhl1331 bool = l >= 0
	for yyj1331 := 0; ; yyj1331++ {
		if yyhl1331 {
			if yyj1331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1331Slc = r.DecodeBytes(yys1331Slc, true, true)
		yys1331 := string(yys1331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1331 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1331)
		} // end switch yys1331
	} // end for yyj1331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1334 int
	var yyb1334 bool
	var yyhl1334 bool = l >= 0
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1334++
		if yyhl1334 {
			yyb1334 = yyj1334 > l
		} else {
			yyb1334 = r.CheckBreak()
		}
		if yyb1334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1337 := z.EncBinary()
		_ = yym1337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1338 := !z.EncBinary()
			yy2arr1338 := z.EncBasicHandle().StructToArray
			var yyq1338 [3]bool
			_, _, _ = yysep1338, yyq1338, yy2arr1338
			const yyr1338 bool = false
			var yynn1338 int
			if yyr1338 || yy2arr1338 {
				r.EncodeArrayStart(3)
			} else {
				yynn1338 = 3
				for _, b := range yyq1338 {
					if b {
						yynn1338++
					}
				}
				r.EncodeMapStart(yynn1338)
				yynn1338 = 0
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1340 := z.EncBinary()
				_ = yym1340
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1341 := z.EncBinary()
				_ = yym1341
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1343 := z.EncBinary()
				_ = yym1343
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1344 := z.EncBinary()
				_ = yym1344
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1346 := z.EncBinary()
					_ = yym1346
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1347 := z.EncBinary()
					_ = yym1347
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1348 := z.DecBinary()
	_ = yym1348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1349 := r.ContainerType()
		if yyct1349 == codecSelferValueTypeMap1234 {
			yyl1349 := r.ReadMapStart()
			if yyl1349 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1349, d)
			}
		} else if yyct1349 == codecSelferValueTypeArray1234 {
			yyl1349 := r.ReadArrayStart()
			if yyl1349 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1350Slc
	var yyhl1350 bool = l >= 0
	for yyj1350 := 0; ; yyj1350++ {
		if yyhl1350 {
			if yyj1350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1350Slc = r.DecodeBytes(yys1350Slc, true, true)
		yys1350 := string(yys1350Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1350 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int32(r.DecodeInt(32))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int32(r.DecodeInt(32))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1353 := &x.TargetUtilization
				yym1354 := z.DecBinary()
				_ = yym1354
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1353), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1350)
		} // end switch yys1350
	} // end for yyj1350
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1355 int
	var yyb1355 bool
	var yyhl1355 bool = l >= 0
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int32(r.DecodeInt(32))
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int32(r.DecodeInt(32))
	}
	yyj1355++
	if yyhl1355 {
		yyb1355 = yyj1355 > l
	} else {
		yyb1355 = r.CheckBreak()
	}
	if yyb1355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1358 := &x.TargetUtilization
		yym1359 := z.DecBinary()
		_ = yym1359
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1358), d)
		}
	}
	for {
		yyj1355++
		if yyhl1355 {
			yyb1355 = yyj1355 > l
		} else {
			yyb1355 = r.CheckBreak()
		}
		if yyb1355 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1355-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1360 := z.EncBinary()
		_ = yym1360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1361 := !z.EncBinary()
			yy2arr1361 := z.EncBasicHandle().StructToArray
			var yyq1361 [4]bool
			_, _, _ = yysep1361, yyq1361, yy2arr1361
			const yyr1361 bool = false
			yyq1361[0] = x.Kind != ""
			yyq1361[1] = x.APIVersion != ""
			yyq1361[2] = true
			yyq1361[3] = true
			var yynn1361 int
			if yyr1361 || yy2arr1361 {
				r.EncodeArrayStart(4)
			} else {
				yynn1361 = 0
				for _, b := range yyq1361 {
					if b {
						yynn1361++
					}
				}
				r.EncodeMapStart(yynn1361)
				yynn1361 = 0
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1361[0] {
					yym1363 := z.EncBinary()
					_ = yym1363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1361[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1361[1] {
					yym1366 := z.EncBinary()
					_ = yym1366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1361[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1361[2] {
					yy1369 := &x.ObjectMeta
					yy1369.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1361[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1370 := &x.ObjectMeta
					yy1370.CodecEncodeSelf(e)
				}
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1361[3] {
					yy1372 := &x.Spec
					yy1372.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1361[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1373 := &x.Spec
					yy1373.CodecEncodeSelf(e)
				}
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1374 := z.DecBinary()
	_ = yym1374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1375 := r.ContainerType()
		if yyct1375 == codecSelferValueTypeMap1234 {
			yyl1375 := r.ReadMapStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1375, d)
			}
		} else if yyct1375 == codecSelferValueTypeArray1234 {
			yyl1375 := r.ReadArrayStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1376Slc
	var yyhl1376 bool = l >= 0
	for yyj1376 := 0; ; yyj1376++ {
		if yyhl1376 {
			if yyj1376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1376Slc = r.DecodeBytes(yys1376Slc, true, true)
		yys1376 := string(yys1376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1376 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1379 := &x.ObjectMeta
				yyv1379.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1380 := &x.Spec
				yyv1380.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1376)
		} // end switch yys1376
	} // end for yyj1376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1381 int
	var yyb1381 bool
	var yyhl1381 bool = l >= 0
	yyj1381++
	if yyhl1381 {
		yyb1381 = yyj1381 > l
	} else {
		yyb1381 = r.CheckBreak()
	}
	if yyb1381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1381++
	if yyhl1381 {
		yyb1381 = yyj1381 > l
	} else {
		yyb1381 = r.CheckBreak()
	}
	if yyb1381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1381++
	if yyhl1381 {
		yyb1381 = yyj1381 > l
	} else {
		yyb1381 = r.CheckBreak()
	}
	if yyb1381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1384 := &x.ObjectMeta
		yyv1384.CodecDecodeSelf(d)
	}
	yyj1381++
	if yyhl1381 {
		yyb1381 = yyj1381 > l
	} else {
		yyb1381 = r.CheckBreak()
	}
	if yyb1381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1385 := &x.Spec
		yyv1385.CodecDecodeSelf(d)
	}
	for {
		yyj1381++
		if yyhl1381 {
			yyb1381 = yyj1381 > l
		} else {
			yyb1381 = r.CheckBreak()
		}
		if yyb1381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1386 := z.EncBinary()
		_ = yym1386
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1387 := !z.EncBinary()
			yy2arr1387 := z.EncBasicHandle().StructToArray
			var yyq1387 [4]bool
			_, _, _ = yysep1387, yyq1387, yy2arr1387
			const yyr1387 bool = false
			yyq1387[0] = x.Kind != ""
			yyq1387[1] = x.APIVersion != ""
			yyq1387[2] = true
			var yynn1387 int
			if yyr1387 || yy2arr1387 {
				r.EncodeArrayStart(4)
			} else {
				yynn1387 = 1
				for _, b := range yyq1387 {
					if b {
						yynn1387++
					}
				}
				r.EncodeMapStart(yynn1387)
				yynn1387 = 0
			}
			if yyr1387 || yy2arr1387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1387[0] {
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1387[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1387 || yy2arr1387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1387[1] {
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1387[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1387 || yy2arr1387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1387[2] {
					yy1395 := &x.ListMeta
					yym1396 := z.EncBinary()
					_ = yym1396
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1395) {
					} else {
						z.EncFallback(yy1395)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1387[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1397 := &x.ListMeta
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1397) {
					} else {
						z.EncFallback(yy1397)
					}
				}
			}
			if yyr1387 || yy2arr1387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1400 := z.EncBinary()
					_ = yym1400
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1387 || yy2arr1387 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1402 := z.DecBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1403 := r.ContainerType()
		if yyct1403 == codecSelferValueTypeMap1234 {
			yyl1403 := r.ReadMapStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1403, d)
			}
		} else if yyct1403 == codecSelferValueTypeArray1234 {
			yyl1403 := r.ReadArrayStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1404Slc
	var yyhl1404 bool = l >= 0
	for yyj1404 := 0; ; yyj1404++ {
		if yyhl1404 {
			if yyj1404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1404Slc = r.DecodeBytes(yys1404Slc, true, true)
		yys1404 := string(yys1404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1404 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1407 := &x.ListMeta
				yym1408 := z.DecBinary()
				_ = yym1408
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1407) {
				} else {
					z.DecFallback(yyv1407, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1409 := &x.Items
				yym1410 := z.DecBinary()
				_ = yym1410
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1409), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1404)
		} // end switch yys1404
	} // end for yyj1404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1411 int
	var yyb1411 bool
	var yyhl1411 bool = l >= 0
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1414 := &x.ListMeta
		yym1415 := z.DecBinary()
		_ = yym1415
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1414) {
		} else {
			z.DecFallback(yyv1414, false)
		}
	}
	yyj1411++
	if yyhl1411 {
		yyb1411 = yyj1411 > l
	} else {
		yyb1411 = r.CheckBreak()
	}
	if yyb1411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1416 := &x.Items
		yym1417 := z.DecBinary()
		_ = yym1417
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1416), d)
		}
	}
	for {
		yyj1411++
		if yyhl1411 {
			yyb1411 = yyj1411 > l
		} else {
			yyb1411 = r.CheckBreak()
		}
		if yyb1411 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1411-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1418 := z.EncBinary()
		_ = yym1418
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1419 := !z.EncBinary()
			yy2arr1419 := z.EncBasicHandle().StructToArray
			var yyq1419 [4]bool
			_, _, _ = yysep1419, yyq1419, yy2arr1419
			const yyr1419 bool = false
			yyq1419[0] = x.Kind != ""
			yyq1419[1] = x.APIVersion != ""
			var yynn1419 int
			if yyr1419 || yy2arr1419 {
				r.EncodeArrayStart(4)
			} else {
				yynn1419 = 2
				for _, b := range yyq1419 {
					if b {
						yynn1419++
					}
				}
				r.EncodeMapStart(yynn1419)
				yynn1419 = 0
			}
			if yyr1419 || yy2arr1419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1419[0] {
					yym1421 := z.EncBinary()
					_ = yym1421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1419[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1422 := z.EncBinary()
					_ = yym1422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1419 || yy2arr1419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1419[1] {
					yym1424 := z.EncBinary()
					_ = yym1424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1419[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1425 := z.EncBinary()
					_ = yym1425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1419 || yy2arr1419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1427 := z.EncBinary()
				_ = yym1427
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1428 := z.EncBinary()
				_ = yym1428
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr1419 || yy2arr1419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1430 := z.EncBinary()
				_ = yym1430
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1431 := z.EncBinary()
				_ = yym1431
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr1419 || yy2arr1419 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1432 := z.DecBinary()
	_ = yym1432
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1433 := r.ContainerType()
		if yyct1433 == codecSelferValueTypeMap1234 {
			yyl1433 := r.ReadMapStart()
			if yyl1433 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1433, d)
			}
		} else if yyct1433 == codecSelferValueTypeArray1234 {
			yyl1433 := r.ReadArrayStart()
			if yyl1433 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1433, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1434Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1434Slc
	var yyhl1434 bool = l >= 0
	for yyj1434 := 0; ; yyj1434++ {
		if yyhl1434 {
			if yyj1434 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1434Slc = r.DecodeBytes(yys1434Slc, true, true)
		yys1434 := string(yys1434Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1434 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1434)
		} // end switch yys1434
	} // end for yyj1434
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1439 int
	var yyb1439 bool
	var yyhl1439 bool = l >= 0
	yyj1439++
	if yyhl1439 {
		yyb1439 = yyj1439 > l
	} else {
		yyb1439 = r.CheckBreak()
	}
	if yyb1439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1439++
	if yyhl1439 {
		yyb1439 = yyj1439 > l
	} else {
		yyb1439 = r.CheckBreak()
	}
	if yyb1439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1439++
	if yyhl1439 {
		yyb1439 = yyj1439 > l
	} else {
		yyb1439 = r.CheckBreak()
	}
	if yyb1439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj1439++
	if yyhl1439 {
		yyb1439 = yyj1439 > l
	} else {
		yyb1439 = r.CheckBreak()
	}
	if yyb1439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj1439++
		if yyhl1439 {
			yyb1439 = yyj1439 > l
		} else {
			yyb1439 = r.CheckBreak()
		}
		if yyb1439 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1439-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1444 := z.EncBinary()
		_ = yym1444
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1445 := !z.EncBinary()
			yy2arr1445 := z.EncBasicHandle().StructToArray
			var yyq1445 [7]bool
			_, _, _ = yysep1445, yyq1445, yy2arr1445
			const yyr1445 bool = false
			yyq1445[0] = x.Kind != ""
			yyq1445[1] = x.APIVersion != ""
			yyq1445[2] = x.LabelSelector != ""
			yyq1445[3] = x.FieldSelector != ""
			yyq1445[4] = x.Watch != false
			yyq1445[5] = x.ResourceVersion != ""
			yyq1445[6] = x.TimeoutSeconds != nil
			var yynn1445 int
			if yyr1445 || yy2arr1445 {
				r.EncodeArrayStart(7)
			} else {
				yynn1445 = 0
				for _, b := range yyq1445 {
					if b {
						yynn1445++
					}
				}
				r.EncodeMapStart(yynn1445)
				yynn1445 = 0
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1445[0] {
					yym1447 := z.EncBinary()
					_ = yym1447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1445[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1448 := z.EncBinary()
					_ = yym1448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1445[1] {
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1445[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1451 := z.EncBinary()
					_ = yym1451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1445[2] {
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1445[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1454 := z.EncBinary()
					_ = yym1454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1445[3] {
					yym1456 := z.EncBinary()
					_ = yym1456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1445[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1457 := z.EncBinary()
					_ = yym1457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1445[4] {
					yym1459 := z.EncBinary()
					_ = yym1459
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1445[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1460 := z.EncBinary()
					_ = yym1460
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1445[5] {
					yym1462 := z.EncBinary()
					_ = yym1462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1445[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1463 := z.EncBinary()
					_ = yym1463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1445[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy1465 := *x.TimeoutSeconds
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							r.EncodeInt(int64(yy1465))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1445[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy1467 := *x.TimeoutSeconds
						yym1468 := z.EncBinary()
						_ = yym1468
						if false {
						} else {
							r.EncodeInt(int64(yy1467))
						}
					}
				}
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1469 := z.DecBinary()
	_ = yym1469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1470 := r.ContainerType()
		if yyct1470 == codecSelferValueTypeMap1234 {
			yyl1470 := r.ReadMapStart()
			if yyl1470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1470, d)
			}
		} else if yyct1470 == codecSelferValueTypeArray1234 {
			yyl1470 := r.ReadArrayStart()
			if yyl1470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1471Slc
	var yyhl1471 bool = l >= 0
	for yyj1471 := 0; ; yyj1471++ {
		if yyhl1471 {
			if yyj1471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1471Slc = r.DecodeBytes(yys1471Slc, true, true)
		yys1471 := string(yys1471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1471 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym1479 := z.DecBinary()
				_ = yym1479
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1471)
		} // end switch yys1471
	} // end for yyj1471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1480 int
	var yyb1480 bool
	var yyhl1480 bool = l >= 0
	yyj1480++
	if yyhl1480 {
		yyb1480 = yyj1480 > l
	} else {
		yyb1480 = r.CheckBreak()
	}
	if yyb1480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1480++
	if yyhl1480 {
		yyb1480 = yyj1480 > l
	} else {
		yyb1480 = r.CheckBreak()
	}
	if yyb1480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1480++
	if yyhl1480 {
		yyb1480 = yyj1480 > l
	} else {
		yyb1480 = r.CheckBreak()
	}
	if yyb1480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj1480++
	if yyhl1480 {
		yyb1480 = yyj1480 > l
	} else {
		yyb1480 = r.CheckBreak()
	}
	if yyb1480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj1480++
	if yyhl1480 {
		yyb1480 = yyj1480 > l
	} else {
		yyb1480 = r.CheckBreak()
	}
	if yyb1480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj1480++
	if yyhl1480 {
		yyb1480 = yyj1480 > l
	} else {
		yyb1480 = r.CheckBreak()
	}
	if yyb1480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj1480++
	if yyhl1480 {
		yyb1480 = yyj1480 > l
	} else {
		yyb1480 = r.CheckBreak()
	}
	if yyb1480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym1488 := z.DecBinary()
		_ = yym1488
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1480++
		if yyhl1480 {
			yyb1480 = yyj1480 > l
		} else {
			yyb1480 = r.CheckBreak()
		}
		if yyb1480 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1480-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1489 := z.EncBinary()
		_ = yym1489
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1490 := !z.EncBinary()
			yy2arr1490 := z.EncBasicHandle().StructToArray
			var yyq1490 [2]bool
			_, _, _ = yysep1490, yyq1490, yy2arr1490
			const yyr1490 bool = false
			yyq1490[0] = len(x.MatchLabels) != 0
			yyq1490[1] = len(x.MatchExpressions) != 0
			var yynn1490 int
			if yyr1490 || yy2arr1490 {
				r.EncodeArrayStart(2)
			} else {
				yynn1490 = 0
				for _, b := range yyq1490 {
					if b {
						yynn1490++
					}
				}
				r.EncodeMapStart(yynn1490)
				yynn1490 = 0
			}
			if yyr1490 || yy2arr1490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1490[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1492 := z.EncBinary()
						_ = yym1492
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1490[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1493 := z.EncBinary()
						_ = yym1493
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1490 || yy2arr1490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1490[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1495 := z.EncBinary()
						_ = yym1495
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1490[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1496 := z.EncBinary()
						_ = yym1496
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1490 || yy2arr1490 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1497 := z.DecBinary()
	_ = yym1497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1498 := r.ContainerType()
		if yyct1498 == codecSelferValueTypeMap1234 {
			yyl1498 := r.ReadMapStart()
			if yyl1498 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1498, d)
			}
		} else if yyct1498 == codecSelferValueTypeArray1234 {
			yyl1498 := r.ReadArrayStart()
			if yyl1498 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1499Slc
	var yyhl1499 bool = l >= 0
	for yyj1499 := 0; ; yyj1499++ {
		if yyhl1499 {
			if yyj1499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1499Slc = r.DecodeBytes(yys1499Slc, true, true)
		yys1499 := string(yys1499Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1499 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1500 := &x.MatchLabels
				yym1501 := z.DecBinary()
				_ = yym1501
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1500, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1502 := &x.MatchExpressions
				yym1503 := z.DecBinary()
				_ = yym1503
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1502), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1499)
		} // end switch yys1499
	} // end for yyj1499
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1504 int
	var yyb1504 bool
	var yyhl1504 bool = l >= 0
	yyj1504++
	if yyhl1504 {
		yyb1504 = yyj1504 > l
	} else {
		yyb1504 = r.CheckBreak()
	}
	if yyb1504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1505 := &x.MatchLabels
		yym1506 := z.DecBinary()
		_ = yym1506
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1505, false, d)
		}
	}
	yyj1504++
	if yyhl1504 {
		yyb1504 = yyj1504 > l
	} else {
		yyb1504 = r.CheckBreak()
	}
	if yyb1504 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1507 := &x.MatchExpressions
		yym1508 := z.DecBinary()
		_ = yym1508
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1507), d)
		}
	}
	for {
		yyj1504++
		if yyhl1504 {
			yyb1504 = yyj1504 > l
		} else {
			yyb1504 = r.CheckBreak()
		}
		if yyb1504 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1504-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1509 := z.EncBinary()
		_ = yym1509
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1510 := !z.EncBinary()
			yy2arr1510 := z.EncBasicHandle().StructToArray
			var yyq1510 [3]bool
			_, _, _ = yysep1510, yyq1510, yy2arr1510
			const yyr1510 bool = false
			yyq1510[2] = len(x.Values) != 0
			var yynn1510 int
			if yyr1510 || yy2arr1510 {
				r.EncodeArrayStart(3)
			} else {
				yynn1510 = 2
				for _, b := range yyq1510 {
					if b {
						yynn1510++
					}
				}
				r.EncodeMapStart(yynn1510)
				yynn1510 = 0
			}
			if yyr1510 || yy2arr1510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1512 := z.EncBinary()
				_ = yym1512
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1513 := z.EncBinary()
				_ = yym1513
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1510 || yy2arr1510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1510 || yy2arr1510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1510[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1516 := z.EncBinary()
						_ = yym1516
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1510[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1517 := z.EncBinary()
						_ = yym1517
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1510 || yy2arr1510 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1518 := z.DecBinary()
	_ = yym1518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1519 := r.ContainerType()
		if yyct1519 == codecSelferValueTypeMap1234 {
			yyl1519 := r.ReadMapStart()
			if yyl1519 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1519, d)
			}
		} else if yyct1519 == codecSelferValueTypeArray1234 {
			yyl1519 := r.ReadArrayStart()
			if yyl1519 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1520Slc
	var yyhl1520 bool = l >= 0
	for yyj1520 := 0; ; yyj1520++ {
		if yyhl1520 {
			if yyj1520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1520Slc = r.DecodeBytes(yys1520Slc, true, true)
		yys1520 := string(yys1520Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1520 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1523 := &x.Values
				yym1524 := z.DecBinary()
				_ = yym1524
				if false {
				} else {
					z.F.DecSliceStringX(yyv1523, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1520)
		} // end switch yys1520
	} // end for yyj1520
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1525 int
	var yyb1525 bool
	var yyhl1525 bool = l >= 0
	yyj1525++
	if yyhl1525 {
		yyb1525 = yyj1525 > l
	} else {
		yyb1525 = r.CheckBreak()
	}
	if yyb1525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1525++
	if yyhl1525 {
		yyb1525 = yyj1525 > l
	} else {
		yyb1525 = r.CheckBreak()
	}
	if yyb1525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1525++
	if yyhl1525 {
		yyb1525 = yyj1525 > l
	} else {
		yyb1525 = r.CheckBreak()
	}
	if yyb1525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1528 := &x.Values
		yym1529 := z.DecBinary()
		_ = yym1529
		if false {
		} else {
			z.F.DecSliceStringX(yyv1528, false, d)
		}
	}
	for {
		yyj1525++
		if yyhl1525 {
			yyb1525 = yyj1525 > l
		} else {
			yyb1525 = r.CheckBreak()
		}
		if yyb1525 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1525-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1530 := z.EncBinary()
	_ = yym1530
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1531 := z.DecBinary()
	_ = yym1531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1532 := z.EncBinary()
		_ = yym1532
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1533 := !z.EncBinary()
			yy2arr1533 := z.EncBasicHandle().StructToArray
			var yyq1533 [5]bool
			_, _, _ = yysep1533, yyq1533, yy2arr1533
			const yyr1533 bool = false
			yyq1533[0] = x.Kind != ""
			yyq1533[1] = x.APIVersion != ""
			yyq1533[2] = true
			yyq1533[3] = true
			yyq1533[4] = true
			var yynn1533 int
			if yyr1533 || yy2arr1533 {
				r.EncodeArrayStart(5)
			} else {
				yynn1533 = 0
				for _, b := range yyq1533 {
					if b {
						yynn1533++
					}
				}
				r.EncodeMapStart(yynn1533)
				yynn1533 = 0
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[0] {
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1533[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1536 := z.EncBinary()
					_ = yym1536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[1] {
					yym1538 := z.EncBinary()
					_ = yym1538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1533[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1539 := z.EncBinary()
					_ = yym1539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[2] {
					yy1541 := &x.ObjectMeta
					yy1541.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1533[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1542 := &x.ObjectMeta
					yy1542.CodecEncodeSelf(e)
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[3] {
					yy1544 := &x.Spec
					yy1544.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1533[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1545 := &x.Spec
					yy1545.CodecEncodeSelf(e)
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1533[4] {
					yy1547 := &x.Status
					yy1547.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1533[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1548 := &x.Status
					yy1548.CodecEncodeSelf(e)
				}
			}
			if yyr1533 || yy2arr1533 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1549 := z.DecBinary()
	_ = yym1549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1550 := r.ContainerType()
		if yyct1550 == codecSelferValueTypeMap1234 {
			yyl1550 := r.ReadMapStart()
			if yyl1550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1550, d)
			}
		} else if yyct1550 == codecSelferValueTypeArray1234 {
			yyl1550 := r.ReadArrayStart()
			if yyl1550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1551Slc
	var yyhl1551 bool = l >= 0
	for yyj1551 := 0; ; yyj1551++ {
		if yyhl1551 {
			if yyj1551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1551Slc = r.DecodeBytes(yys1551Slc, true, true)
		yys1551 := string(yys1551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1551 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1554 := &x.ObjectMeta
				yyv1554.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1555 := &x.Spec
				yyv1555.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1556 := &x.Status
				yyv1556.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1551)
		} // end switch yys1551
	} // end for yyj1551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1557 int
	var yyb1557 bool
	var yyhl1557 bool = l >= 0
	yyj1557++
	if yyhl1557 {
		yyb1557 = yyj1557 > l
	} else {
		yyb1557 = r.CheckBreak()
	}
	if yyb1557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1557++
	if yyhl1557 {
		yyb1557 = yyj1557 > l
	} else {
		yyb1557 = r.CheckBreak()
	}
	if yyb1557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1557++
	if yyhl1557 {
		yyb1557 = yyj1557 > l
	} else {
		yyb1557 = r.CheckBreak()
	}
	if yyb1557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1560 := &x.ObjectMeta
		yyv1560.CodecDecodeSelf(d)
	}
	yyj1557++
	if yyhl1557 {
		yyb1557 = yyj1557 > l
	} else {
		yyb1557 = r.CheckBreak()
	}
	if yyb1557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1561 := &x.Spec
		yyv1561.CodecDecodeSelf(d)
	}
	yyj1557++
	if yyhl1557 {
		yyb1557 = yyj1557 > l
	} else {
		yyb1557 = r.CheckBreak()
	}
	if yyb1557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1562 := &x.Status
		yyv1562.CodecDecodeSelf(d)
	}
	for {
		yyj1557++
		if yyhl1557 {
			yyb1557 = yyj1557 > l
		} else {
			yyb1557 = r.CheckBreak()
		}
		if yyb1557 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1557-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1563 := z.EncBinary()
		_ = yym1563
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1564 := !z.EncBinary()
			yy2arr1564 := z.EncBasicHandle().StructToArray
			var yyq1564 [4]bool
			_, _, _ = yysep1564, yyq1564, yy2arr1564
			const yyr1564 bool = false
			yyq1564[0] = x.Kind != ""
			yyq1564[1] = x.APIVersion != ""
			yyq1564[2] = true
			var yynn1564 int
			if yyr1564 || yy2arr1564 {
				r.EncodeArrayStart(4)
			} else {
				yynn1564 = 1
				for _, b := range yyq1564 {
					if b {
						yynn1564++
					}
				}
				r.EncodeMapStart(yynn1564)
				yynn1564 = 0
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[0] {
					yym1566 := z.EncBinary()
					_ = yym1566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1564[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1567 := z.EncBinary()
					_ = yym1567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[1] {
					yym1569 := z.EncBinary()
					_ = yym1569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1564[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1570 := z.EncBinary()
					_ = yym1570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[2] {
					yy1572 := &x.ListMeta
					yym1573 := z.EncBinary()
					_ = yym1573
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1572) {
					} else {
						z.EncFallback(yy1572)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1564[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1574 := &x.ListMeta
					yym1575 := z.EncBinary()
					_ = yym1575
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1574) {
					} else {
						z.EncFallback(yy1574)
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1577 := z.EncBinary()
					_ = yym1577
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1578 := z.EncBinary()
					_ = yym1578
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1579 := z.DecBinary()
	_ = yym1579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1580 := r.ContainerType()
		if yyct1580 == codecSelferValueTypeMap1234 {
			yyl1580 := r.ReadMapStart()
			if yyl1580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1580, d)
			}
		} else if yyct1580 == codecSelferValueTypeArray1234 {
			yyl1580 := r.ReadArrayStart()
			if yyl1580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1581Slc
	var yyhl1581 bool = l >= 0
	for yyj1581 := 0; ; yyj1581++ {
		if yyhl1581 {
			if yyj1581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1581Slc = r.DecodeBytes(yys1581Slc, true, true)
		yys1581 := string(yys1581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1581 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1584 := &x.ListMeta
				yym1585 := z.DecBinary()
				_ = yym1585
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1584) {
				} else {
					z.DecFallback(yyv1584, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1586 := &x.Items
				yym1587 := z.DecBinary()
				_ = yym1587
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1586), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1581)
		} // end switch yys1581
	} // end for yyj1581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1588 int
	var yyb1588 bool
	var yyhl1588 bool = l >= 0
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1591 := &x.ListMeta
		yym1592 := z.DecBinary()
		_ = yym1592
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1591) {
		} else {
			z.DecFallback(yyv1591, false)
		}
	}
	yyj1588++
	if yyhl1588 {
		yyb1588 = yyj1588 > l
	} else {
		yyb1588 = r.CheckBreak()
	}
	if yyb1588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1593 := &x.Items
		yym1594 := z.DecBinary()
		_ = yym1594
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1593), d)
		}
	}
	for {
		yyj1588++
		if yyhl1588 {
			yyb1588 = yyj1588 > l
		} else {
			yyb1588 = r.CheckBreak()
		}
		if yyb1588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1595 := z.EncBinary()
		_ = yym1595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1596 := !z.EncBinary()
			yy2arr1596 := z.EncBasicHandle().StructToArray
			var yyq1596 [3]bool
			_, _, _ = yysep1596, yyq1596, yy2arr1596
			const yyr1596 bool = false
			yyq1596[0] = x.Replicas != nil
			yyq1596[1] = x.Selector != nil
			yyq1596[2] = x.Template != nil
			var yynn1596 int
			if yyr1596 || yy2arr1596 {
				r.EncodeArrayStart(3)
			} else {
				yynn1596 = 0
				for _, b := range yyq1596 {
					if b {
						yynn1596++
					}
				}
				r.EncodeMapStart(yynn1596)
				yynn1596 = 0
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1596[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1598 := *x.Replicas
						yym1599 := z.EncBinary()
						_ = yym1599
						if false {
						} else {
							r.EncodeInt(int64(yy1598))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1596[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1600 := *x.Replicas
						yym1601 := z.EncBinary()
						_ = yym1601
						if false {
						} else {
							r.EncodeInt(int64(yy1600))
						}
					}
				}
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1596[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1596[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1596[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1596[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1596 || yy2arr1596 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1604 := z.DecBinary()
	_ = yym1604
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1605 := r.ContainerType()
		if yyct1605 == codecSelferValueTypeMap1234 {
			yyl1605 := r.ReadMapStart()
			if yyl1605 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1605, d)
			}
		} else if yyct1605 == codecSelferValueTypeArray1234 {
			yyl1605 := r.ReadArrayStart()
			if yyl1605 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1605, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1606Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1606Slc
	var yyhl1606 bool = l >= 0
	for yyj1606 := 0; ; yyj1606++ {
		if yyhl1606 {
			if yyj1606 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1606Slc = r.DecodeBytes(yys1606Slc, true, true)
		yys1606 := string(yys1606Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1606 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym1608 := z.DecBinary()
				_ = yym1608
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_v1.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1606)
		} // end switch yys1606
	} // end for yyj1606
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1611 int
	var yyb1611 bool
	var yyhl1611 bool = l >= 0
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym1613 := z.DecBinary()
		_ = yym1613
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_v1.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1611++
		if yyhl1611 {
			yyb1611 = yyj1611 > l
		} else {
			yyb1611 = r.CheckBreak()
		}
		if yyb1611 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1611-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1616 := z.EncBinary()
		_ = yym1616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1617 := !z.EncBinary()
			yy2arr1617 := z.EncBasicHandle().StructToArray
			var yyq1617 [2]bool
			_, _, _ = yysep1617, yyq1617, yy2arr1617
			const yyr1617 bool = false
			yyq1617[1] = x.ObservedGeneration != 0
			var yynn1617 int
			if yyr1617 || yy2arr1617 {
				r.EncodeArrayStart(2)
			} else {
				yynn1617 = 1
				for _, b := range yyq1617 {
					if b {
						yynn1617++
					}
				}
				r.EncodeMapStart(yynn1617)
				yynn1617 = 0
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1619 := z.EncBinary()
				_ = yym1619
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1620 := z.EncBinary()
				_ = yym1620
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[1] {
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1617[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1624 := z.DecBinary()
	_ = yym1624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1625 := r.ContainerType()
		if yyct1625 == codecSelferValueTypeMap1234 {
			yyl1625 := r.ReadMapStart()
			if yyl1625 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1625, d)
			}
		} else if yyct1625 == codecSelferValueTypeArray1234 {
			yyl1625 := r.ReadArrayStart()
			if yyl1625 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1626Slc
	var yyhl1626 bool = l >= 0
	for yyj1626 := 0; ; yyj1626++ {
		if yyhl1626 {
			if yyj1626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1626Slc = r.DecodeBytes(yys1626Slc, true, true)
		yys1626 := string(yys1626Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1626 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1626)
		} // end switch yys1626
	} // end for yyj1626
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1629 int
	var yyb1629 bool
	var yyhl1629 bool = l >= 0
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1629++
		if yyhl1629 {
			yyb1629 = yyj1629 > l
		} else {
			yyb1629 = r.CheckBreak()
		}
		if yyb1629 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1629-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCertificateSigningRequest(v []CertificateSigningRequest, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1632 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1633 := &yyv1632
		yy1633.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCertificateSigningRequest(v *[]CertificateSigningRequest, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1634 := *v
	yyh1634, yyl1634 := z.DecSliceHelperStart()
	var yyc1634 bool
	if yyl1634 == 0 {
		if yyv1634 == nil {
			yyv1634 = []CertificateSigningRequest{}
			yyc1634 = true
		} else if len(yyv1634) != 0 {
			yyv1634 = yyv1634[:0]
			yyc1634 = true
		}
	} else if yyl1634 > 0 {
		var yyrr1634, yyrl1634 int
		var yyrt1634 bool
		if yyl1634 > cap(yyv1634) {

			yyrg1634 := len(yyv1634) > 0
			yyv21634 := yyv1634
			yyrl1634, yyrt1634 = z.DecInferLen(yyl1634, z.DecBasicHandle().MaxInitLen, 624)
			if yyrt1634 {
				if yyrl1634 <= cap(yyv1634) {
					yyv1634 = yyv1634[:yyrl1634]
				} else {
					yyv1634 = make([]CertificateSigningRequest, yyrl1634)
				}
			} else {
				yyv1634 = make([]CertificateSigningRequest, yyrl1634)
			}
			yyc1634 = true
			yyrr1634 = len(yyv1634)
			if yyrg1634 {
				copy(yyv1634, yyv21634)
			}
		} else if yyl1634 != len(yyv1634) {
			yyv1634 = yyv1634[:yyl1634]
			yyc1634 = true
		}
		yyj1634 := 0
		for ; yyj1634 < yyrr1634; yyj1634++ {
			yyh1634.ElemContainerState(yyj1634)
			if r.TryDecodeAsNil() {
				yyv1634[yyj1634] = CertificateSigningRequest{}
			} else {
				yyv1635 := &yyv1634[yyj1634]
				yyv1635.CodecDecodeSelf(d)
			}

		}
		if yyrt1634 {
			for ; yyj1634 < yyl1634; yyj1634++ {
				yyv1634 = append(yyv1634, CertificateSigningRequest{})
				yyh1634.ElemContainerState(yyj1634)
				if r.TryDecodeAsNil() {
					yyv1634[yyj1634] = CertificateSigningRequest{}
				} else {
					yyv1636 := &yyv1634[yyj1634]
					yyv1636.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1634 := 0
		for ; !r.CheckBreak(); yyj1634++ {

			if yyj1634 >= len(yyv1634) {
				yyv1634 = append(yyv1634, CertificateSigningRequest{}) // var yyz1634 CertificateSigningRequest
				yyc1634 = true
			}
			yyh1634.ElemContainerState(yyj1634)
			if yyj1634 < len(yyv1634) {
				if r.TryDecodeAsNil() {
					yyv1634[yyj1634] = CertificateSigningRequest{}
				} else {
					yyv1637 := &yyv1634[yyj1634]
					yyv1637.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1634 < len(yyv1634) {
			yyv1634 = yyv1634[:yyj1634]
			yyc1634 = true
		} else if yyj1634 == 0 && yyv1634 == nil {
			yyv1634 = []CertificateSigningRequest{}
			yyc1634 = true
		}
	}
	yyh1634.End()
	if yyc1634 {
		*v = yyv1634
	}
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1638 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1639 := &yyv1638
		yy1639.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1640 := *v
	yyh1640, yyl1640 := z.DecSliceHelperStart()
	var yyc1640 bool
	if yyl1640 == 0 {
		if yyv1640 == nil {
			yyv1640 = []CustomMetricTarget{}
			yyc1640 = true
		} else if len(yyv1640) != 0 {
			yyv1640 = yyv1640[:0]
			yyc1640 = true
		}
	} else if yyl1640 > 0 {
		var yyrr1640, yyrl1640 int
		var yyrt1640 bool
		if yyl1640 > cap(yyv1640) {

			yyrg1640 := len(yyv1640) > 0
			yyv21640 := yyv1640
			yyrl1640, yyrt1640 = z.DecInferLen(yyl1640, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1640 {
				if yyrl1640 <= cap(yyv1640) {
					yyv1640 = yyv1640[:yyrl1640]
				} else {
					yyv1640 = make([]CustomMetricTarget, yyrl1640)
				}
			} else {
				yyv1640 = make([]CustomMetricTarget, yyrl1640)
			}
			yyc1640 = true
			yyrr1640 = len(yyv1640)
			if yyrg1640 {
				copy(yyv1640, yyv21640)
			}
		} else if yyl1640 != len(yyv1640) {
			yyv1640 = yyv1640[:yyl1640]
			yyc1640 = true
		}
		yyj1640 := 0
		for ; yyj1640 < yyrr1640; yyj1640++ {
			yyh1640.ElemContainerState(yyj1640)
			if r.TryDecodeAsNil() {
				yyv1640[yyj1640] = CustomMetricTarget{}
			} else {
				yyv1641 := &yyv1640[yyj1640]
				yyv1641.CodecDecodeSelf(d)
			}

		}
		if yyrt1640 {
			for ; yyj1640 < yyl1640; yyj1640++ {
				yyv1640 = append(yyv1640, CustomMetricTarget{})
				yyh1640.ElemContainerState(yyj1640)
				if r.TryDecodeAsNil() {
					yyv1640[yyj1640] = CustomMetricTarget{}
				} else {
					yyv1642 := &yyv1640[yyj1640]
					yyv1642.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1640 := 0
		for ; !r.CheckBreak(); yyj1640++ {

			if yyj1640 >= len(yyv1640) {
				yyv1640 = append(yyv1640, CustomMetricTarget{}) // var yyz1640 CustomMetricTarget
				yyc1640 = true
			}
			yyh1640.ElemContainerState(yyj1640)
			if yyj1640 < len(yyv1640) {
				if r.TryDecodeAsNil() {
					yyv1640[yyj1640] = CustomMetricTarget{}
				} else {
					yyv1643 := &yyv1640[yyj1640]
					yyv1643.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1640 < len(yyv1640) {
			yyv1640 = yyv1640[:yyj1640]
			yyc1640 = true
		} else if yyj1640 == 0 && yyv1640 == nil {
			yyv1640 = []CustomMetricTarget{}
			yyc1640 = true
		}
	}
	yyh1640.End()
	if yyc1640 {
		*v = yyv1640
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1644 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1645 := &yyv1644
		yy1645.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1646 := *v
	yyh1646, yyl1646 := z.DecSliceHelperStart()
	var yyc1646 bool
	if yyl1646 == 0 {
		if yyv1646 == nil {
			yyv1646 = []CustomMetricCurrentStatus{}
			yyc1646 = true
		} else if len(yyv1646) != 0 {
			yyv1646 = yyv1646[:0]
			yyc1646 = true
		}
	} else if yyl1646 > 0 {
		var yyrr1646, yyrl1646 int
		var yyrt1646 bool
		if yyl1646 > cap(yyv1646) {

			yyrg1646 := len(yyv1646) > 0
			yyv21646 := yyv1646
			yyrl1646, yyrt1646 = z.DecInferLen(yyl1646, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1646 {
				if yyrl1646 <= cap(yyv1646) {
					yyv1646 = yyv1646[:yyrl1646]
				} else {
					yyv1646 = make([]CustomMetricCurrentStatus, yyrl1646)
				}
			} else {
				yyv1646 = make([]CustomMetricCurrentStatus, yyrl1646)
			}
			yyc1646 = true
			yyrr1646 = len(yyv1646)
			if yyrg1646 {
				copy(yyv1646, yyv21646)
			}
		} else if yyl1646 != len(yyv1646) {
			yyv1646 = yyv1646[:yyl1646]
			yyc1646 = true
		}
		yyj1646 := 0
		for ; yyj1646 < yyrr1646; yyj1646++ {
			yyh1646.ElemContainerState(yyj1646)
			if r.TryDecodeAsNil() {
				yyv1646[yyj1646] = CustomMetricCurrentStatus{}
			} else {
				yyv1647 := &yyv1646[yyj1646]
				yyv1647.CodecDecodeSelf(d)
			}

		}
		if yyrt1646 {
			for ; yyj1646 < yyl1646; yyj1646++ {
				yyv1646 = append(yyv1646, CustomMetricCurrentStatus{})
				yyh1646.ElemContainerState(yyj1646)
				if r.TryDecodeAsNil() {
					yyv1646[yyj1646] = CustomMetricCurrentStatus{}
				} else {
					yyv1648 := &yyv1646[yyj1646]
					yyv1648.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1646 := 0
		for ; !r.CheckBreak(); yyj1646++ {

			if yyj1646 >= len(yyv1646) {
				yyv1646 = append(yyv1646, CustomMetricCurrentStatus{}) // var yyz1646 CustomMetricCurrentStatus
				yyc1646 = true
			}
			yyh1646.ElemContainerState(yyj1646)
			if yyj1646 < len(yyv1646) {
				if r.TryDecodeAsNil() {
					yyv1646[yyj1646] = CustomMetricCurrentStatus{}
				} else {
					yyv1649 := &yyv1646[yyj1646]
					yyv1649.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1646 < len(yyv1646) {
			yyv1646 = yyv1646[:yyj1646]
			yyc1646 = true
		} else if yyj1646 == 0 && yyv1646 == nil {
			yyv1646 = []CustomMetricCurrentStatus{}
			yyc1646 = true
		}
	}
	yyh1646.End()
	if yyc1646 {
		*v = yyv1646
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1650 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1651 := &yyv1650
		yy1651.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1652 := *v
	yyh1652, yyl1652 := z.DecSliceHelperStart()
	var yyc1652 bool
	if yyl1652 == 0 {
		if yyv1652 == nil {
			yyv1652 = []HorizontalPodAutoscaler{}
			yyc1652 = true
		} else if len(yyv1652) != 0 {
			yyv1652 = yyv1652[:0]
			yyc1652 = true
		}
	} else if yyl1652 > 0 {
		var yyrr1652, yyrl1652 int
		var yyrt1652 bool
		if yyl1652 > cap(yyv1652) {

			yyrg1652 := len(yyv1652) > 0
			yyv21652 := yyv1652
			yyrl1652, yyrt1652 = z.DecInferLen(yyl1652, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt1652 {
				if yyrl1652 <= cap(yyv1652) {
					yyv1652 = yyv1652[:yyrl1652]
				} else {
					yyv1652 = make([]HorizontalPodAutoscaler, yyrl1652)
				}
			} else {
				yyv1652 = make([]HorizontalPodAutoscaler, yyrl1652)
			}
			yyc1652 = true
			yyrr1652 = len(yyv1652)
			if yyrg1652 {
				copy(yyv1652, yyv21652)
			}
		} else if yyl1652 != len(yyv1652) {
			yyv1652 = yyv1652[:yyl1652]
			yyc1652 = true
		}
		yyj1652 := 0
		for ; yyj1652 < yyrr1652; yyj1652++ {
			yyh1652.ElemContainerState(yyj1652)
			if r.TryDecodeAsNil() {
				yyv1652[yyj1652] = HorizontalPodAutoscaler{}
			} else {
				yyv1653 := &yyv1652[yyj1652]
				yyv1653.CodecDecodeSelf(d)
			}

		}
		if yyrt1652 {
			for ; yyj1652 < yyl1652; yyj1652++ {
				yyv1652 = append(yyv1652, HorizontalPodAutoscaler{})
				yyh1652.ElemContainerState(yyj1652)
				if r.TryDecodeAsNil() {
					yyv1652[yyj1652] = HorizontalPodAutoscaler{}
				} else {
					yyv1654 := &yyv1652[yyj1652]
					yyv1654.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1652 := 0
		for ; !r.CheckBreak(); yyj1652++ {

			if yyj1652 >= len(yyv1652) {
				yyv1652 = append(yyv1652, HorizontalPodAutoscaler{}) // var yyz1652 HorizontalPodAutoscaler
				yyc1652 = true
			}
			yyh1652.ElemContainerState(yyj1652)
			if yyj1652 < len(yyv1652) {
				if r.TryDecodeAsNil() {
					yyv1652[yyj1652] = HorizontalPodAutoscaler{}
				} else {
					yyv1655 := &yyv1652[yyj1652]
					yyv1655.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1652 < len(yyv1652) {
			yyv1652 = yyv1652[:yyj1652]
			yyc1652 = true
		} else if yyj1652 == 0 && yyv1652 == nil {
			yyv1652 = []HorizontalPodAutoscaler{}
			yyc1652 = true
		}
	}
	yyh1652.End()
	if yyc1652 {
		*v = yyv1652
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1656 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1657 := &yyv1656
		yy1657.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1658 := *v
	yyh1658, yyl1658 := z.DecSliceHelperStart()
	var yyc1658 bool
	if yyl1658 == 0 {
		if yyv1658 == nil {
			yyv1658 = []APIVersion{}
			yyc1658 = true
		} else if len(yyv1658) != 0 {
			yyv1658 = yyv1658[:0]
			yyc1658 = true
		}
	} else if yyl1658 > 0 {
		var yyrr1658, yyrl1658 int
		var yyrt1658 bool
		if yyl1658 > cap(yyv1658) {

			yyrg1658 := len(yyv1658) > 0
			yyv21658 := yyv1658
			yyrl1658, yyrt1658 = z.DecInferLen(yyl1658, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1658 {
				if yyrl1658 <= cap(yyv1658) {
					yyv1658 = yyv1658[:yyrl1658]
				} else {
					yyv1658 = make([]APIVersion, yyrl1658)
				}
			} else {
				yyv1658 = make([]APIVersion, yyrl1658)
			}
			yyc1658 = true
			yyrr1658 = len(yyv1658)
			if yyrg1658 {
				copy(yyv1658, yyv21658)
			}
		} else if yyl1658 != len(yyv1658) {
			yyv1658 = yyv1658[:yyl1658]
			yyc1658 = true
		}
		yyj1658 := 0
		for ; yyj1658 < yyrr1658; yyj1658++ {
			yyh1658.ElemContainerState(yyj1658)
			if r.TryDecodeAsNil() {
				yyv1658[yyj1658] = APIVersion{}
			} else {
				yyv1659 := &yyv1658[yyj1658]
				yyv1659.CodecDecodeSelf(d)
			}

		}
		if yyrt1658 {
			for ; yyj1658 < yyl1658; yyj1658++ {
				yyv1658 = append(yyv1658, APIVersion{})
				yyh1658.ElemContainerState(yyj1658)
				if r.TryDecodeAsNil() {
					yyv1658[yyj1658] = APIVersion{}
				} else {
					yyv1660 := &yyv1658[yyj1658]
					yyv1660.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1658 := 0
		for ; !r.CheckBreak(); yyj1658++ {

			if yyj1658 >= len(yyv1658) {
				yyv1658 = append(yyv1658, APIVersion{}) // var yyz1658 APIVersion
				yyc1658 = true
			}
			yyh1658.ElemContainerState(yyj1658)
			if yyj1658 < len(yyv1658) {
				if r.TryDecodeAsNil() {
					yyv1658[yyj1658] = APIVersion{}
				} else {
					yyv1661 := &yyv1658[yyj1658]
					yyv1661.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1658 < len(yyv1658) {
			yyv1658 = yyv1658[:yyj1658]
			yyc1658 = true
		} else if yyj1658 == 0 && yyv1658 == nil {
			yyv1658 = []APIVersion{}
			yyc1658 = true
		}
	}
	yyh1658.End()
	if yyc1658 {
		*v = yyv1658
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1662 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1663 := &yyv1662
		yy1663.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1664 := *v
	yyh1664, yyl1664 := z.DecSliceHelperStart()
	var yyc1664 bool
	if yyl1664 == 0 {
		if yyv1664 == nil {
			yyv1664 = []ThirdPartyResource{}
			yyc1664 = true
		} else if len(yyv1664) != 0 {
			yyv1664 = yyv1664[:0]
			yyc1664 = true
		}
	} else if yyl1664 > 0 {
		var yyrr1664, yyrl1664 int
		var yyrt1664 bool
		if yyl1664 > cap(yyv1664) {

			yyrg1664 := len(yyv1664) > 0
			yyv21664 := yyv1664
			yyrl1664, yyrt1664 = z.DecInferLen(yyl1664, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1664 {
				if yyrl1664 <= cap(yyv1664) {
					yyv1664 = yyv1664[:yyrl1664]
				} else {
					yyv1664 = make([]ThirdPartyResource, yyrl1664)
				}
			} else {
				yyv1664 = make([]ThirdPartyResource, yyrl1664)
			}
			yyc1664 = true
			yyrr1664 = len(yyv1664)
			if yyrg1664 {
				copy(yyv1664, yyv21664)
			}
		} else if yyl1664 != len(yyv1664) {
			yyv1664 = yyv1664[:yyl1664]
			yyc1664 = true
		}
		yyj1664 := 0
		for ; yyj1664 < yyrr1664; yyj1664++ {
			yyh1664.ElemContainerState(yyj1664)
			if r.TryDecodeAsNil() {
				yyv1664[yyj1664] = ThirdPartyResource{}
			} else {
				yyv1665 := &yyv1664[yyj1664]
				yyv1665.CodecDecodeSelf(d)
			}

		}
		if yyrt1664 {
			for ; yyj1664 < yyl1664; yyj1664++ {
				yyv1664 = append(yyv1664, ThirdPartyResource{})
				yyh1664.ElemContainerState(yyj1664)
				if r.TryDecodeAsNil() {
					yyv1664[yyj1664] = ThirdPartyResource{}
				} else {
					yyv1666 := &yyv1664[yyj1664]
					yyv1666.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1664 := 0
		for ; !r.CheckBreak(); yyj1664++ {

			if yyj1664 >= len(yyv1664) {
				yyv1664 = append(yyv1664, ThirdPartyResource{}) // var yyz1664 ThirdPartyResource
				yyc1664 = true
			}
			yyh1664.ElemContainerState(yyj1664)
			if yyj1664 < len(yyv1664) {
				if r.TryDecodeAsNil() {
					yyv1664[yyj1664] = ThirdPartyResource{}
				} else {
					yyv1667 := &yyv1664[yyj1664]
					yyv1667.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1664 < len(yyv1664) {
			yyv1664 = yyv1664[:yyj1664]
			yyc1664 = true
		} else if yyj1664 == 0 && yyv1664 == nil {
			yyv1664 = []ThirdPartyResource{}
			yyc1664 = true
		}
	}
	yyh1664.End()
	if yyc1664 {
		*v = yyv1664
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1668 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1669 := &yyv1668
		yy1669.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1670 := *v
	yyh1670, yyl1670 := z.DecSliceHelperStart()
	var yyc1670 bool
	if yyl1670 == 0 {
		if yyv1670 == nil {
			yyv1670 = []Deployment{}
			yyc1670 = true
		} else if len(yyv1670) != 0 {
			yyv1670 = yyv1670[:0]
			yyc1670 = true
		}
	} else if yyl1670 > 0 {
		var yyrr1670, yyrl1670 int
		var yyrt1670 bool
		if yyl1670 > cap(yyv1670) {

			yyrg1670 := len(yyv1670) > 0
			yyv21670 := yyv1670
			yyrl1670, yyrt1670 = z.DecInferLen(yyl1670, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt1670 {
				if yyrl1670 <= cap(yyv1670) {
					yyv1670 = yyv1670[:yyrl1670]
				} else {
					yyv1670 = make([]Deployment, yyrl1670)
				}
			} else {
				yyv1670 = make([]Deployment, yyrl1670)
			}
			yyc1670 = true
			yyrr1670 = len(yyv1670)
			if yyrg1670 {
				copy(yyv1670, yyv21670)
			}
		} else if yyl1670 != len(yyv1670) {
			yyv1670 = yyv1670[:yyl1670]
			yyc1670 = true
		}
		yyj1670 := 0
		for ; yyj1670 < yyrr1670; yyj1670++ {
			yyh1670.ElemContainerState(yyj1670)
			if r.TryDecodeAsNil() {
				yyv1670[yyj1670] = Deployment{}
			} else {
				yyv1671 := &yyv1670[yyj1670]
				yyv1671.CodecDecodeSelf(d)
			}

		}
		if yyrt1670 {
			for ; yyj1670 < yyl1670; yyj1670++ {
				yyv1670 = append(yyv1670, Deployment{})
				yyh1670.ElemContainerState(yyj1670)
				if r.TryDecodeAsNil() {
					yyv1670[yyj1670] = Deployment{}
				} else {
					yyv1672 := &yyv1670[yyj1670]
					yyv1672.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1670 := 0
		for ; !r.CheckBreak(); yyj1670++ {

			if yyj1670 >= len(yyv1670) {
				yyv1670 = append(yyv1670, Deployment{}) // var yyz1670 Deployment
				yyc1670 = true
			}
			yyh1670.ElemContainerState(yyj1670)
			if yyj1670 < len(yyv1670) {
				if r.TryDecodeAsNil() {
					yyv1670[yyj1670] = Deployment{}
				} else {
					yyv1673 := &yyv1670[yyj1670]
					yyv1673.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1670 < len(yyv1670) {
			yyv1670 = yyv1670[:yyj1670]
			yyc1670 = true
		} else if yyj1670 == 0 && yyv1670 == nil {
			yyv1670 = []Deployment{}
			yyc1670 = true
		}
	}
	yyh1670.End()
	if yyc1670 {
		*v = yyv1670
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1674 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1675 := &yyv1674
		yy1675.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1676 := *v
	yyh1676, yyl1676 := z.DecSliceHelperStart()
	var yyc1676 bool
	if yyl1676 == 0 {
		if yyv1676 == nil {
			yyv1676 = []DaemonSet{}
			yyc1676 = true
		} else if len(yyv1676) != 0 {
			yyv1676 = yyv1676[:0]
			yyc1676 = true
		}
	} else if yyl1676 > 0 {
		var yyrr1676, yyrl1676 int
		var yyrt1676 bool
		if yyl1676 > cap(yyv1676) {

			yyrg1676 := len(yyv1676) > 0
			yyv21676 := yyv1676
			yyrl1676, yyrt1676 = z.DecInferLen(yyl1676, z.DecBasicHandle().MaxInitLen, 600)
			if yyrt1676 {
				if yyrl1676 <= cap(yyv1676) {
					yyv1676 = yyv1676[:yyrl1676]
				} else {
					yyv1676 = make([]DaemonSet, yyrl1676)
				}
			} else {
				yyv1676 = make([]DaemonSet, yyrl1676)
			}
			yyc1676 = true
			yyrr1676 = len(yyv1676)
			if yyrg1676 {
				copy(yyv1676, yyv21676)
			}
		} else if yyl1676 != len(yyv1676) {
			yyv1676 = yyv1676[:yyl1676]
			yyc1676 = true
		}
		yyj1676 := 0
		for ; yyj1676 < yyrr1676; yyj1676++ {
			yyh1676.ElemContainerState(yyj1676)
			if r.TryDecodeAsNil() {
				yyv1676[yyj1676] = DaemonSet{}
			} else {
				yyv1677 := &yyv1676[yyj1676]
				yyv1677.CodecDecodeSelf(d)
			}

		}
		if yyrt1676 {
			for ; yyj1676 < yyl1676; yyj1676++ {
				yyv1676 = append(yyv1676, DaemonSet{})
				yyh1676.ElemContainerState(yyj1676)
				if r.TryDecodeAsNil() {
					yyv1676[yyj1676] = DaemonSet{}
				} else {
					yyv1678 := &yyv1676[yyj1676]
					yyv1678.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1676 := 0
		for ; !r.CheckBreak(); yyj1676++ {

			if yyj1676 >= len(yyv1676) {
				yyv1676 = append(yyv1676, DaemonSet{}) // var yyz1676 DaemonSet
				yyc1676 = true
			}
			yyh1676.ElemContainerState(yyj1676)
			if yyj1676 < len(yyv1676) {
				if r.TryDecodeAsNil() {
					yyv1676[yyj1676] = DaemonSet{}
				} else {
					yyv1679 := &yyv1676[yyj1676]
					yyv1679.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1676 < len(yyv1676) {
			yyv1676 = yyv1676[:yyj1676]
			yyc1676 = true
		} else if yyj1676 == 0 && yyv1676 == nil {
			yyv1676 = []DaemonSet{}
			yyc1676 = true
		}
	}
	yyh1676.End()
	if yyc1676 {
		*v = yyv1676
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1680 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1681 := &yyv1680
		yy1681.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1682 := *v
	yyh1682, yyl1682 := z.DecSliceHelperStart()
	var yyc1682 bool
	if yyl1682 == 0 {
		if yyv1682 == nil {
			yyv1682 = []ThirdPartyResourceData{}
			yyc1682 = true
		} else if len(yyv1682) != 0 {
			yyv1682 = yyv1682[:0]
			yyc1682 = true
		}
	} else if yyl1682 > 0 {
		var yyrr1682, yyrl1682 int
		var yyrt1682 bool
		if yyl1682 > cap(yyv1682) {

			yyrg1682 := len(yyv1682) > 0
			yyv21682 := yyv1682
			yyrl1682, yyrt1682 = z.DecInferLen(yyl1682, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1682 {
				if yyrl1682 <= cap(yyv1682) {
					yyv1682 = yyv1682[:yyrl1682]
				} else {
					yyv1682 = make([]ThirdPartyResourceData, yyrl1682)
				}
			} else {
				yyv1682 = make([]ThirdPartyResourceData, yyrl1682)
			}
			yyc1682 = true
			yyrr1682 = len(yyv1682)
			if yyrg1682 {
				copy(yyv1682, yyv21682)
			}
		} else if yyl1682 != len(yyv1682) {
			yyv1682 = yyv1682[:yyl1682]
			yyc1682 = true
		}
		yyj1682 := 0
		for ; yyj1682 < yyrr1682; yyj1682++ {
			yyh1682.ElemContainerState(yyj1682)
			if r.TryDecodeAsNil() {
				yyv1682[yyj1682] = ThirdPartyResourceData{}
			} else {
				yyv1683 := &yyv1682[yyj1682]
				yyv1683.CodecDecodeSelf(d)
			}

		}
		if yyrt1682 {
			for ; yyj1682 < yyl1682; yyj1682++ {
				yyv1682 = append(yyv1682, ThirdPartyResourceData{})
				yyh1682.ElemContainerState(yyj1682)
				if r.TryDecodeAsNil() {
					yyv1682[yyj1682] = ThirdPartyResourceData{}
				} else {
					yyv1684 := &yyv1682[yyj1682]
					yyv1684.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1682 := 0
		for ; !r.CheckBreak(); yyj1682++ {

			if yyj1682 >= len(yyv1682) {
				yyv1682 = append(yyv1682, ThirdPartyResourceData{}) // var yyz1682 ThirdPartyResourceData
				yyc1682 = true
			}
			yyh1682.ElemContainerState(yyj1682)
			if yyj1682 < len(yyv1682) {
				if r.TryDecodeAsNil() {
					yyv1682[yyj1682] = ThirdPartyResourceData{}
				} else {
					yyv1685 := &yyv1682[yyj1682]
					yyv1685.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1682 < len(yyv1682) {
			yyv1682 = yyv1682[:yyj1682]
			yyc1682 = true
		} else if yyj1682 == 0 && yyv1682 == nil {
			yyv1682 = []ThirdPartyResourceData{}
			yyc1682 = true
		}
	}
	yyh1682.End()
	if yyc1682 {
		*v = yyv1682
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1686 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1687 := &yyv1686
		yy1687.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1688 := *v
	yyh1688, yyl1688 := z.DecSliceHelperStart()
	var yyc1688 bool
	if yyl1688 == 0 {
		if yyv1688 == nil {
			yyv1688 = []Job{}
			yyc1688 = true
		} else if len(yyv1688) != 0 {
			yyv1688 = yyv1688[:0]
			yyc1688 = true
		}
	} else if yyl1688 > 0 {
		var yyrr1688, yyrl1688 int
		var yyrt1688 bool
		if yyl1688 > cap(yyv1688) {

			yyrg1688 := len(yyv1688) > 0
			yyv21688 := yyv1688
			yyrl1688, yyrt1688 = z.DecInferLen(yyl1688, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt1688 {
				if yyrl1688 <= cap(yyv1688) {
					yyv1688 = yyv1688[:yyrl1688]
				} else {
					yyv1688 = make([]Job, yyrl1688)
				}
			} else {
				yyv1688 = make([]Job, yyrl1688)
			}
			yyc1688 = true
			yyrr1688 = len(yyv1688)
			if yyrg1688 {
				copy(yyv1688, yyv21688)
			}
		} else if yyl1688 != len(yyv1688) {
			yyv1688 = yyv1688[:yyl1688]
			yyc1688 = true
		}
		yyj1688 := 0
		for ; yyj1688 < yyrr1688; yyj1688++ {
			yyh1688.ElemContainerState(yyj1688)
			if r.TryDecodeAsNil() {
				yyv1688[yyj1688] = Job{}
			} else {
				yyv1689 := &yyv1688[yyj1688]
				yyv1689.CodecDecodeSelf(d)
			}

		}
		if yyrt1688 {
			for ; yyj1688 < yyl1688; yyj1688++ {
				yyv1688 = append(yyv1688, Job{})
				yyh1688.ElemContainerState(yyj1688)
				if r.TryDecodeAsNil() {
					yyv1688[yyj1688] = Job{}
				} else {
					yyv1690 := &yyv1688[yyj1688]
					yyv1690.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1688 := 0
		for ; !r.CheckBreak(); yyj1688++ {

			if yyj1688 >= len(yyv1688) {
				yyv1688 = append(yyv1688, Job{}) // var yyz1688 Job
				yyc1688 = true
			}
			yyh1688.ElemContainerState(yyj1688)
			if yyj1688 < len(yyv1688) {
				if r.TryDecodeAsNil() {
					yyv1688[yyj1688] = Job{}
				} else {
					yyv1691 := &yyv1688[yyj1688]
					yyv1691.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1688 < len(yyv1688) {
			yyv1688 = yyv1688[:yyj1688]
			yyc1688 = true
		} else if yyj1688 == 0 && yyv1688 == nil {
			yyv1688 = []Job{}
			yyc1688 = true
		}
	}
	yyh1688.End()
	if yyc1688 {
		*v = yyv1688
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1692 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1693 := &yyv1692
		yy1693.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1694 := *v
	yyh1694, yyl1694 := z.DecSliceHelperStart()
	var yyc1694 bool
	if yyl1694 == 0 {
		if yyv1694 == nil {
			yyv1694 = []JobCondition{}
			yyc1694 = true
		} else if len(yyv1694) != 0 {
			yyv1694 = yyv1694[:0]
			yyc1694 = true
		}
	} else if yyl1694 > 0 {
		var yyrr1694, yyrl1694 int
		var yyrt1694 bool
		if yyl1694 > cap(yyv1694) {

			yyrg1694 := len(yyv1694) > 0
			yyv21694 := yyv1694
			yyrl1694, yyrt1694 = z.DecInferLen(yyl1694, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1694 {
				if yyrl1694 <= cap(yyv1694) {
					yyv1694 = yyv1694[:yyrl1694]
				} else {
					yyv1694 = make([]JobCondition, yyrl1694)
				}
			} else {
				yyv1694 = make([]JobCondition, yyrl1694)
			}
			yyc1694 = true
			yyrr1694 = len(yyv1694)
			if yyrg1694 {
				copy(yyv1694, yyv21694)
			}
		} else if yyl1694 != len(yyv1694) {
			yyv1694 = yyv1694[:yyl1694]
			yyc1694 = true
		}
		yyj1694 := 0
		for ; yyj1694 < yyrr1694; yyj1694++ {
			yyh1694.ElemContainerState(yyj1694)
			if r.TryDecodeAsNil() {
				yyv1694[yyj1694] = JobCondition{}
			} else {
				yyv1695 := &yyv1694[yyj1694]
				yyv1695.CodecDecodeSelf(d)
			}

		}
		if yyrt1694 {
			for ; yyj1694 < yyl1694; yyj1694++ {
				yyv1694 = append(yyv1694, JobCondition{})
				yyh1694.ElemContainerState(yyj1694)
				if r.TryDecodeAsNil() {
					yyv1694[yyj1694] = JobCondition{}
				} else {
					yyv1696 := &yyv1694[yyj1694]
					yyv1696.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1694 := 0
		for ; !r.CheckBreak(); yyj1694++ {

			if yyj1694 >= len(yyv1694) {
				yyv1694 = append(yyv1694, JobCondition{}) // var yyz1694 JobCondition
				yyc1694 = true
			}
			yyh1694.ElemContainerState(yyj1694)
			if yyj1694 < len(yyv1694) {
				if r.TryDecodeAsNil() {
					yyv1694[yyj1694] = JobCondition{}
				} else {
					yyv1697 := &yyv1694[yyj1694]
					yyv1697.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1694 < len(yyv1694) {
			yyv1694 = yyv1694[:yyj1694]
			yyc1694 = true
		} else if yyj1694 == 0 && yyv1694 == nil {
			yyv1694 = []JobCondition{}
			yyc1694 = true
		}
	}
	yyh1694.End()
	if yyc1694 {
		*v = yyv1694
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1698 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1699 := &yyv1698
		yy1699.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1700 := *v
	yyh1700, yyl1700 := z.DecSliceHelperStart()
	var yyc1700 bool
	if yyl1700 == 0 {
		if yyv1700 == nil {
			yyv1700 = []Ingress{}
			yyc1700 = true
		} else if len(yyv1700) != 0 {
			yyv1700 = yyv1700[:0]
			yyc1700 = true
		}
	} else if yyl1700 > 0 {
		var yyrr1700, yyrl1700 int
		var yyrt1700 bool
		if yyl1700 > cap(yyv1700) {

			yyrg1700 := len(yyv1700) > 0
			yyv21700 := yyv1700
			yyrl1700, yyrt1700 = z.DecInferLen(yyl1700, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt1700 {
				if yyrl1700 <= cap(yyv1700) {
					yyv1700 = yyv1700[:yyrl1700]
				} else {
					yyv1700 = make([]Ingress, yyrl1700)
				}
			} else {
				yyv1700 = make([]Ingress, yyrl1700)
			}
			yyc1700 = true
			yyrr1700 = len(yyv1700)
			if yyrg1700 {
				copy(yyv1700, yyv21700)
			}
		} else if yyl1700 != len(yyv1700) {
			yyv1700 = yyv1700[:yyl1700]
			yyc1700 = true
		}
		yyj1700 := 0
		for ; yyj1700 < yyrr1700; yyj1700++ {
			yyh1700.ElemContainerState(yyj1700)
			if r.TryDecodeAsNil() {
				yyv1700[yyj1700] = Ingress{}
			} else {
				yyv1701 := &yyv1700[yyj1700]
				yyv1701.CodecDecodeSelf(d)
			}

		}
		if yyrt1700 {
			for ; yyj1700 < yyl1700; yyj1700++ {
				yyv1700 = append(yyv1700, Ingress{})
				yyh1700.ElemContainerState(yyj1700)
				if r.TryDecodeAsNil() {
					yyv1700[yyj1700] = Ingress{}
				} else {
					yyv1702 := &yyv1700[yyj1700]
					yyv1702.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1700 := 0
		for ; !r.CheckBreak(); yyj1700++ {

			if yyj1700 >= len(yyv1700) {
				yyv1700 = append(yyv1700, Ingress{}) // var yyz1700 Ingress
				yyc1700 = true
			}
			yyh1700.ElemContainerState(yyj1700)
			if yyj1700 < len(yyv1700) {
				if r.TryDecodeAsNil() {
					yyv1700[yyj1700] = Ingress{}
				} else {
					yyv1703 := &yyv1700[yyj1700]
					yyv1703.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1700 < len(yyv1700) {
			yyv1700 = yyv1700[:yyj1700]
			yyc1700 = true
		} else if yyj1700 == 0 && yyv1700 == nil {
			yyv1700 = []Ingress{}
			yyc1700 = true
		}
	}
	yyh1700.End()
	if yyc1700 {
		*v = yyv1700
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1704 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1705 := &yyv1704
		yy1705.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1706 := *v
	yyh1706, yyl1706 := z.DecSliceHelperStart()
	var yyc1706 bool
	if yyl1706 == 0 {
		if yyv1706 == nil {
			yyv1706 = []IngressRule{}
			yyc1706 = true
		} else if len(yyv1706) != 0 {
			yyv1706 = yyv1706[:0]
			yyc1706 = true
		}
	} else if yyl1706 > 0 {
		var yyrr1706, yyrl1706 int
		var yyrt1706 bool
		if yyl1706 > cap(yyv1706) {

			yyrg1706 := len(yyv1706) > 0
			yyv21706 := yyv1706
			yyrl1706, yyrt1706 = z.DecInferLen(yyl1706, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1706 {
				if yyrl1706 <= cap(yyv1706) {
					yyv1706 = yyv1706[:yyrl1706]
				} else {
					yyv1706 = make([]IngressRule, yyrl1706)
				}
			} else {
				yyv1706 = make([]IngressRule, yyrl1706)
			}
			yyc1706 = true
			yyrr1706 = len(yyv1706)
			if yyrg1706 {
				copy(yyv1706, yyv21706)
			}
		} else if yyl1706 != len(yyv1706) {
			yyv1706 = yyv1706[:yyl1706]
			yyc1706 = true
		}
		yyj1706 := 0
		for ; yyj1706 < yyrr1706; yyj1706++ {
			yyh1706.ElemContainerState(yyj1706)
			if r.TryDecodeAsNil() {
				yyv1706[yyj1706] = IngressRule{}
			} else {
				yyv1707 := &yyv1706[yyj1706]
				yyv1707.CodecDecodeSelf(d)
			}

		}
		if yyrt1706 {
			for ; yyj1706 < yyl1706; yyj1706++ {
				yyv1706 = append(yyv1706, IngressRule{})
				yyh1706.ElemContainerState(yyj1706)
				if r.TryDecodeAsNil() {
					yyv1706[yyj1706] = IngressRule{}
				} else {
					yyv1708 := &yyv1706[yyj1706]
					yyv1708.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1706 := 0
		for ; !r.CheckBreak(); yyj1706++ {

			if yyj1706 >= len(yyv1706) {
				yyv1706 = append(yyv1706, IngressRule{}) // var yyz1706 IngressRule
				yyc1706 = true
			}
			yyh1706.ElemContainerState(yyj1706)
			if yyj1706 < len(yyv1706) {
				if r.TryDecodeAsNil() {
					yyv1706[yyj1706] = IngressRule{}
				} else {
					yyv1709 := &yyv1706[yyj1706]
					yyv1709.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1706 < len(yyv1706) {
			yyv1706 = yyv1706[:yyj1706]
			yyc1706 = true
		} else if yyj1706 == 0 && yyv1706 == nil {
			yyv1706 = []IngressRule{}
			yyc1706 = true
		}
	}
	yyh1706.End()
	if yyc1706 {
		*v = yyv1706
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1710 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1711 := &yyv1710
		yy1711.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1712 := *v
	yyh1712, yyl1712 := z.DecSliceHelperStart()
	var yyc1712 bool
	if yyl1712 == 0 {
		if yyv1712 == nil {
			yyv1712 = []HTTPIngressPath{}
			yyc1712 = true
		} else if len(yyv1712) != 0 {
			yyv1712 = yyv1712[:0]
			yyc1712 = true
		}
	} else if yyl1712 > 0 {
		var yyrr1712, yyrl1712 int
		var yyrt1712 bool
		if yyl1712 > cap(yyv1712) {

			yyrg1712 := len(yyv1712) > 0
			yyv21712 := yyv1712
			yyrl1712, yyrt1712 = z.DecInferLen(yyl1712, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1712 {
				if yyrl1712 <= cap(yyv1712) {
					yyv1712 = yyv1712[:yyrl1712]
				} else {
					yyv1712 = make([]HTTPIngressPath, yyrl1712)
				}
			} else {
				yyv1712 = make([]HTTPIngressPath, yyrl1712)
			}
			yyc1712 = true
			yyrr1712 = len(yyv1712)
			if yyrg1712 {
				copy(yyv1712, yyv21712)
			}
		} else if yyl1712 != len(yyv1712) {
			yyv1712 = yyv1712[:yyl1712]
			yyc1712 = true
		}
		yyj1712 := 0
		for ; yyj1712 < yyrr1712; yyj1712++ {
			yyh1712.ElemContainerState(yyj1712)
			if r.TryDecodeAsNil() {
				yyv1712[yyj1712] = HTTPIngressPath{}
			} else {
				yyv1713 := &yyv1712[yyj1712]
				yyv1713.CodecDecodeSelf(d)
			}

		}
		if yyrt1712 {
			for ; yyj1712 < yyl1712; yyj1712++ {
				yyv1712 = append(yyv1712, HTTPIngressPath{})
				yyh1712.ElemContainerState(yyj1712)
				if r.TryDecodeAsNil() {
					yyv1712[yyj1712] = HTTPIngressPath{}
				} else {
					yyv1714 := &yyv1712[yyj1712]
					yyv1714.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1712 := 0
		for ; !r.CheckBreak(); yyj1712++ {

			if yyj1712 >= len(yyv1712) {
				yyv1712 = append(yyv1712, HTTPIngressPath{}) // var yyz1712 HTTPIngressPath
				yyc1712 = true
			}
			yyh1712.ElemContainerState(yyj1712)
			if yyj1712 < len(yyv1712) {
				if r.TryDecodeAsNil() {
					yyv1712[yyj1712] = HTTPIngressPath{}
				} else {
					yyv1715 := &yyv1712[yyj1712]
					yyv1715.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1712 < len(yyv1712) {
			yyv1712 = yyv1712[:yyj1712]
			yyc1712 = true
		} else if yyj1712 == 0 && yyv1712 == nil {
			yyv1712 = []HTTPIngressPath{}
			yyc1712 = true
		}
	}
	yyh1712.End()
	if yyc1712 {
		*v = yyv1712
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1716 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1717 := &yyv1716
		yy1717.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1718 := *v
	yyh1718, yyl1718 := z.DecSliceHelperStart()
	var yyc1718 bool
	if yyl1718 == 0 {
		if yyv1718 == nil {
			yyv1718 = []NodeUtilization{}
			yyc1718 = true
		} else if len(yyv1718) != 0 {
			yyv1718 = yyv1718[:0]
			yyc1718 = true
		}
	} else if yyl1718 > 0 {
		var yyrr1718, yyrl1718 int
		var yyrt1718 bool
		if yyl1718 > cap(yyv1718) {

			yyrg1718 := len(yyv1718) > 0
			yyv21718 := yyv1718
			yyrl1718, yyrt1718 = z.DecInferLen(yyl1718, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1718 {
				if yyrl1718 <= cap(yyv1718) {
					yyv1718 = yyv1718[:yyrl1718]
				} else {
					yyv1718 = make([]NodeUtilization, yyrl1718)
				}
			} else {
				yyv1718 = make([]NodeUtilization, yyrl1718)
			}
			yyc1718 = true
			yyrr1718 = len(yyv1718)
			if yyrg1718 {
				copy(yyv1718, yyv21718)
			}
		} else if yyl1718 != len(yyv1718) {
			yyv1718 = yyv1718[:yyl1718]
			yyc1718 = true
		}
		yyj1718 := 0
		for ; yyj1718 < yyrr1718; yyj1718++ {
			yyh1718.ElemContainerState(yyj1718)
			if r.TryDecodeAsNil() {
				yyv1718[yyj1718] = NodeUtilization{}
			} else {
				yyv1719 := &yyv1718[yyj1718]
				yyv1719.CodecDecodeSelf(d)
			}

		}
		if yyrt1718 {
			for ; yyj1718 < yyl1718; yyj1718++ {
				yyv1718 = append(yyv1718, NodeUtilization{})
				yyh1718.ElemContainerState(yyj1718)
				if r.TryDecodeAsNil() {
					yyv1718[yyj1718] = NodeUtilization{}
				} else {
					yyv1720 := &yyv1718[yyj1718]
					yyv1720.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1718 := 0
		for ; !r.CheckBreak(); yyj1718++ {

			if yyj1718 >= len(yyv1718) {
				yyv1718 = append(yyv1718, NodeUtilization{}) // var yyz1718 NodeUtilization
				yyc1718 = true
			}
			yyh1718.ElemContainerState(yyj1718)
			if yyj1718 < len(yyv1718) {
				if r.TryDecodeAsNil() {
					yyv1718[yyj1718] = NodeUtilization{}
				} else {
					yyv1721 := &yyv1718[yyj1718]
					yyv1721.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1718 < len(yyv1718) {
			yyv1718 = yyv1718[:yyj1718]
			yyc1718 = true
		} else if yyj1718 == 0 && yyv1718 == nil {
			yyv1718 = []NodeUtilization{}
			yyc1718 = true
		}
	}
	yyh1718.End()
	if yyc1718 {
		*v = yyv1718
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1722 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1723 := &yyv1722
		yy1723.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1724 := *v
	yyh1724, yyl1724 := z.DecSliceHelperStart()
	var yyc1724 bool
	if yyl1724 == 0 {
		if yyv1724 == nil {
			yyv1724 = []ClusterAutoscaler{}
			yyc1724 = true
		} else if len(yyv1724) != 0 {
			yyv1724 = yyv1724[:0]
			yyc1724 = true
		}
	} else if yyl1724 > 0 {
		var yyrr1724, yyrl1724 int
		var yyrt1724 bool
		if yyl1724 > cap(yyv1724) {

			yyrg1724 := len(yyv1724) > 0
			yyv21724 := yyv1724
			yyrl1724, yyrt1724 = z.DecInferLen(yyl1724, z.DecBasicHandle().MaxInitLen, 224)
			if yyrt1724 {
				if yyrl1724 <= cap(yyv1724) {
					yyv1724 = yyv1724[:yyrl1724]
				} else {
					yyv1724 = make([]ClusterAutoscaler, yyrl1724)
				}
			} else {
				yyv1724 = make([]ClusterAutoscaler, yyrl1724)
			}
			yyc1724 = true
			yyrr1724 = len(yyv1724)
			if yyrg1724 {
				copy(yyv1724, yyv21724)
			}
		} else if yyl1724 != len(yyv1724) {
			yyv1724 = yyv1724[:yyl1724]
			yyc1724 = true
		}
		yyj1724 := 0
		for ; yyj1724 < yyrr1724; yyj1724++ {
			yyh1724.ElemContainerState(yyj1724)
			if r.TryDecodeAsNil() {
				yyv1724[yyj1724] = ClusterAutoscaler{}
			} else {
				yyv1725 := &yyv1724[yyj1724]
				yyv1725.CodecDecodeSelf(d)
			}

		}
		if yyrt1724 {
			for ; yyj1724 < yyl1724; yyj1724++ {
				yyv1724 = append(yyv1724, ClusterAutoscaler{})
				yyh1724.ElemContainerState(yyj1724)
				if r.TryDecodeAsNil() {
					yyv1724[yyj1724] = ClusterAutoscaler{}
				} else {
					yyv1726 := &yyv1724[yyj1724]
					yyv1726.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1724 := 0
		for ; !r.CheckBreak(); yyj1724++ {

			if yyj1724 >= len(yyv1724) {
				yyv1724 = append(yyv1724, ClusterAutoscaler{}) // var yyz1724 ClusterAutoscaler
				yyc1724 = true
			}
			yyh1724.ElemContainerState(yyj1724)
			if yyj1724 < len(yyv1724) {
				if r.TryDecodeAsNil() {
					yyv1724[yyj1724] = ClusterAutoscaler{}
				} else {
					yyv1727 := &yyv1724[yyj1724]
					yyv1727.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1724 < len(yyv1724) {
			yyv1724 = yyv1724[:yyj1724]
			yyc1724 = true
		} else if yyj1724 == 0 && yyv1724 == nil {
			yyv1724 = []ClusterAutoscaler{}
			yyc1724 = true
		}
	}
	yyh1724.End()
	if yyc1724 {
		*v = yyv1724
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1728 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1729 := &yyv1728
		yy1729.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1730 := *v
	yyh1730, yyl1730 := z.DecSliceHelperStart()
	var yyc1730 bool
	if yyl1730 == 0 {
		if yyv1730 == nil {
			yyv1730 = []LabelSelectorRequirement{}
			yyc1730 = true
		} else if len(yyv1730) != 0 {
			yyv1730 = yyv1730[:0]
			yyc1730 = true
		}
	} else if yyl1730 > 0 {
		var yyrr1730, yyrl1730 int
		var yyrt1730 bool
		if yyl1730 > cap(yyv1730) {

			yyrg1730 := len(yyv1730) > 0
			yyv21730 := yyv1730
			yyrl1730, yyrt1730 = z.DecInferLen(yyl1730, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1730 {
				if yyrl1730 <= cap(yyv1730) {
					yyv1730 = yyv1730[:yyrl1730]
				} else {
					yyv1730 = make([]LabelSelectorRequirement, yyrl1730)
				}
			} else {
				yyv1730 = make([]LabelSelectorRequirement, yyrl1730)
			}
			yyc1730 = true
			yyrr1730 = len(yyv1730)
			if yyrg1730 {
				copy(yyv1730, yyv21730)
			}
		} else if yyl1730 != len(yyv1730) {
			yyv1730 = yyv1730[:yyl1730]
			yyc1730 = true
		}
		yyj1730 := 0
		for ; yyj1730 < yyrr1730; yyj1730++ {
			yyh1730.ElemContainerState(yyj1730)
			if r.TryDecodeAsNil() {
				yyv1730[yyj1730] = LabelSelectorRequirement{}
			} else {
				yyv1731 := &yyv1730[yyj1730]
				yyv1731.CodecDecodeSelf(d)
			}

		}
		if yyrt1730 {
			for ; yyj1730 < yyl1730; yyj1730++ {
				yyv1730 = append(yyv1730, LabelSelectorRequirement{})
				yyh1730.ElemContainerState(yyj1730)
				if r.TryDecodeAsNil() {
					yyv1730[yyj1730] = LabelSelectorRequirement{}
				} else {
					yyv1732 := &yyv1730[yyj1730]
					yyv1732.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1730 := 0
		for ; !r.CheckBreak(); yyj1730++ {

			if yyj1730 >= len(yyv1730) {
				yyv1730 = append(yyv1730, LabelSelectorRequirement{}) // var yyz1730 LabelSelectorRequirement
				yyc1730 = true
			}
			yyh1730.ElemContainerState(yyj1730)
			if yyj1730 < len(yyv1730) {
				if r.TryDecodeAsNil() {
					yyv1730[yyj1730] = LabelSelectorRequirement{}
				} else {
					yyv1733 := &yyv1730[yyj1730]
					yyv1733.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1730 < len(yyv1730) {
			yyv1730 = yyv1730[:yyj1730]
			yyc1730 = true
		} else if yyj1730 == 0 && yyv1730 == nil {
			yyv1730 = []LabelSelectorRequirement{}
			yyc1730 = true
		}
	}
	yyh1730.End()
	if yyc1730 {
		*v = yyv1730
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1734 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1735 := &yyv1734
		yy1735.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1736 := *v
	yyh1736, yyl1736 := z.DecSliceHelperStart()
	var yyc1736 bool
	if yyl1736 == 0 {
		if yyv1736 == nil {
			yyv1736 = []ReplicaSet{}
			yyc1736 = true
		} else if len(yyv1736) != 0 {
			yyv1736 = yyv1736[:0]
			yyc1736 = true
		}
	} else if yyl1736 > 0 {
		var yyrr1736, yyrl1736 int
		var yyrt1736 bool
		if yyl1736 > cap(yyv1736) {

			yyrg1736 := len(yyv1736) > 0
			yyv21736 := yyv1736
			yyrl1736, yyrt1736 = z.DecInferLen(yyl1736, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1736 {
				if yyrl1736 <= cap(yyv1736) {
					yyv1736 = yyv1736[:yyrl1736]
				} else {
					yyv1736 = make([]ReplicaSet, yyrl1736)
				}
			} else {
				yyv1736 = make([]ReplicaSet, yyrl1736)
			}
			yyc1736 = true
			yyrr1736 = len(yyv1736)
			if yyrg1736 {
				copy(yyv1736, yyv21736)
			}
		} else if yyl1736 != len(yyv1736) {
			yyv1736 = yyv1736[:yyl1736]
			yyc1736 = true
		}
		yyj1736 := 0
		for ; yyj1736 < yyrr1736; yyj1736++ {
			yyh1736.ElemContainerState(yyj1736)
			if r.TryDecodeAsNil() {
				yyv1736[yyj1736] = ReplicaSet{}
			} else {
				yyv1737 := &yyv1736[yyj1736]
				yyv1737.CodecDecodeSelf(d)
			}

		}
		if yyrt1736 {
			for ; yyj1736 < yyl1736; yyj1736++ {
				yyv1736 = append(yyv1736, ReplicaSet{})
				yyh1736.ElemContainerState(yyj1736)
				if r.TryDecodeAsNil() {
					yyv1736[yyj1736] = ReplicaSet{}
				} else {
					yyv1738 := &yyv1736[yyj1736]
					yyv1738.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1736 := 0
		for ; !r.CheckBreak(); yyj1736++ {

			if yyj1736 >= len(yyv1736) {
				yyv1736 = append(yyv1736, ReplicaSet{}) // var yyz1736 ReplicaSet
				yyc1736 = true
			}
			yyh1736.ElemContainerState(yyj1736)
			if yyj1736 < len(yyv1736) {
				if r.TryDecodeAsNil() {
					yyv1736[yyj1736] = ReplicaSet{}
				} else {
					yyv1739 := &yyv1736[yyj1736]
					yyv1739.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1736 < len(yyv1736) {
			yyv1736 = yyv1736[:yyj1736]
			yyc1736 = true
		} else if yyj1736 == 0 && yyv1736 == nil {
			yyv1736 = []ReplicaSet{}
			yyc1736 = true
		}
	}
	yyh1736.End()
	if yyc1736 {
		*v = yyv1736
	}
}
